; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27041.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_01JOAMLHOP@?9@				; `string'
EXTRN	__imp__time64:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp_srand:PROC
;	COMDAT ??_C@_01JOAMLHOP@?9@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9@ DB '-', 00H			; `string'
PUBLIC	zipClose
PUBLIC	Write_GlobalComment
PUBLIC	Write_EndOfCentralDirectoryRecord
PUBLIC	Write_Zip64EndOfCentralDirectoryRecord
PUBLIC	Write_Zip64EndOfCentralDirectoryLocator
PUBLIC	zipCloseFileInZip
PUBLIC	zipCloseFileInZipRaw64
PUBLIC	zipCloseFileInZipRaw
PUBLIC	zipWriteInFileInZip
PUBLIC	zipOpenNewFileInZip
PUBLIC	zipOpenNewFileInZip64
PUBLIC	zipOpenNewFileInZip2_64
PUBLIC	zipOpenNewFileInZip2
PUBLIC	zipOpenNewFileInZip3_64
PUBLIC	zipOpenNewFileInZip3
PUBLIC	zipOpenNewFileInZip4_64
PUBLIC	Write_LocalFileHeader
PUBLIC	zipOpen64
PUBLIC	zipOpen
PUBLIC	zipOpen2_64
PUBLIC	zipOpen2
PUBLIC	zipOpen3
PUBLIC	LoadCentralDirectoryRecord
?calls@?1??crypthead@@9@9 DD 01H DUP (?)		; `crypthead'::`2'::calls
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipClose DD imagerel $LN26
	DD	imagerel $LN26+49
	DD	imagerel $unwind$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zipClose DD imagerel $LN26+49
	DD	imagerel $LN26+54
	DD	imagerel $chain$0$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$zipClose DD imagerel $LN26+54
	DD	imagerel $LN26+87
	DD	imagerel $chain$1$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zipClose DD imagerel $LN26+87
	DD	imagerel $LN26+255
	DD	imagerel $chain$2$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zipClose DD imagerel $LN26+255
	DD	imagerel $LN26+307
	DD	imagerel $chain$3$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$zipClose DD imagerel $LN26+307
	DD	imagerel $LN26+330
	DD	imagerel $chain$4$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$zipClose DD imagerel $LN26+330
	DD	imagerel $LN26+361
	DD	imagerel $chain$5$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_GlobalComment DD imagerel $LN10
	DD	imagerel $LN10+137
	DD	imagerel $unwind$Write_GlobalComment
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_EndOfCentralDirectoryRecord DD imagerel $LN24
	DD	imagerel $LN24+113
	DD	imagerel $unwind$Write_EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$Write_EndOfCentralDirectoryRecord DD imagerel $LN24+113
	DD	imagerel $LN24+270
	DD	imagerel $chain$0$Write_EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$Write_EndOfCentralDirectoryRecord DD imagerel $LN24+270
	DD	imagerel $LN24+286
	DD	imagerel $chain$1$Write_EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_Zip64EndOfCentralDirectoryRecord DD imagerel $LN13
	DD	imagerel $LN13+301
	DD	imagerel $unwind$Write_Zip64EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_Zip64EndOfCentralDirectoryLocator DD imagerel $LN10
	DD	imagerel $LN10+125
	DD	imagerel $unwind$Write_Zip64EndOfCentralDirectoryLocator
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipCloseFileInZipRaw64 DD imagerel $LN62
	DD	imagerel $LN62+51
	DD	imagerel $unwind$zipCloseFileInZipRaw64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zipCloseFileInZipRaw64 DD imagerel $LN62+51
	DD	imagerel $LN62+585
	DD	imagerel $chain$3$zipCloseFileInZipRaw64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$zipCloseFileInZipRaw64 DD imagerel $LN62+585
	DD	imagerel $LN62+1111
	DD	imagerel $chain$5$zipCloseFileInZipRaw64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$zipCloseFileInZipRaw64 DD imagerel $LN62+1111
	DD	imagerel $LN62+1127
	DD	imagerel $chain$6$zipCloseFileInZipRaw64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipWriteInFileInZip DD imagerel $LN30
	DD	imagerel $LN30+55
	DD	imagerel $unwind$zipWriteInFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zipWriteInFileInZip DD imagerel $LN30+55
	DD	imagerel $LN30+215
	DD	imagerel $chain$0$zipWriteInFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zipWriteInFileInZip DD imagerel $LN30+215
	DD	imagerel $LN30+338
	DD	imagerel $chain$2$zipWriteInFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zipWriteInFileInZip DD imagerel $LN30+338
	DD	imagerel $LN30+364
	DD	imagerel $chain$3$zipWriteInFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel $unwind$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer+22
	DD	imagerel zip64FlushWriteBuffer+37
	DD	imagerel $chain$0$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer+37
	DD	imagerel zip64FlushWriteBuffer+118
	DD	imagerel $chain$2$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer+118
	DD	imagerel zip64FlushWriteBuffer+123
	DD	imagerel $chain$3$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer+123
	DD	imagerel zip64FlushWriteBuffer+219
	DD	imagerel $chain$4$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip DD imagerel $LN4
	DD	imagerel $LN4+137
	DD	imagerel $unwind$zipOpenNewFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip64 DD imagerel $LN4
	DD	imagerel $LN4+144
	DD	imagerel $unwind$zipOpenNewFileInZip64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip2_64 DD imagerel $LN4
	DD	imagerel $LN4+151
	DD	imagerel $unwind$zipOpenNewFileInZip2_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip2 DD imagerel $LN4
	DD	imagerel $LN4+144
	DD	imagerel $unwind$zipOpenNewFileInZip2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip3_64 DD imagerel $LN4
	DD	imagerel $LN4+179
	DD	imagerel $unwind$zipOpenNewFileInZip3_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip3 DD imagerel $LN4
	DD	imagerel $LN4+172
	DD	imagerel $unwind$zipOpenNewFileInZip3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip4_64 DD imagerel $LN66
	DD	imagerel $LN66+73
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zipOpenNewFileInZip4_64 DD imagerel $LN66+73
	DD	imagerel $LN66+815
	DD	imagerel $chain$3$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$zipOpenNewFileInZip4_64 DD imagerel $LN66+815
	DD	imagerel $LN66+1012
	DD	imagerel $chain$4$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$zipOpenNewFileInZip4_64 DD imagerel $LN66+1012
	DD	imagerel $LN66+1023
	DD	imagerel $chain$5$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$zipOpenNewFileInZip4_64 DD imagerel $LN66+1023
	DD	imagerel $LN66+1408
	DD	imagerel $chain$6$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$zipOpenNewFileInZip4_64 DD imagerel $LN66+1408
	DD	imagerel $LN66+1424
	DD	imagerel $chain$7$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_LocalFileHeader DD imagerel $LN33
	DD	imagerel $LN33+604
	DD	imagerel $unwind$Write_LocalFileHeader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen2_64 DD imagerel $LN7
	DD	imagerel $LN7+94
	DD	imagerel $unwind$zipOpen2_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen2 DD imagerel $LN7
	DD	imagerel $LN7+78
	DD	imagerel $unwind$zipOpen2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen3 DD imagerel $LN16
	DD	imagerel $LN16+412
	DD	imagerel $unwind$zipOpen3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$LoadCentralDirectoryRecord DD imagerel $LN59
	DD	imagerel $LN59+930
	DD	imagerel $unwind$LoadCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64
	DD	imagerel zip64local_SearchCentralDir64+97
	DD	imagerel $unwind$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64+97
	DD	imagerel zip64local_SearchCentralDir64+117
	DD	imagerel $chain$0$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64+117
	DD	imagerel zip64local_SearchCentralDir64+292
	DD	imagerel $chain$1$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64+292
	DD	imagerel zip64local_SearchCentralDir64+315
	DD	imagerel $chain$2$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64+315
	DD	imagerel zip64local_SearchCentralDir64+524
	DD	imagerel $chain$3$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir
	DD	imagerel zip64local_SearchCentralDir+100
	DD	imagerel $unwind$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir+100
	DD	imagerel zip64local_SearchCentralDir+119
	DD	imagerel $chain$0$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir+119
	DD	imagerel zip64local_SearchCentralDir+292
	DD	imagerel $chain$1$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir+292
	DD	imagerel zip64local_SearchCentralDir+327
	DD	imagerel $chain$2$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir+327
	DD	imagerel zip64local_SearchCentralDir+347
	DD	imagerel $chain$3$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getLong64 DD imagerel zip64local_getLong64
	DD	imagerel zip64local_getLong64+369
	DD	imagerel $unwind$zip64local_getLong64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getLong DD imagerel zip64local_getLong
	DD	imagerel zip64local_getLong+205
	DD	imagerel $unwind$zip64local_getLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getShort DD imagerel zip64local_getShort
	DD	imagerel zip64local_getShort+124
	DD	imagerel $unwind$zip64local_getShort
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getByte DD imagerel zip64local_getByte
	DD	imagerel zip64local_getByte+102
	DD	imagerel $unwind$zip64local_getByte
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_putValue_inmemory DD imagerel zip64local_putValue_inmemory
	DD	imagerel zip64local_putValue_inmemory+70
	DD	imagerel $unwind$zip64local_putValue_inmemory
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_putValue DD imagerel zip64local_putValue
	DD	imagerel zip64local_putValue+59
	DD	imagerel $unwind$zip64local_putValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zip64local_putValue DD imagerel zip64local_putValue+59
	DD	imagerel zip64local_putValue+81
	DD	imagerel $chain$0$zip64local_putValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$zip64local_putValue DD imagerel zip64local_putValue+81
	DD	imagerel zip64local_putValue+109
	DD	imagerel $chain$1$zip64local_putValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_data_in_datablock DD imagerel add_data_in_datablock
	DD	imagerel add_data_in_datablock+223
	DD	imagerel $unwind$add_data_in_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$free_linkedlist DD imagerel free_linkedlist
	DD	imagerel free_linkedlist+32
	DD	imagerel $unwind$free_linkedlist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$free_datablock DD imagerel free_datablock
	DD	imagerel free_datablock+9
	DD	imagerel $unwind$free_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$free_datablock DD imagerel free_datablock+9
	DD	imagerel free_datablock+38
	DD	imagerel $chain$0$free_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$free_datablock DD imagerel free_datablock+38
	DD	imagerel free_datablock+43
	DD	imagerel $chain$1$free_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$allocate_new_datablock DD imagerel allocate_new_datablock
	DD	imagerel allocate_new_datablock+38
	DD	imagerel $unwind$allocate_new_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$crypthead DD imagerel crypthead
	DD	imagerel crypthead+322
	DD	imagerel $unwind$crypthead
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_keys DD imagerel init_keys
	DD	imagerel init_keys+107
	DD	imagerel $unwind$init_keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_keys DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crypthead DD 0c1e01H
	DD	0d741eH
	DD	0c641eH
	DD	0b541eH
	DD	0a341eH
	DD	0f01a521eH
	DD	0d016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$allocate_new_datablock DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$free_datablock DD 021H
	DD	imagerel free_datablock
	DD	imagerel free_datablock+9
	DD	imagerel $unwind$free_datablock
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$free_datablock DD 020521H
	DD	043405H
	DD	imagerel free_datablock
	DD	imagerel free_datablock+9
	DD	imagerel $unwind$free_datablock
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_datablock DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_linkedlist DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_data_in_datablock DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$zip64local_putValue DD 021H
	DD	imagerel zip64local_putValue
	DD	imagerel zip64local_putValue+59
	DD	imagerel $unwind$zip64local_putValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zip64local_putValue DD 020521H
	DD	077405H
	DD	imagerel zip64local_putValue
	DD	imagerel zip64local_putValue+59
	DD	imagerel $unwind$zip64local_putValue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_putValue DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_putValue_inmemory DD 020501H
	DD	017405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getByte DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getShort DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getLong DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getLong64 DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zip64local_SearchCentralDir DD 021H
	DD	imagerel zip64local_SearchCentralDir
	DD	imagerel zip64local_SearchCentralDir+100
	DD	imagerel $unwind$zip64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zip64local_SearchCentralDir DD 021H
	DD	imagerel zip64local_SearchCentralDir+100
	DD	imagerel zip64local_SearchCentralDir+119
	DD	imagerel $chain$0$zip64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$zip64local_SearchCentralDir DD 020521H
	DD	0bc405H
	DD	imagerel zip64local_SearchCentralDir+100
	DD	imagerel zip64local_SearchCentralDir+119
	DD	imagerel $chain$0$zip64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zip64local_SearchCentralDir DD 020521H
	DD	0a5405H
	DD	imagerel zip64local_SearchCentralDir
	DD	imagerel zip64local_SearchCentralDir+100
	DD	imagerel $unwind$zip64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_SearchCentralDir DD 081101H
	DD	0d3411H
	DD	0f00d3211H
	DD	0d009e00bH
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zip64local_SearchCentralDir64 DD 021H
	DD	imagerel zip64local_SearchCentralDir64
	DD	imagerel zip64local_SearchCentralDir64+97
	DD	imagerel $unwind$zip64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zip64local_SearchCentralDir64 DD 021H
	DD	imagerel zip64local_SearchCentralDir64+97
	DD	imagerel zip64local_SearchCentralDir64+117
	DD	imagerel $chain$0$zip64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$zip64local_SearchCentralDir64 DD 020521H
	DD	0cc405H
	DD	imagerel zip64local_SearchCentralDir64+97
	DD	imagerel zip64local_SearchCentralDir64+117
	DD	imagerel $chain$0$zip64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zip64local_SearchCentralDir64 DD 020521H
	DD	04d405H
	DD	imagerel zip64local_SearchCentralDir64
	DD	imagerel zip64local_SearchCentralDir64+97
	DD	imagerel $unwind$zip64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_SearchCentralDir64 DD 070d01H
	DD	0f009420dH
	DD	07005e007H
	DD	050036004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LoadCentralDirectoryRecord DD 091401H
	DD	0f00d6214H
	DD	0d009e00bH
	DD	07005c007H
	DD	030036004H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen3 DD 0b2a01H
	DD	02037e42aH
	DD	02036742aH
	DD	02035642aH
	DD	02034342aH
	DD	02032012aH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen2 DD 020901H
	DD	03002f209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen2_64 DD 020701H
	DD	0110107H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_LocalFileHeader DD 0a4401H
	DD	085444H
	DD	0a6413H
	DD	093413H
	DD	0f00f3213H
	DD	0700be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$zipOpenNewFileInZip4_64 DD 021H
	DD	imagerel $LN66
	DD	imagerel $LN66+73
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$zipOpenNewFileInZip4_64 DD 060021H
	DD	0ae400H
	DD	012c400H
	DD	0116400H
	DD	imagerel $LN66
	DD	imagerel $LN66+73
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$zipOpenNewFileInZip4_64 DD 021H
	DD	imagerel $LN66
	DD	imagerel $LN66+73
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$zipOpenNewFileInZip4_64 DD 060021H
	DD	0ae400H
	DD	012c400H
	DD	0116400H
	DD	imagerel $LN66
	DD	imagerel $LN66+73
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zipOpenNewFileInZip4_64 DD 082021H
	DD	0ae420H
	DD	012c41bH
	DD	0116413H
	DD	0105408H
	DD	imagerel $LN66
	DD	imagerel $LN66+73
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip4_64 DD 050f01H
	DD	0f00ba20fH
	DD	07007d009H
	DD	03006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip3 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip3_64 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip2 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip2_64 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip64 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$zip64FlushWriteBuffer DD 021H
	DD	imagerel zip64FlushWriteBuffer
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel $unwind$zip64FlushWriteBuffer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zip64FlushWriteBuffer DD 021H
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel zip64FlushWriteBuffer+37
	DD	imagerel $chain$0$zip64FlushWriteBuffer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zip64FlushWriteBuffer DD 040a21H
	DD	08e40aH
	DD	076405H
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel zip64FlushWriteBuffer+37
	DD	imagerel $chain$0$zip64FlushWriteBuffer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zip64FlushWriteBuffer DD 020521H
	DD	065405H
	DD	imagerel zip64FlushWriteBuffer
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel $unwind$zip64FlushWriteBuffer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64FlushWriteBuffer DD 040a01H
	DD	09340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zipWriteInFileInZip DD 021H
	DD	imagerel $LN30
	DD	imagerel $LN30+55
	DD	imagerel $unwind$zipWriteInFileInZip
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zipWriteInFileInZip DD 020021H
	DD	06e400H
	DD	imagerel $LN30
	DD	imagerel $LN30+55
	DD	imagerel $unwind$zipWriteInFileInZip
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zipWriteInFileInZip DD 020521H
	DD	06e405H
	DD	imagerel $LN30
	DD	imagerel $LN30+55
	DD	imagerel $unwind$zipWriteInFileInZip
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipWriteInFileInZip DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$zipCloseFileInZipRaw64 DD 021H
	DD	imagerel $LN62
	DD	imagerel $LN62+51
	DD	imagerel $unwind$zipCloseFileInZipRaw64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$zipCloseFileInZipRaw64 DD 080021H
	DD	04f400H
	DD	0cc400H
	DD	0b7400H
	DD	0a6400H
	DD	imagerel $LN62
	DD	imagerel $LN62+51
	DD	imagerel $unwind$zipCloseFileInZipRaw64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zipCloseFileInZipRaw64 DD 081421H
	DD	04f414H
	DD	0cc40fH
	DD	0b740aH
	DD	0a6405H
	DD	imagerel $LN62
	DD	imagerel $LN62+51
	DD	imagerel $unwind$zipCloseFileInZipRaw64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipCloseFileInZipRaw64 DD 050b01H
	DD	0e007420bH
	DD	05003d005H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_Zip64EndOfCentralDirectoryLocator DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_Zip64EndOfCentralDirectoryRecord DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$Write_EndOfCentralDirectoryRecord DD 021H
	DD	imagerel $LN24
	DD	imagerel $LN24+113
	DD	imagerel $unwind$Write_EndOfCentralDirectoryRecord
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$Write_EndOfCentralDirectoryRecord DD 020521H
	DD	067405H
	DD	imagerel $LN24
	DD	imagerel $LN24+113
	DD	imagerel $unwind$Write_EndOfCentralDirectoryRecord
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_EndOfCentralDirectoryRecord DD 060f01H
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_GlobalComment DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$zipClose DD 021H
	DD	imagerel $LN26
	DD	imagerel $LN26+49
	DD	imagerel $unwind$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$zipClose DD 021H
	DD	imagerel $LN26+49
	DD	imagerel $LN26+54
	DD	imagerel $chain$0$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zipClose DD 021H
	DD	imagerel $LN26+54
	DD	imagerel $LN26+87
	DD	imagerel $chain$1$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zipClose DD 020521H
	DD	083405H
	DD	imagerel $LN26+54
	DD	imagerel $LN26+87
	DD	imagerel $chain$1$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$zipClose DD 020521H
	DD	0af405H
	DD	imagerel $LN26+49
	DD	imagerel $LN26+54
	DD	imagerel $chain$0$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zipClose DD 020521H
	DD	09c405H
	DD	imagerel $LN26
	DD	imagerel $LN26+49
	DD	imagerel $unwind$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipClose DD 060d01H
	DD	0b540dH
	DD	0e009320dH
	DD	060067007H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\time.h
;	COMDAT time
_TEXT	SEGMENT
_Time$dead$ = 8
time	PROC						; COMDAT

; 536  :             return _time64(_Time);

  00000	33 c9		 xor	 ecx, ecx
  00002	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__time64
time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\crypt.h
;	COMDAT decrypt_byte
_TEXT	SEGMENT
pkeys$ = 8
pcrc_32_tab$dead$ = 16
decrypt_byte PROC					; COMDAT

; 37   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 38   :                      * unpredictable manner on 16-bit systems; not a problem
; 39   :                      * with any known compiler so far, though */
; 40   : 
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  00000	8b 51 08	 mov	 edx, DWORD PTR [rcx+8]
  00003	81 e2 fd ff 00
	00		 and	 edx, 65533		; 0000fffdH
  00009	83 ca 02	 or	 edx, 2

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  0000c	8b c2		 mov	 eax, edx
  0000e	83 f0 01	 xor	 eax, 1
  00011	0f af c2	 imul	 eax, edx
  00014	c1 e8 08	 shr	 eax, 8
  00017	0f b6 c0	 movzx	 eax, al

; 43   : }

  0001a	c3		 ret	 0
decrypt_byte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\crypt.h
;	COMDAT update_keys
_TEXT	SEGMENT
pkeys$ = 8
pcrc_32_tab$ = 16
c$ = 24
update_keys PROC					; COMDAT

; 50   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  00000	44 8b 11	 mov	 r10d, DWORD PTR [rcx]
  00003	4c 8b d9	 mov	 r11, rcx
  00006	45 8b ca	 mov	 r9d, r10d
  00009	41 8b c0	 mov	 eax, r8d
  0000c	4c 33 c8	 xor	 r9, rax
  0000f	41 c1 ea 08	 shr	 r10d, 8
  00013	41 0f b6 c1	 movzx	 eax, r9b
  00017	44 8b 0c 82	 mov	 r9d, DWORD PTR [rdx+rax*4]
  0001b	45 33 ca	 xor	 r9d, r10d
  0001e	44 89 09	 mov	 DWORD PTR [rcx], r9d

; 51   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;

  00021	41 0f b6 c1	 movzx	 eax, r9b

; 52   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;

  00025	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00028	69 c0 05 84 08
	08		 imul	 eax, eax, 134775813	; 08088405H
  0002e	ff c0		 inc	 eax
  00030	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 53   :     {
; 54   :       register int keyshift = (int)((*(pkeys+1)) >> 24);

  00033	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00036	48 c1 e8 18	 shr	 rax, 24

; 55   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  0003a	48 33 c1	 xor	 rax, rcx
  0003d	c1 e9 08	 shr	 ecx, 8
  00040	0f b6 c0	 movzx	 eax, al
  00043	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  00046	33 c1		 xor	 eax, ecx
  00048	41 89 43 08	 mov	 DWORD PTR [r11+8], eax

; 56   :     }
; 57   :     return c;

  0004c	41 8b c0	 mov	 eax, r8d

; 58   : }

  0004f	c3		 ret	 0
update_keys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\crypt.h
;	COMDAT init_keys
_TEXT	SEGMENT
passwd$ = 48
pkeys$ = 56
pcrc_32_tab$ = 64
init_keys PROC						; COMDAT

; 66   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 67   :     *(pkeys+0) = 305419896L;

  0000f	c7 02 78 56 34
	12		 mov	 DWORD PTR [rdx], 305419896 ; 12345678H
  00015	49 8b f0	 mov	 rsi, r8

; 68   :     *(pkeys+1) = 591751049L;

  00018	c7 42 04 89 67
	45 23		 mov	 DWORD PTR [rdx+4], 591751049 ; 23456789H
  0001f	48 8b fa	 mov	 rdi, rdx

; 69   :     *(pkeys+2) = 878082192L;

  00022	c7 42 08 90 78
	56 34		 mov	 DWORD PTR [rdx+8], 878082192 ; 34567890H
  00029	48 8b d9	 mov	 rbx, rcx

; 70   :     while (*passwd != '\0') {

  0002c	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  0002f	84 c0		 test	 al, al
  00031	74 28		 je	 SHORT $LN3@init_keys
  00033	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL2@init_keys:

; 71   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  00040	44 0f be c0	 movsx	 r8d, al
  00044	48 8b d6	 mov	 rdx, rsi
  00047	48 8b cf	 mov	 rcx, rdi
  0004a	e8 00 00 00 00	 call	 update_keys
  0004f	0f b6 43 01	 movzx	 eax, BYTE PTR [rbx+1]

; 72   :         passwd++;

  00053	48 8d 5b 01	 lea	 rbx, QWORD PTR [rbx+1]
  00057	84 c0		 test	 al, al
  00059	75 e5		 jne	 SHORT $LL2@init_keys
$LN3@init_keys:

; 73   :     }
; 74   : }

  0005b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00060	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
init_keys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\crypt.h
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\time.h
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\crypt.h
;	COMDAT crypthead
_TEXT	SEGMENT
header$ = 32
passwd$ = 80
buf$ = 88
bufSize$dead$ = 96
pkeys$ = 104
pcrc_32_tab$ = 112
crcForCrypting$ = 120
crypthead PROC						; COMDAT

; 96   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 55		 push	 r13
  00016	41 56		 push	 r14
  00018	41 57		 push	 r15
  0001a	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 97   :     int n;                       /* index in random header */
; 98   :     int t;                       /* temporary */
; 99   :     int c;                       /* random byte */
; 100  :     unsigned char header[RAND_HEAD_LEN-2]; /* random header */
; 101  :     static unsigned calls = 0;   /* ensure different random header each time */
; 102  : 
; 103  :     if (bufSize<RAND_HEAD_LEN)
; 104  :       return 0;
; 105  : 
; 106  :     /* First generate RAND_HEAD_LEN-2 random bytes. We encrypt the
; 107  :      * output of rand() to get less predictability, since rand() is
; 108  :      * often poorly implemented.
; 109  :      */
; 110  :     if (++calls == 1)

  0001e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?calls@?1??crypthead@@9@9
  00024	49 8b d9	 mov	 rbx, r9
  00027	ff c0		 inc	 eax
  00029	4c 8b ea	 mov	 r13, rdx
  0002c	89 05 00 00 00
	00		 mov	 DWORD PTR ?calls@?1??crypthead@@9@9, eax
  00032	48 8b e9	 mov	 rbp, rcx
  00035	83 f8 01	 cmp	 eax, 1
  00038	75 15		 jne	 SHORT $LN9@crypthead
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\time.h

; 536  :             return _time64(_Time);

  0003a	33 c9		 xor	 ecx, ecx
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\crypt.h

; 112  :         srand((unsigned)(time(NULL) ^ ZCR_SEED2));

  00042	35 4e e6 40 bb	 xor	 eax, -1153374642	; bb40e64eH
  00047	8b c8		 mov	 ecx, eax
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_srand
$LN9@crypthead:

; 113  :     }
; 114  :     init_keys(passwd, pkeys, pcrc_32_tab);

  0004f	4c 8b 74 24 70	 mov	 r14, QWORD PTR pcrc_32_tab$[rsp]
  00054	48 8b d3	 mov	 rdx, rbx
  00057	4d 8b c6	 mov	 r8, r14
  0005a	48 8b cd	 mov	 rcx, rbp
  0005d	e8 00 00 00 00	 call	 init_keys
  00062	33 f6		 xor	 esi, esi
$LL4@crypthead:

; 115  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)
; 116  :     {
; 117  :         c = (rand() >> 7) & 0xff;

  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  0006a	c1 f8 07	 sar	 eax, 7

; 118  :         header[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, c, t);

  0006d	48 8b cb	 mov	 rcx, rbx
  00070	44 0f b6 c0	 movzx	 r8d, al
  00074	e8 00 00 00 00	 call	 decrypt_byte
  00079	49 8b d6	 mov	 rdx, r14
  0007c	8b f8		 mov	 edi, eax
  0007e	e8 00 00 00 00	 call	 update_keys
  00083	44 32 c7	 xor	 r8b, dil
  00086	44 88 44 34 20	 mov	 BYTE PTR header$[rsp+rsi], r8b
  0008b	48 ff c6	 inc	 rsi
  0008e	48 83 fe 0a	 cmp	 rsi, 10
  00092	7c d0		 jl	 SHORT $LL4@crypthead

; 119  :     }
; 120  :     /* Encrypt random header (last two bytes is high word of crc) */
; 121  :     init_keys(passwd, pkeys, pcrc_32_tab);

  00094	4d 8b c6	 mov	 r8, r14
  00097	48 8b d3	 mov	 rdx, rbx
  0009a	48 8b cd	 mov	 rcx, rbp
  0009d	e8 00 00 00 00	 call	 init_keys
  000a2	4c 8d 7c 24 20	 lea	 r15, QWORD PTR header$[rsp]
  000a7	49 8b f5	 mov	 rsi, r13
  000aa	4d 2b fd	 sub	 r15, r13
  000ad	bd 0a 00 00 00	 mov	 ebp, 10
$LL7@crypthead:

; 122  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)
; 123  :     {
; 124  :         buf[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, header[n], t);

  000b2	48 8b cb	 mov	 rcx, rbx
  000b5	e8 00 00 00 00	 call	 decrypt_byte
  000ba	45 0f b6 04 37	 movzx	 r8d, BYTE PTR [r15+rsi]
  000bf	49 8b d6	 mov	 rdx, r14
  000c2	8b f8		 mov	 edi, eax
  000c4	e8 00 00 00 00	 call	 update_keys
  000c9	44 32 c7	 xor	 r8b, dil
  000cc	44 88 06	 mov	 BYTE PTR [rsi], r8b
  000cf	48 8d 76 01	 lea	 rsi, QWORD PTR [rsi+1]
  000d3	48 83 ed 01	 sub	 rbp, 1
  000d7	75 d9		 jne	 SHORT $LL7@crypthead

; 125  :     }
; 126  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 16) & 0xff, t);

  000d9	48 8b cb	 mov	 rcx, rbx
  000dc	e8 00 00 00 00	 call	 decrypt_byte
  000e1	8b 6c 24 78	 mov	 ebp, DWORD PTR crcForCrypting$[rsp]
  000e5	49 8b d6	 mov	 rdx, r14
  000e8	8b fd		 mov	 edi, ebp
  000ea	8b f0		 mov	 esi, eax
  000ec	c1 ef 10	 shr	 edi, 16
  000ef	44 0f b6 c7	 movzx	 r8d, dil
  000f3	e8 00 00 00 00	 call	 update_keys
  000f8	40 32 fe	 xor	 dil, sil

; 127  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 24) & 0xff, t);

  000fb	48 8b cb	 mov	 rcx, rbx
  000fe	41 88 7d 0a	 mov	 BYTE PTR [r13+10], dil
  00102	e8 00 00 00 00	 call	 decrypt_byte
  00107	c1 ed 18	 shr	 ebp, 24
  0010a	49 8b d6	 mov	 rdx, r14
  0010d	44 8b c5	 mov	 r8d, ebp
  00110	8b f8		 mov	 edi, eax
  00112	e8 00 00 00 00	 call	 update_keys

; 128  :     return n;
; 129  : }

  00117	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0011c	40 32 ef	 xor	 bpl, dil
  0011f	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00124	b8 0c 00 00 00	 mov	 eax, 12
  00129	48 8b 7c 24 68	 mov	 rdi, QWORD PTR [rsp+104]
  0012e	41 88 6d 0b	 mov	 BYTE PTR [r13+11], bpl
  00132	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00137	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0013b	41 5f		 pop	 r15
  0013d	41 5e		 pop	 r14
  0013f	41 5d		 pop	 r13
  00141	c3		 ret	 0
crypthead ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT allocate_new_datablock
_TEXT	SEGMENT
allocate_new_datablock PROC				; COMDAT

; 190  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 191  :     linkedlist_datablock_internal* ldi;
; 192  :     ldi = (linkedlist_datablock_internal*)

  00004	b9 08 10 00 00	 mov	 ecx, 4104		; 00001008H
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 193  :                  ALLOC(sizeof(linkedlist_datablock_internal));
; 194  :     if (ldi!=NULL)

  0000f	48 85 c0	 test	 rax, rax
  00012	74 0d		 je	 SHORT $LN4@allocate_n

; 195  :     {
; 196  :         ldi->next_datablock = NULL ;

  00014	33 c9		 xor	 ecx, ecx

; 197  :         ldi->filled_in_this_block = 0 ;
; 198  :         ldi->avail_in_this_block = SIZEDATA_INDATABLOCK ;

  00016	48 c7 40 08 f0
	0f 00 00	 mov	 QWORD PTR [rax+8], 4080	; 00000ff0H
  0001e	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN4@allocate_n:

; 199  :     }
; 200  :     return ldi;
; 201  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
allocate_new_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT free_datablock
_TEXT	SEGMENT
ldi$ = 48
free_datablock PROC					; COMDAT

; 204  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 205  :     while (ldi!=NULL)

  00004	48 85 c9	 test	 rcx, rcx
  00007	74 1d		 je	 SHORT $LN3@free_datab
  00009	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0000e	66 90		 npad	 2
$LL2@free_datab:

; 206  :     {
; 207  :         linkedlist_datablock_internal* ldinext = ldi->next_datablock;

  00010	48 8b 19	 mov	 rbx, QWORD PTR [rcx]

; 208  :         TRYFREE(ldi);

  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 209  :         ldi = ldinext;

  00019	48 8b cb	 mov	 rcx, rbx
  0001c	48 85 db	 test	 rbx, rbx
  0001f	75 ef		 jne	 SHORT $LL2@free_datab

; 205  :     while (ldi!=NULL)

  00021	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]
$LN3@free_datab:

; 210  :     }
; 211  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
free_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT init_linkedlist
_TEXT	SEGMENT
ll$ = 8
init_linkedlist PROC					; COMDAT

; 215  :     ll->first_block = ll->last_block = NULL;

  00000	33 c0		 xor	 eax, eax
  00002	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00006	48 89 01	 mov	 QWORD PTR [rcx], rax

; 216  : }

  00009	c3		 ret	 0
init_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT free_linkedlist
_TEXT	SEGMENT
ll$ = 48
free_linkedlist PROC					; COMDAT

; 219  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 220  :     free_datablock(ll->first_block);

  00009	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0000c	e8 00 00 00 00	 call	 free_datablock

; 221  :     ll->first_block = ll->last_block = NULL;

  00011	33 c0		 xor	 eax, eax
  00013	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
  00017	48 89 03	 mov	 QWORD PTR [rbx], rax

; 222  : }

  0001a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001e	5b		 pop	 rbx
  0001f	c3		 ret	 0
free_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT add_data_in_datablock
_TEXT	SEGMENT
ll$ = 48
buf$ = 56
len$ = 64
add_data_in_datablock PROC				; COMDAT

; 226  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f8	 mov	 edi, r8d
  00017	48 8b ea	 mov	 rbp, rdx
  0001a	48 8b f1	 mov	 rsi, rcx

; 227  :     linkedlist_datablock_internal* ldi;
; 228  :     const unsigned char* from_copy;
; 229  : 
; 230  :     if (ll==NULL)

  0001d	48 85 c9	 test	 rcx, rcx
  00020	0f 84 9f 00 00
	00		 je	 $LN17@add_data_i

; 231  :         return ZIP_INTERNALERROR;
; 232  : 
; 233  :     if (ll->last_block == NULL)

  00026	48 8b 59 08	 mov	 rbx, QWORD PTR [rcx+8]
  0002a	48 85 db	 test	 rbx, rbx
  0002d	75 18		 jne	 SHORT $LN9@add_data_i

; 234  :     {
; 235  :         ll->first_block = ll->last_block = allocate_new_datablock();

  0002f	e8 00 00 00 00	 call	 allocate_new_datablock
  00034	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
  00038	48 8b d8	 mov	 rbx, rax
  0003b	48 89 06	 mov	 QWORD PTR [rsi], rax

; 236  :         if (ll->first_block == NULL)

  0003e	48 85 c0	 test	 rax, rax
  00041	0f 84 7e 00 00
	00		 je	 $LN17@add_data_i
$LN9@add_data_i:

; 237  :             return ZIP_INTERNALERROR;
; 238  :     }
; 239  : 
; 240  :     ldi = ll->last_block;
; 241  :     from_copy = (unsigned char*)buf;
; 242  : 
; 243  :     while (len>0)

  00047	85 ff		 test	 edi, edi
  00049	74 76		 je	 SHORT $LN3@add_data_i
  0004b	0f 1f 44 00 00	 npad	 5
$LL2@add_data_i:

; 244  :     {
; 245  :         uInt copy_this;
; 246  :         uInt i;
; 247  :         unsigned char* to_copy;
; 248  : 
; 249  :         if (ldi->avail_in_this_block==0)

  00050	83 7b 08 00	 cmp	 DWORD PTR [rbx+8], 0
  00054	75 14		 jne	 SHORT $LN10@add_data_i

; 250  :         {
; 251  :             ldi->next_datablock = allocate_new_datablock();

  00056	e8 00 00 00 00	 call	 allocate_new_datablock
  0005b	48 89 03	 mov	 QWORD PTR [rbx], rax

; 252  :             if (ldi->next_datablock == NULL)

  0005e	48 85 c0	 test	 rax, rax
  00061	74 62		 je	 SHORT $LN17@add_data_i

; 254  :             ldi = ldi->next_datablock ;

  00063	48 8b d8	 mov	 rbx, rax

; 255  :             ll->last_block = ldi;

  00066	48 89 46 08	 mov	 QWORD PTR [rsi+8], rax
$LN10@add_data_i:

; 256  :         }
; 257  : 
; 258  :         if (ldi->avail_in_this_block < len)

  0006a	8b 4b 08	 mov	 ecx, DWORD PTR [rbx+8]

; 259  :             copy_this = (uInt)ldi->avail_in_this_block;
; 260  :         else
; 261  :             copy_this = (uInt)len;
; 262  : 
; 263  :         to_copy = &(ldi->data[ldi->filled_in_this_block]);

  0006d	48 8d 43 14	 lea	 rax, QWORD PTR [rbx+20]
  00071	44 8b 4b 0c	 mov	 r9d, DWORD PTR [rbx+12]
  00075	3b cf		 cmp	 ecx, edi
  00077	44 8b c1	 mov	 r8d, ecx
  0007a	44 0f 43 c7	 cmovae	 r8d, edi
  0007e	49 03 c1	 add	 rax, r9
  00081	33 d2		 xor	 edx, edx

; 264  : 
; 265  :         for (i=0;i<copy_this;i++)

  00083	45 85 c0	 test	 r8d, r8d
  00086	74 21		 je	 SHORT $LN5@add_data_i
  00088	4c 8b cd	 mov	 r9, rbp
  0008b	4c 2b c8	 sub	 r9, rax
  0008e	66 90		 npad	 2
$LL6@add_data_i:

; 266  :             *(to_copy+i)=*(from_copy+i);

  00090	41 0f b6 0c 01	 movzx	 ecx, BYTE PTR [r9+rax]
  00095	ff c2		 inc	 edx
  00097	88 08		 mov	 BYTE PTR [rax], cl
  00099	48 8d 40 01	 lea	 rax, QWORD PTR [rax+1]
  0009d	41 3b d0	 cmp	 edx, r8d
  000a0	72 ee		 jb	 SHORT $LL6@add_data_i
  000a2	44 8b 4b 0c	 mov	 r9d, DWORD PTR [rbx+12]
  000a6	8b 4b 08	 mov	 ecx, DWORD PTR [rbx+8]
$LN5@add_data_i:

; 267  : 
; 268  :         ldi->filled_in_this_block += copy_this;

  000a9	43 8d 04 08	 lea	 eax, DWORD PTR [r8+r9]

; 269  :         ldi->avail_in_this_block -= copy_this;

  000ad	41 2b c8	 sub	 ecx, r8d
  000b0	89 43 0c	 mov	 DWORD PTR [rbx+12], eax

; 270  :         from_copy += copy_this ;

  000b3	41 8b c0	 mov	 eax, r8d
  000b6	48 03 e8	 add	 rbp, rax
  000b9	89 4b 08	 mov	 DWORD PTR [rbx+8], ecx

; 271  :         len -= copy_this;

  000bc	41 2b f8	 sub	 edi, r8d
  000bf	75 8f		 jne	 SHORT $LL2@add_data_i
$LN3@add_data_i:

; 272  :     }
; 273  :     return ZIP_OK;

  000c1	33 c0		 xor	 eax, eax
  000c3	eb 05		 jmp	 SHORT $LN1@add_data_i
$LN17@add_data_i:

; 253  :                 return ZIP_INTERNALERROR;

  000c5	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
$LN1@add_data_i:

; 274  : }

  000ca	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000cf	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000d4	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000d9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000dd	5f		 pop	 rdi
  000de	c3		 ret	 0
add_data_in_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_putValue
_TEXT	SEGMENT
buf$ = 48
pzlib_filefunc_def$ = 48
filestream$ = 56
x$ = 64
nbByte$ = 72
zip64local_putValue PROC				; COMDAT

; 288  : {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	49 63 d9	 movsxd	 rbx, r9d
  00009	4c 8b d1	 mov	 r10, rcx

; 289  :     unsigned char buf[8];
; 290  :     int n;
; 291  :     for (n = 0; n < nbByte; n++)

  0000c	48 8b cb	 mov	 rcx, rbx
  0000f	45 85 c9	 test	 r9d, r9d
  00012	7e 1d		 jle	 SHORT $LN3@zip64local
  00014	33 c0		 xor	 eax, eax
  00016	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL16@zip64local:

; 292  :     {
; 293  :         buf[n] = (unsigned char)(x & 0xff);

  00020	44 88 44 04 30	 mov	 BYTE PTR buf$[rsp+rax], r8b
  00025	48 ff c0	 inc	 rax

; 294  :         x >>= 8;

  00028	49 c1 e8 08	 shr	 r8, 8
  0002c	48 3b c1	 cmp	 rax, rcx
  0002f	7c ef		 jl	 SHORT $LL16@zip64local
$LN3@zip64local:

; 295  :     }
; 296  :     if (x != 0)

  00031	4d 85 c0	 test	 r8, r8
  00034	74 1b		 je	 SHORT $LN6@zip64local

; 297  :       {     /* data overflow - hack for ZIP64 (X Roche) */
; 298  :       for (n = 0; n < nbByte; n++)

  00036	45 85 c9	 test	 r9d, r9d
  00039	7e 16		 jle	 SHORT $LN6@zip64local
  0003b	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00040	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00045	48 8d 7c 24 30	 lea	 rdi, QWORD PTR buf$[rsp]
  0004a	f3 aa		 rep stosb
  0004c	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
$LN6@zip64local:

; 299  :         {
; 300  :           buf[n] = 0xff;
; 301  :         }
; 302  :       }
; 303  : 
; 304  :     if (ZWRITE64(*pzlib_filefunc_def,filestream,buf,nbByte)!=(uLong)nbByte)

  00051	49 8b 4a 38	 mov	 rcx, QWORD PTR [r10+56]
  00055	4c 8d 44 24 30	 lea	 r8, QWORD PTR buf$[rsp]
  0005a	44 8b cb	 mov	 r9d, ebx
  0005d	41 ff 52 10	 call	 QWORD PTR [r10+16]
  00061	2b c3		 sub	 eax, ebx
  00063	f7 d8		 neg	 eax
  00065	1b c0		 sbb	 eax, eax

; 305  :         return ZIP_ERRNO;
; 306  :     else
; 307  :         return ZIP_OK;
; 308  : }

  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5b		 pop	 rbx
  0006c	c3		 ret	 0
zip64local_putValue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_putValue_inmemory
_TEXT	SEGMENT
dest$ = 8
x$ = 16
nbByte$ = 24
zip64local_putValue_inmemory PROC			; COMDAT

; 312  : {

  00000	48 89 7c 24 08	 mov	 QWORD PTR [rsp+8], rdi
  00005	48 8b f9	 mov	 rdi, rcx

; 313  :     unsigned char* buf=(unsigned char*)dest;
; 314  :     int n;
; 315  :     for (n = 0; n < nbByte; n++) {

  00008	49 63 c8	 movsxd	 rcx, r8d
  0000b	45 85 c0	 test	 r8d, r8d
  0000e	7e 1f		 jle	 SHORT $LN3@zip64local
  00010	33 c0		 xor	 eax, eax
  00012	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL14@zip64local:

; 316  :         buf[n] = (unsigned char)(x & 0xff);

  00020	88 14 38	 mov	 BYTE PTR [rax+rdi], dl
  00023	48 ff c0	 inc	 rax

; 317  :         x >>= 8;

  00026	48 c1 ea 08	 shr	 rdx, 8
  0002a	48 3b c1	 cmp	 rax, rcx
  0002d	7c f1		 jl	 SHORT $LL14@zip64local
$LN3@zip64local:

; 318  :     }
; 319  : 
; 320  :     if (x != 0)

  0002f	48 85 d2	 test	 rdx, rdx
  00032	74 0c		 je	 SHORT $LN6@zip64local

; 321  :     {     /* data overflow - hack for ZIP64 */
; 322  :        for (n = 0; n < nbByte; n++)

  00034	45 85 c0	 test	 r8d, r8d
  00037	7e 07		 jle	 SHORT $LN6@zip64local
  00039	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0003e	f3 aa		 rep stosb
$LN6@zip64local:

; 323  :        {
; 324  :           buf[n] = 0xff;
; 325  :        }
; 326  :     }
; 327  : }

  00040	48 8b 7c 24 08	 mov	 rdi, QWORD PTR [rsp+8]
  00045	c3		 ret	 0
zip64local_putValue_inmemory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_TmzDateToDosDate
_TEXT	SEGMENT
ptm$ = 8
zip64local_TmzDateToDosDate PROC			; COMDAT

; 334  :     uLong year = (uLong)ptm->tm_year;

  00000	8b 51 14	 mov	 edx, DWORD PTR [rcx+20]
  00003	4c 8b c1	 mov	 r8, rcx

; 335  :     if (year>=1980)

  00006	81 fa bc 07 00
	00		 cmp	 edx, 1980		; 000007bcH
  0000c	72 08		 jb	 SHORT $LN2@zip64local

; 336  :         year-=1980;

  0000e	81 c2 44 f8 ff
	ff		 add	 edx, -1980		; fffff844H
  00014	eb 08		 jmp	 SHORT $LN4@zip64local
$LN2@zip64local:

; 337  :     else if (year>=80)

  00016	83 fa 50	 cmp	 edx, 80			; 00000050H
  00019	72 03		 jb	 SHORT $LN4@zip64local

; 338  :         year-=80;

  0001b	83 c2 b0	 add	 edx, -80		; ffffffb0H
$LN4@zip64local:

; 339  :     return

  0001e	8b 41 08	 mov	 eax, DWORD PTR [rcx+8]
  00021	c1 e0 06	 shl	 eax, 6
  00024	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00027	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00029	c1 e2 04	 shl	 edx, 4
  0002c	d1 e9		 shr	 ecx, 1
  0002e	c1 e0 05	 shl	 eax, 5
  00031	03 c1		 add	 eax, ecx
  00033	41 8b 48 10	 mov	 ecx, DWORD PTR [r8+16]
  00037	ff c1		 inc	 ecx
  00039	03 d1		 add	 edx, ecx
  0003b	c1 e2 05	 shl	 edx, 5
  0003e	41 03 50 0c	 add	 edx, DWORD PTR [r8+12]
  00042	c1 e2 10	 shl	 edx, 16
  00045	0b c2		 or	 eax, edx

; 340  :       (uLong) (((ptm->tm_mday) + (32 * (ptm->tm_mon+1)) + (512 * year)) << 16) |
; 341  :         ((ptm->tm_sec/2) + (32* ptm->tm_min) + (2048 * (uLong)ptm->tm_hour));
; 342  : }

  00047	c3		 ret	 0
zip64local_TmzDateToDosDate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_getByte
_TEXT	SEGMENT
c$ = 48
pzlib_filefunc_def$ = 48
filestream$ = 56
pi$ = 64
zip64local_getByte PROC					; COMDAT

; 350  : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	49 8b f8	 mov	 rdi, r8

; 351  :     unsigned char c;
; 352  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00015	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00019	4c 8d 44 24 30	 lea	 r8, QWORD PTR c$[rsp]
  0001e	41 b9 01 00 00
	00		 mov	 r9d, 1
  00024	48 8b f2	 mov	 rsi, rdx
  00027	ff 53 08	 call	 QWORD PTR [rbx+8]

; 353  :     if (err==1)

  0002a	83 f8 01	 cmp	 eax, 1
  0002d	75 19		 jne	 SHORT $LN2@zip64local

; 354  :     {
; 355  :         *pi = (int)c;

  0002f	0f b6 44 24 30	 movzx	 eax, BYTE PTR c$[rsp]
  00034	89 07		 mov	 DWORD PTR [rdi], eax

; 356  :         return ZIP_OK;

  00036	33 c0		 xor	 eax, eax

; 361  :             return ZIP_ERRNO;
; 362  :         else
; 363  :             return ZIP_EOF;
; 364  :     }
; 365  : }

  00038	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0003d	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
$LN2@zip64local:

; 357  :     }
; 358  :     else
; 359  :     {
; 360  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  00048	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0004c	48 8b d6	 mov	 rdx, rsi
  0004f	ff 53 30	 call	 QWORD PTR [rbx+48]

; 361  :             return ZIP_ERRNO;
; 362  :         else
; 363  :             return ZIP_EOF;
; 364  :     }
; 365  : }

  00052	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00057	f7 d8		 neg	 eax
  00059	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0005e	1b c0		 sbb	 eax, eax
  00060	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
zip64local_getByte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_getShort
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
filestream$ = 56
pX$ = 64
i$ = 72
zip64local_getShort PROC				; COMDAT

; 374  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b d8	 mov	 rbx, r8

; 375  :     uLong x ;
; 376  :     int i = 0;

  00017	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 377  :     int err;
; 378  : 
; 379  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0001f	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00024	48 8b fa	 mov	 rdi, rdx
  00027	48 8b f1	 mov	 rsi, rcx
  0002a	e8 00 00 00 00	 call	 zip64local_getByte

; 380  :     x = (uLong)i;

  0002f	8b 6c 24 48	 mov	 ebp, DWORD PTR i$[rsp]
  00033	44 8b c8	 mov	 r9d, eax

; 381  : 
; 382  :     if (err==ZIP_OK)

  00036	85 c0		 test	 eax, eax
  00038	75 24		 jne	 SHORT $LN3@zip64local

; 383  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003a	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0003f	48 8b d7	 mov	 rdx, rdi
  00042	48 8b ce	 mov	 rcx, rsi
  00045	e8 00 00 00 00	 call	 zip64local_getByte
  0004a	44 8b c8	 mov	 r9d, eax

; 385  : 
; 386  :     if (err==ZIP_OK)

  0004d	85 c0		 test	 eax, eax
  0004f	75 0d		 jne	 SHORT $LN3@zip64local

; 384  :     x += ((uLong)i)<<8;

  00051	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  00055	c1 e0 08	 shl	 eax, 8
  00058	03 c5		 add	 eax, ebp

; 387  :         *pX = x;
; 388  :     else
; 389  :         *pX = 0;
; 390  :     return err;

  0005a	89 03		 mov	 DWORD PTR [rbx], eax
  0005c	eb 06		 jmp	 SHORT $LN6@zip64local
$LN3@zip64local:
  0005e	c7 03 00 00 00
	00		 mov	 DWORD PTR [rbx], 0
$LN6@zip64local:

; 391  : }

  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	41 8b c1	 mov	 eax, r9d
  0006c	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00071	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00076	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007a	5f		 pop	 rdi
  0007b	c3		 ret	 0
zip64local_getShort ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_getLong
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
filestream$ = 56
pX$ = 64
i$ = 72
zip64local_getLong PROC					; COMDAT

; 396  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00015	4d 8b f0	 mov	 r14, r8

; 397  :     uLong x ;
; 398  :     int i = 0;

  00018	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 399  :     int err;
; 400  : 
; 401  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00020	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00025	48 8b fa	 mov	 rdi, rdx
  00028	48 8b f1	 mov	 rsi, rcx
  0002b	e8 00 00 00 00	 call	 zip64local_getByte

; 402  :     x = (uLong)i;

  00030	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00035	41 8b da	 mov	 ebx, r10d
  00038	44 8b c8	 mov	 r9d, eax

; 403  : 
; 404  :     if (err==ZIP_OK)

  0003b	85 c0		 test	 eax, eax
  0003d	75 18		 jne	 SHORT $LN2@zip64local

; 405  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003f	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00044	48 8b d7	 mov	 rdx, rdi
  00047	48 8b ce	 mov	 rcx, rsi
  0004a	e8 00 00 00 00	 call	 zip64local_getByte
  0004f	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00054	44 8b c8	 mov	 r9d, eax
$LN2@zip64local:

; 406  :     x += ((uLong)i)<<8;

  00057	41 8b c2	 mov	 eax, r10d
  0005a	c1 e0 08	 shl	 eax, 8
  0005d	03 d8		 add	 ebx, eax

; 407  : 
; 408  :     if (err==ZIP_OK)

  0005f	45 85 c9	 test	 r9d, r9d
  00062	75 18		 jne	 SHORT $LN3@zip64local

; 409  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00064	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00069	48 8b d7	 mov	 rdx, rdi
  0006c	48 8b ce	 mov	 rcx, rsi
  0006f	e8 00 00 00 00	 call	 zip64local_getByte
  00074	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00079	44 8b c8	 mov	 r9d, eax
$LN3@zip64local:

; 410  :     x += ((uLong)i)<<16;

  0007c	41 c1 e2 10	 shl	 r10d, 16
  00080	41 03 da	 add	 ebx, r10d

; 411  : 
; 412  :     if (err==ZIP_OK)

  00083	45 85 c9	 test	 r9d, r9d
  00086	75 25		 jne	 SHORT $LN5@zip64local

; 413  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00088	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0008d	48 8b d7	 mov	 rdx, rdi
  00090	48 8b ce	 mov	 rcx, rsi
  00093	e8 00 00 00 00	 call	 zip64local_getByte
  00098	44 8b c8	 mov	 r9d, eax

; 415  : 
; 416  :     if (err==ZIP_OK)

  0009b	85 c0		 test	 eax, eax
  0009d	75 0e		 jne	 SHORT $LN5@zip64local

; 414  :     x += ((uLong)i)<<24;

  0009f	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  000a3	c1 e0 18	 shl	 eax, 24
  000a6	03 c3		 add	 eax, ebx

; 417  :         *pX = x;
; 418  :     else
; 419  :         *pX = 0;
; 420  :     return err;

  000a8	41 89 06	 mov	 DWORD PTR [r14], eax
  000ab	eb 07		 jmp	 SHORT $LN8@zip64local
$LN5@zip64local:
  000ad	41 c7 06 00 00
	00 00		 mov	 DWORD PTR [r14], 0
$LN8@zip64local:

; 421  : }

  000b4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b9	41 8b c1	 mov	 eax, r9d
  000bc	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c1	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000c6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ca	41 5e		 pop	 r14
  000cc	c3		 ret	 0
zip64local_getLong ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_getLong64
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
filestream$ = 56
pX$ = 64
i$ = 72
zip64local_getLong64 PROC				; COMDAT

; 427  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00015	4d 8b f0	 mov	 r14, r8

; 428  :   ZPOS64_T x;
; 429  :   int i = 0;

  00018	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 430  :   int err;
; 431  : 
; 432  :   err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00020	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00025	48 8b fa	 mov	 rdi, rdx
  00028	48 8b f1	 mov	 rsi, rcx
  0002b	e8 00 00 00 00	 call	 zip64local_getByte

; 433  :   x = (ZPOS64_T)i;

  00030	4c 63 54 24 48	 movsxd	 r10, DWORD PTR i$[rsp]
  00035	44 8b c8	 mov	 r9d, eax
  00038	49 8b da	 mov	 rbx, r10

; 434  : 
; 435  :   if (err==ZIP_OK)

  0003b	85 c0		 test	 eax, eax
  0003d	75 18		 jne	 SHORT $LN2@zip64local

; 436  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003f	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00044	48 8b d7	 mov	 rdx, rdi
  00047	48 8b ce	 mov	 rcx, rsi
  0004a	e8 00 00 00 00	 call	 zip64local_getByte
  0004f	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00054	44 8b c8	 mov	 r9d, eax
$LN2@zip64local:

; 437  :   x += ((ZPOS64_T)i)<<8;

  00057	49 63 c2	 movsxd	 rax, r10d
  0005a	48 c1 e0 08	 shl	 rax, 8
  0005e	48 03 d8	 add	 rbx, rax

; 438  : 
; 439  :   if (err==ZIP_OK)

  00061	45 85 c9	 test	 r9d, r9d
  00064	75 18		 jne	 SHORT $LN3@zip64local

; 440  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00066	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0006b	48 8b d7	 mov	 rdx, rdi
  0006e	48 8b ce	 mov	 rcx, rsi
  00071	e8 00 00 00 00	 call	 zip64local_getByte
  00076	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  0007b	44 8b c8	 mov	 r9d, eax
$LN3@zip64local:

; 441  :   x += ((ZPOS64_T)i)<<16;

  0007e	49 63 c2	 movsxd	 rax, r10d
  00081	48 c1 e0 10	 shl	 rax, 16
  00085	48 03 d8	 add	 rbx, rax

; 442  : 
; 443  :   if (err==ZIP_OK)

  00088	45 85 c9	 test	 r9d, r9d
  0008b	75 18		 jne	 SHORT $LN4@zip64local

; 444  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0008d	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00092	48 8b d7	 mov	 rdx, rdi
  00095	48 8b ce	 mov	 rcx, rsi
  00098	e8 00 00 00 00	 call	 zip64local_getByte
  0009d	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  000a2	44 8b c8	 mov	 r9d, eax
$LN4@zip64local:

; 445  :   x += ((ZPOS64_T)i)<<24;

  000a5	49 63 c2	 movsxd	 rax, r10d
  000a8	48 c1 e0 18	 shl	 rax, 24
  000ac	48 03 d8	 add	 rbx, rax

; 446  : 
; 447  :   if (err==ZIP_OK)

  000af	45 85 c9	 test	 r9d, r9d
  000b2	75 18		 jne	 SHORT $LN5@zip64local

; 448  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000b4	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  000b9	48 8b d7	 mov	 rdx, rdi
  000bc	48 8b ce	 mov	 rcx, rsi
  000bf	e8 00 00 00 00	 call	 zip64local_getByte
  000c4	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  000c9	44 8b c8	 mov	 r9d, eax
$LN5@zip64local:

; 449  :   x += ((ZPOS64_T)i)<<32;

  000cc	49 63 c2	 movsxd	 rax, r10d
  000cf	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  000d3	48 03 d8	 add	 rbx, rax

; 450  : 
; 451  :   if (err==ZIP_OK)

  000d6	45 85 c9	 test	 r9d, r9d
  000d9	75 18		 jne	 SHORT $LN6@zip64local

; 452  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000db	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  000e0	48 8b d7	 mov	 rdx, rdi
  000e3	48 8b ce	 mov	 rcx, rsi
  000e6	e8 00 00 00 00	 call	 zip64local_getByte
  000eb	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  000f0	44 8b c8	 mov	 r9d, eax
$LN6@zip64local:

; 453  :   x += ((ZPOS64_T)i)<<40;

  000f3	49 63 c2	 movsxd	 rax, r10d
  000f6	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  000fa	48 03 d8	 add	 rbx, rax

; 454  : 
; 455  :   if (err==ZIP_OK)

  000fd	45 85 c9	 test	 r9d, r9d
  00100	75 18		 jne	 SHORT $LN7@zip64local

; 456  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00102	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00107	48 8b d7	 mov	 rdx, rdi
  0010a	48 8b ce	 mov	 rcx, rsi
  0010d	e8 00 00 00 00	 call	 zip64local_getByte
  00112	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00117	44 8b c8	 mov	 r9d, eax
$LN7@zip64local:

; 457  :   x += ((ZPOS64_T)i)<<48;

  0011a	49 63 c2	 movsxd	 rax, r10d
  0011d	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  00121	48 03 d8	 add	 rbx, rax

; 458  : 
; 459  :   if (err==ZIP_OK)

  00124	45 85 c9	 test	 r9d, r9d
  00127	75 28		 jne	 SHORT $LN9@zip64local

; 460  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00129	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0012e	48 8b d7	 mov	 rdx, rdi
  00131	48 8b ce	 mov	 rcx, rsi
  00134	e8 00 00 00 00	 call	 zip64local_getByte
  00139	44 8b c8	 mov	 r9d, eax

; 462  : 
; 463  :   if (err==ZIP_OK)

  0013c	85 c0		 test	 eax, eax
  0013e	75 11		 jne	 SHORT $LN9@zip64local

; 461  :   x += ((ZPOS64_T)i)<<56;

  00140	48 63 44 24 48	 movsxd	 rax, DWORD PTR i$[rsp]
  00145	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  00149	48 03 c3	 add	 rax, rbx

; 464  :     *pX = x;
; 465  :   else
; 466  :     *pX = 0;
; 467  : 
; 468  :   return err;

  0014c	49 89 06	 mov	 QWORD PTR [r14], rax
  0014f	eb 07		 jmp	 SHORT $LN12@zip64local
$LN9@zip64local:
  00151	49 c7 06 00 00
	00 00		 mov	 QWORD PTR [r14], 0
$LN12@zip64local:

; 469  : }

  00158	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0015d	41 8b c1	 mov	 eax, r9d
  00160	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00165	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  0016a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0016e	41 5e		 pop	 r14
  00170	c3		 ret	 0
zip64local_getLong64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_SearchCentralDir
_TEXT	SEGMENT
pzlib_filefunc_def$ = 80
filestream$ = 88
uSizeFile$1$ = 96
zip64local_SearchCentralDir PROC			; COMDAT

; 481  : {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	41 55		 push	 r13
  00009	41 56		 push	 r14
  0000b	41 57		 push	 r15
  0000d	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 482  :   unsigned char* buf;
; 483  :   ZPOS64_T uSizeFile;
; 484  :   ZPOS64_T uBackRead;
; 485  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 486  :   ZPOS64_T uPosFound=0;

  00011	45 33 f6	 xor	 r14d, r14d

; 487  : 
; 488  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00014	45 33 c0	 xor	 r8d, r8d
  00017	4c 8b ea	 mov	 r13, rdx
  0001a	4c 8b f9	 mov	 r15, rcx
  0001d	be ff ff 00 00	 mov	 esi, 65535		; 0000ffffH
  00022	45 8d 4e 02	 lea	 r9d, QWORD PTR [r14+2]
  00026	e8 00 00 00 00	 call	 call_zseek64
  0002b	85 c0		 test	 eax, eax
  0002d	0f 85 14 01 00
	00		 jne	 $LN32@zip64local

; 489  :     return 0;
; 490  : 
; 491  : 
; 492  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00033	49 8b d5	 mov	 rdx, r13
  00036	49 8b cf	 mov	 rcx, r15
  00039	e8 00 00 00 00	 call	 call_ztell64

; 493  : 
; 494  :   if (uMaxBack>uSizeFile)

  0003e	48 3b c6	 cmp	 rax, rsi
  00041	48 89 44 24 60	 mov	 QWORD PTR uSizeFile$1$[rsp], rax

; 495  :     uMaxBack = uSizeFile;
; 496  : 
; 497  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00046	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  0004b	48 8b f8	 mov	 rdi, rax
  0004e	48 0f 42 f0	 cmovb	 rsi, rax
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00058	48 8b d8	 mov	 rbx, rax

; 498  :   if (buf==NULL)

  0005b	48 85 c0	 test	 rax, rax
  0005e	0f 84 e3 00 00
	00		 je	 $LN32@zip64local

; 499  :     return 0;
; 500  : 
; 501  :   uBackRead = 4;

  00064	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  00069	bd 04 00 00 00	 mov	 ebp, 4

; 502  :   while (uBackRead<uMaxBack)

  0006e	48 3b f5	 cmp	 rsi, rbp
  00071	0f 86 ad 00 00
	00		 jbe	 $LN34@zip64local
  00077	4c 89 64 24 58	 mov	 QWORD PTR [rsp+88], r12
  0007c	0f 1f 40 00	 npad	 4
$LL2@zip64local:

; 503  :   {
; 504  :     uLong uReadSize;
; 505  :     ZPOS64_T uReadPos ;
; 506  :     int i;
; 507  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  00080	48 8d 8d 00 04
	00 00		 lea	 rcx, QWORD PTR [rbp+1024]

; 508  :       uBackRead = uMaxBack;
; 509  :     else
; 510  :       uBackRead+=BUFREADCOMMENT;
; 511  :     uReadPos = uSizeFile-uBackRead ;

  00087	4c 8b e7	 mov	 r12, rdi
  0008a	48 3b ce	 cmp	 rcx, rsi

; 512  : 
; 513  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  0008d	b8 04 04 00 00	 mov	 eax, 1028		; 00000404H
  00092	48 8b ee	 mov	 rbp, rsi

; 514  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 515  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00095	49 8b d5	 mov	 rdx, r13
  00098	48 0f 46 e9	 cmovbe	 rbp, rcx
  0009c	49 8b cf	 mov	 rcx, r15
  0009f	4c 2b e5	 sub	 r12, rbp
  000a2	41 2b fc	 sub	 edi, r12d
  000a5	4d 8b c4	 mov	 r8, r12
  000a8	48 3b e8	 cmp	 rbp, rax
  000ab	0f 47 f8	 cmova	 edi, eax
  000ae	45 33 c9	 xor	 r9d, r9d
  000b1	e8 00 00 00 00	 call	 call_zseek64
  000b6	85 c0		 test	 eax, eax
  000b8	75 65		 jne	 SHORT $LN35@zip64local

; 516  :       break;
; 517  : 
; 518  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  000ba	49 8b 4f 38	 mov	 rcx, QWORD PTR [r15+56]
  000be	44 8b cf	 mov	 r9d, edi
  000c1	4c 8b c3	 mov	 r8, rbx
  000c4	49 8b d5	 mov	 rdx, r13
  000c7	41 ff 57 08	 call	 QWORD PTR [r15+8]
  000cb	3b c7		 cmp	 eax, edi
  000cd	75 50		 jne	 SHORT $LN35@zip64local

; 519  :       break;
; 520  : 
; 521  :     for (i=(int)uReadSize-3; (i--)>0;)

  000cf	8d 4f fd	 lea	 ecx, DWORD PTR [rdi-3]
  000d2	48 63 c1	 movsxd	 rax, ecx
  000d5	85 c9		 test	 ecx, ecx
  000d7	7e 38		 jle	 SHORT $LN33@zip64local
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@zip64local:
  000e0	48 8b d0	 mov	 rdx, rax
  000e3	ff c9		 dec	 ecx
  000e5	48 ff c8	 dec	 rax

; 522  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 523  :         ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  000e8	80 3c 18 50	 cmp	 BYTE PTR [rax+rbx], 80	; 00000050H
  000ec	75 14		 jne	 SHORT $LN14@zip64local
  000ee	80 3c 1a 4b	 cmp	 BYTE PTR [rdx+rbx], 75	; 0000004bH
  000f2	75 0e		 jne	 SHORT $LN14@zip64local
  000f4	80 7c 18 02 05	 cmp	 BYTE PTR [rax+rbx+2], 5
  000f9	75 07		 jne	 SHORT $LN14@zip64local
  000fb	80 7c 18 03 06	 cmp	 BYTE PTR [rax+rbx+3], 6
  00100	74 07		 je	 SHORT $LN22@zip64local
$LN14@zip64local:

; 519  :       break;
; 520  : 
; 521  :     for (i=(int)uReadSize-3; (i--)>0;)

  00102	48 85 c0	 test	 rax, rax
  00105	7f d9		 jg	 SHORT $LL4@zip64local
  00107	eb 08		 jmp	 SHORT $LN33@zip64local
$LN22@zip64local:

; 524  :       {
; 525  :         uPosFound = uReadPos+i;

  00109	4c 63 f1	 movsxd	 r14, ecx
  0010c	4d 03 f4	 add	 r14, r12

; 526  :         break;
; 527  :       }
; 528  : 
; 529  :       if (uPosFound!=0)

  0010f	75 0e		 jne	 SHORT $LN35@zip64local
$LN33@zip64local:

; 502  :   while (uBackRead<uMaxBack)

  00111	48 8b 7c 24 60	 mov	 rdi, QWORD PTR uSizeFile$1$[rsp]
  00116	48 3b ee	 cmp	 rbp, rsi
  00119	0f 82 61 ff ff
	ff		 jb	 $LL2@zip64local
$LN35@zip64local:
  0011f	4c 8b 64 24 58	 mov	 r12, QWORD PTR [rsp+88]
$LN34@zip64local:

; 530  :         break;
; 531  :   }
; 532  :   TRYFREE(buf);

  00124	48 8b cb	 mov	 rcx, rbx
  00127	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 533  :   return uPosFound;

  0012d	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00132	49 8b c6	 mov	 rax, r14

; 534  : }

  00135	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  0013a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0013e	41 5f		 pop	 r15
  00140	41 5e		 pop	 r14
  00142	41 5d		 pop	 r13
  00144	5f		 pop	 rdi
  00145	5e		 pop	 rsi
  00146	c3		 ret	 0
$LN32@zip64local:
  00147	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  0014c	33 c0		 xor	 eax, eax
  0014e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00152	41 5f		 pop	 r15
  00154	41 5e		 pop	 r14
  00156	41 5d		 pop	 r13
  00158	5f		 pop	 rdi
  00159	5e		 pop	 rsi
  0015a	c3		 ret	 0
zip64local_SearchCentralDir ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64local_SearchCentralDir64
_TEXT	SEGMENT
pzlib_filefunc_def$ = 96
filestream$ = 104
uSizeFile$1$ = 112
uL$ = 112
relativeOffset$ = 120
zip64local_SearchCentralDir64 PROC			; COMDAT

; 543  : {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 56		 push	 r14
  00007	41 57		 push	 r15
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 544  :   unsigned char* buf;
; 545  :   ZPOS64_T uSizeFile;
; 546  :   ZPOS64_T uBackRead;
; 547  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 548  :   ZPOS64_T uPosFound=0;

  0000d	45 33 f6	 xor	 r14d, r14d

; 549  :   uLong uL;
; 550  :   ZPOS64_T relativeOffset;
; 551  : 
; 552  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00010	45 33 c0	 xor	 r8d, r8d
  00013	48 8b ea	 mov	 rbp, rdx
  00016	48 8b f1	 mov	 rsi, rcx
  00019	41 bf ff ff 00
	00		 mov	 r15d, 65535		; 0000ffffH
  0001f	45 8d 4e 02	 lea	 r9d, QWORD PTR [r14+2]
  00023	e8 00 00 00 00	 call	 call_zseek64
  00028	85 c0		 test	 eax, eax
  0002a	0f 85 cd 01 00
	00		 jne	 $LN43@zip64local

; 553  :     return 0;
; 554  : 
; 555  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00030	48 8b d5	 mov	 rdx, rbp
  00033	48 8b ce	 mov	 rcx, rsi
  00036	e8 00 00 00 00	 call	 call_ztell64

; 556  : 
; 557  :   if (uMaxBack>uSizeFile)

  0003b	49 3b c7	 cmp	 rax, r15
  0003e	48 89 44 24 70	 mov	 QWORD PTR uSizeFile$1$[rsp], rax

; 558  :     uMaxBack = uSizeFile;
; 559  : 
; 560  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00043	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  00048	48 8b f8	 mov	 rdi, rax
  0004b	4c 0f 42 f8	 cmovb	 r15, rax
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00055	48 8b d8	 mov	 rbx, rax

; 561  :   if (buf==NULL)

  00058	48 85 c0	 test	 rax, rax
  0005b	0f 84 9c 01 00
	00		 je	 $LN43@zip64local

; 562  :     return 0;
; 563  : 
; 564  :   uBackRead = 4;

  00061	4c 89 6c 24 20	 mov	 QWORD PTR [rsp+32], r13
  00066	41 bd 04 00 00
	00		 mov	 r13d, 4

; 565  :   while (uBackRead<uMaxBack)

  0006c	4d 3b fd	 cmp	 r15, r13
  0006f	0f 86 af 00 00
	00		 jbe	 $LN45@zip64local
  00075	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL2@zip64local:

; 566  :   {
; 567  :     uLong uReadSize;
; 568  :     ZPOS64_T uReadPos;
; 569  :     int i;
; 570  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  00080	49 8d 8d 00 04
	00 00		 lea	 rcx, QWORD PTR [r13+1024]

; 571  :       uBackRead = uMaxBack;
; 572  :     else
; 573  :       uBackRead+=BUFREADCOMMENT;
; 574  :     uReadPos = uSizeFile-uBackRead ;

  00087	4c 8b e7	 mov	 r12, rdi
  0008a	49 3b cf	 cmp	 rcx, r15

; 575  : 
; 576  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  0008d	b8 04 04 00 00	 mov	 eax, 1028		; 00000404H
  00092	4d 8b ef	 mov	 r13, r15

; 577  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 578  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00095	48 8b d5	 mov	 rdx, rbp
  00098	4c 0f 46 e9	 cmovbe	 r13, rcx
  0009c	48 8b ce	 mov	 rcx, rsi
  0009f	4d 2b e5	 sub	 r12, r13
  000a2	41 2b fc	 sub	 edi, r12d
  000a5	4d 8b c4	 mov	 r8, r12
  000a8	4c 3b e8	 cmp	 r13, rax
  000ab	0f 47 f8	 cmova	 edi, eax
  000ae	45 33 c9	 xor	 r9d, r9d
  000b1	e8 00 00 00 00	 call	 call_zseek64
  000b6	85 c0		 test	 eax, eax
  000b8	75 65		 jne	 SHORT $LN46@zip64local

; 579  :       break;
; 580  : 
; 581  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  000ba	48 8b 4e 38	 mov	 rcx, QWORD PTR [rsi+56]
  000be	44 8b cf	 mov	 r9d, edi
  000c1	4c 8b c3	 mov	 r8, rbx
  000c4	48 8b d5	 mov	 rdx, rbp
  000c7	ff 56 08	 call	 QWORD PTR [rsi+8]
  000ca	3b c7		 cmp	 eax, edi
  000cc	75 51		 jne	 SHORT $LN46@zip64local

; 582  :       break;
; 583  : 
; 584  :     for (i=(int)uReadSize-3; (i--)>0;)

  000ce	8d 4f fd	 lea	 ecx, DWORD PTR [rdi-3]
  000d1	48 63 c1	 movsxd	 rax, ecx
  000d4	85 c9		 test	 ecx, ecx
  000d6	7e 39		 jle	 SHORT $LN44@zip64local
  000d8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@zip64local:
  000e0	48 8b d0	 mov	 rdx, rax
  000e3	ff c9		 dec	 ecx
  000e5	48 ff c8	 dec	 rax

; 585  :     {
; 586  :       // Signature "0x07064b50" Zip64 end of central directory locater
; 587  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) && ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  000e8	80 3c 18 50	 cmp	 BYTE PTR [rax+rbx], 80	; 00000050H
  000ec	75 14		 jne	 SHORT $LN14@zip64local
  000ee	80 3c 1a 4b	 cmp	 BYTE PTR [rdx+rbx], 75	; 0000004bH
  000f2	75 0e		 jne	 SHORT $LN14@zip64local
  000f4	80 7c 18 02 06	 cmp	 BYTE PTR [rax+rbx+2], 6
  000f9	75 07		 jne	 SHORT $LN14@zip64local
  000fb	80 7c 18 03 07	 cmp	 BYTE PTR [rax+rbx+3], 7
  00100	74 07		 je	 SHORT $LN33@zip64local
$LN14@zip64local:

; 582  :       break;
; 583  : 
; 584  :     for (i=(int)uReadSize-3; (i--)>0;)

  00102	48 85 c0	 test	 rax, rax
  00105	7f d9		 jg	 SHORT $LL4@zip64local
  00107	eb 08		 jmp	 SHORT $LN44@zip64local
$LN33@zip64local:

; 588  :       {
; 589  :         uPosFound = uReadPos+i;

  00109	4c 63 f1	 movsxd	 r14, ecx
  0010c	4d 03 f4	 add	 r14, r12

; 590  :         break;
; 591  :       }
; 592  :     }
; 593  : 
; 594  :       if (uPosFound!=0)

  0010f	75 0e		 jne	 SHORT $LN46@zip64local
$LN44@zip64local:

; 565  :   while (uBackRead<uMaxBack)

  00111	48 8b 7c 24 70	 mov	 rdi, QWORD PTR uSizeFile$1$[rsp]
  00116	4d 3b ef	 cmp	 r13, r15
  00119	0f 82 61 ff ff
	ff		 jb	 $LL2@zip64local
$LN46@zip64local:
  0011f	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
$LN45@zip64local:

; 595  :         break;
; 596  :   }
; 597  : 
; 598  :   TRYFREE(buf);

  00124	48 8b cb	 mov	 rcx, rbx
  00127	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0012d	4c 8b 6c 24 20	 mov	 r13, QWORD PTR [rsp+32]

; 599  :   if (uPosFound == 0)

  00132	4d 85 f6	 test	 r14, r14
  00135	0f 84 c2 00 00
	00		 je	 $LN43@zip64local

; 600  :     return 0;
; 601  : 
; 602  :   /* Zip64 end of central directory locator */
; 603  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0013b	45 33 c9	 xor	 r9d, r9d
  0013e	4d 8b c6	 mov	 r8, r14
  00141	48 8b d5	 mov	 rdx, rbp
  00144	48 8b ce	 mov	 rcx, rsi
  00147	e8 00 00 00 00	 call	 call_zseek64
  0014c	85 c0		 test	 eax, eax
  0014e	0f 85 a9 00 00
	00		 jne	 $LN43@zip64local

; 604  :     return 0;
; 605  : 
; 606  :   /* the signature, already checked */
; 607  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  00154	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  00159	48 8b d5	 mov	 rdx, rbp
  0015c	48 8b ce	 mov	 rcx, rsi
  0015f	e8 00 00 00 00	 call	 zip64local_getLong
  00164	85 c0		 test	 eax, eax
  00166	0f 85 91 00 00
	00		 jne	 $LN43@zip64local

; 608  :     return 0;
; 609  : 
; 610  :   /* number of the disk with the start of the zip64 end of  central directory */
; 611  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  0016c	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  00171	48 8b d5	 mov	 rdx, rbp
  00174	48 8b ce	 mov	 rcx, rsi
  00177	e8 00 00 00 00	 call	 zip64local_getLong
  0017c	85 c0		 test	 eax, eax
  0017e	75 7d		 jne	 SHORT $LN43@zip64local

; 612  :     return 0;
; 613  :   if (uL != 0)

  00180	39 44 24 70	 cmp	 DWORD PTR uL$[rsp], eax
  00184	75 77		 jne	 SHORT $LN43@zip64local

; 614  :     return 0;
; 615  : 
; 616  :   /* relative offset of the zip64 end of central directory record */
; 617  :   if (zip64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=ZIP_OK)

  00186	4c 8d 44 24 78	 lea	 r8, QWORD PTR relativeOffset$[rsp]
  0018b	48 8b d5	 mov	 rdx, rbp
  0018e	48 8b ce	 mov	 rcx, rsi
  00191	e8 00 00 00 00	 call	 zip64local_getLong64
  00196	85 c0		 test	 eax, eax
  00198	75 63		 jne	 SHORT $LN43@zip64local

; 618  :     return 0;
; 619  : 
; 620  :   /* total number of disks */
; 621  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  0019a	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  0019f	48 8b d5	 mov	 rdx, rbp
  001a2	48 8b ce	 mov	 rcx, rsi
  001a5	e8 00 00 00 00	 call	 zip64local_getLong
  001aa	85 c0		 test	 eax, eax
  001ac	75 4f		 jne	 SHORT $LN43@zip64local

; 622  :     return 0;
; 623  :   if (uL != 1)

  001ae	83 7c 24 70 01	 cmp	 DWORD PTR uL$[rsp], 1
  001b3	75 48		 jne	 SHORT $LN43@zip64local

; 624  :     return 0;
; 625  : 
; 626  :   /* Goto Zip64 end of central directory record */
; 627  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  001b5	48 8b 5c 24 78	 mov	 rbx, QWORD PTR relativeOffset$[rsp]
  001ba	45 33 c9	 xor	 r9d, r9d
  001bd	4c 8b c3	 mov	 r8, rbx
  001c0	48 8b d5	 mov	 rdx, rbp
  001c3	48 8b ce	 mov	 rcx, rsi
  001c6	e8 00 00 00 00	 call	 call_zseek64
  001cb	85 c0		 test	 eax, eax
  001cd	75 2e		 jne	 SHORT $LN43@zip64local

; 628  :     return 0;
; 629  : 
; 630  :   /* the signature */
; 631  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  001cf	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  001d4	48 8b d5	 mov	 rdx, rbp
  001d7	48 8b ce	 mov	 rcx, rsi
  001da	e8 00 00 00 00	 call	 zip64local_getLong
  001df	85 c0		 test	 eax, eax
  001e1	75 1a		 jne	 SHORT $LN43@zip64local

; 632  :     return 0;
; 633  : 
; 634  :   if (uL != 0x06064b50) // signature of 'Zip64 end of central directory'

  001e3	81 7c 24 70 50
	4b 06 06	 cmp	 DWORD PTR uL$[rsp], 101075792 ; 06064b50H
  001eb	75 10		 jne	 SHORT $LN43@zip64local

; 636  : 
; 637  :   return relativeOffset;

  001ed	48 8b c3	 mov	 rax, rbx

; 638  : }

  001f0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  001f4	41 5f		 pop	 r15
  001f6	41 5e		 pop	 r14
  001f8	5f		 pop	 rdi
  001f9	5e		 pop	 rsi
  001fa	5d		 pop	 rbp
  001fb	5b		 pop	 rbx
  001fc	c3		 ret	 0
$LN43@zip64local:

; 635  :     return 0;

  001fd	33 c0		 xor	 eax, eax

; 638  : }

  001ff	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00203	41 5f		 pop	 r15
  00205	41 5e		 pop	 r14
  00207	5f		 pop	 rdi
  00208	5e		 pop	 rsi
  00209	5d		 pop	 rbp
  0020a	5b		 pop	 rbx
  0020b	c3		 ret	 0
zip64local_SearchCentralDir64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT LoadCentralDirectoryRecord
_TEXT	SEGMENT
number_entry$ = 32
tv466 = 128
size_comment$ = 128
size_central_dir$ = 128
number_entry_CD$ = 128
VersionNeeded$ = 128
VersionMadeBy$ = 128
sizeEndOfCentralDirectory$1 = 128
uL$ = 128
pziinit$ = 128
offset_central_dir$ = 136
number_disk_with_CD$ = 136
number_disk$ = 144
number_entry_CD$1$ = 152
LoadCentralDirectoryRecord PROC				; COMDAT

; 641  : {

$LN59:
  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 54		 push	 r12
  00007	41 55		 push	 r13
  00009	41 56		 push	 r14
  0000b	41 57		 push	 r15
  0000d	48 8b ec	 mov	 rbp, rsp
  00010	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 642  :   int err=ZIP_OK;
; 643  :   ZPOS64_T byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
; 644  : 
; 645  :   ZPOS64_T size_central_dir;     /* size of the central directory  */
; 646  :   ZPOS64_T offset_central_dir;   /* offset of start of central directory */
; 647  :   ZPOS64_T central_pos;
; 648  :   uLong uL;
; 649  : 
; 650  :   uLong number_disk;          /* number of the current dist, used for
; 651  :                               spaning ZIP, unsupported, always 0*/
; 652  :   uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 653  :                               for spaning ZIP, unsupported, always 0*/
; 654  :   ZPOS64_T number_entry;
; 655  :   ZPOS64_T number_entry_CD;      /* total number of entries in
; 656  :                                 the central dir
; 657  :                                 (same than number_entry on nospan) */
; 658  :   uLong VersionMadeBy;
; 659  :   uLong VersionNeeded;
; 660  :   uLong size_comment;
; 661  : 
; 662  :   int hasZIP64Record = 0;
; 663  : 
; 664  :   // check first if we find a ZIP64 record
; 665  :   central_pos = zip64local_SearchCentralDir64(&pziinit->z_filefunc,pziinit->filestream);

  00014	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00018	48 8b d9	 mov	 rbx, rcx
  0001b	33 f6		 xor	 esi, esi
  0001d	e8 00 00 00 00	 call	 zip64local_SearchCentralDir64

; 666  :   if(central_pos > 0)

  00022	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00026	4c 8b e0	 mov	 r12, rax
  00029	48 8b cb	 mov	 rcx, rbx
  0002c	48 85 c0	 test	 rax, rax
  0002f	0f 85 1e 01 00
	00		 jne	 $LN55@LoadCentra

; 667  :   {
; 668  :     hasZIP64Record = 1;
; 669  :   }
; 670  :   else if(central_pos == 0)
; 671  :   {
; 672  :     central_pos = zip64local_SearchCentralDir(&pziinit->z_filefunc,pziinit->filestream);

  00035	e8 00 00 00 00	 call	 zip64local_SearchCentralDir

; 733  :   }
; 734  :   else
; 735  :   {
; 736  :     // Read End of central Directory info
; 737  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0003a	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0003e	45 33 c9	 xor	 r9d, r9d
  00041	4c 8b c0	 mov	 r8, rax
  00044	48 8b cb	 mov	 rcx, rbx
  00047	4c 8b e0	 mov	 r12, rax
  0004a	e8 00 00 00 00	 call	 call_zseek64

; 738  :       err=ZIP_ERRNO;
; 739  : 
; 740  :     /* the signature, already checked */
; 741  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  0004f	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00053	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  00057	85 c0		 test	 eax, eax
  00059	8b fe		 mov	 edi, esi
  0005b	41 bf ff ff ff
	ff		 mov	 r15d, -1
  00061	48 8b cb	 mov	 rcx, rbx
  00064	41 0f 45 ff	 cmovne	 edi, r15d
  00068	e8 00 00 00 00	 call	 zip64local_getLong

; 742  :       err=ZIP_ERRNO;
; 743  : 
; 744  :     /* number of this disk */
; 745  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  0006d	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00071	4c 8d 45 58	 lea	 r8, QWORD PTR number_disk$[rbp-56]
  00075	85 c0		 test	 eax, eax
  00077	48 8b cb	 mov	 rcx, rbx
  0007a	41 0f 45 ff	 cmovne	 edi, r15d
  0007e	e8 00 00 00 00	 call	 zip64local_getShort

; 746  :       err=ZIP_ERRNO;
; 747  : 
; 748  :     /* number of the disk with the start of the central directory */
; 749  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  00083	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00087	4c 8d 45 50	 lea	 r8, QWORD PTR number_disk_with_CD$[rbp-56]
  0008b	85 c0		 test	 eax, eax
  0008d	48 8b cb	 mov	 rcx, rbx
  00090	41 0f 45 ff	 cmovne	 edi, r15d
  00094	e8 00 00 00 00	 call	 zip64local_getShort

; 750  :       err=ZIP_ERRNO;
; 751  : 
; 752  :     /* total number of entries in the central dir on this disk */
; 753  :     number_entry = 0;
; 754  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00099	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0009d	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  000a1	85 c0		 test	 eax, eax
  000a3	48 8b cb	 mov	 rcx, rbx
  000a6	41 0f 45 ff	 cmovne	 edi, r15d
  000aa	e8 00 00 00 00	 call	 zip64local_getShort
  000af	85 c0		 test	 eax, eax
  000b1	74 08		 je	 SHORT $LN26@LoadCentra

; 755  :       err=ZIP_ERRNO;

  000b3	41 8b ff	 mov	 edi, r15d
  000b6	44 8b f6	 mov	 r14d, esi
  000b9	eb 04		 jmp	 SHORT $LN27@LoadCentra
$LN26@LoadCentra:

; 756  :     else
; 757  :       number_entry = uL;

  000bb	44 8b 75 48	 mov	 r14d, DWORD PTR uL$[rbp-56]
$LN27@LoadCentra:

; 758  : 
; 759  :     /* total number of entries in the central dir */
; 760  :     number_entry_CD = 0;
; 761  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  000bf	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000c3	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  000c7	48 8b cb	 mov	 rcx, rbx
  000ca	48 89 75 60	 mov	 QWORD PTR number_entry_CD$1$[rbp-56], rsi
  000ce	e8 00 00 00 00	 call	 zip64local_getShort
  000d3	85 c0		 test	 eax, eax
  000d5	74 08		 je	 SHORT $LN28@LoadCentra

; 762  :       err=ZIP_ERRNO;

  000d7	41 8b ff	 mov	 edi, r15d
  000da	48 8b c6	 mov	 rax, rsi
  000dd	eb 0b		 jmp	 SHORT $LN29@LoadCentra
$LN28@LoadCentra:

; 763  :     else
; 764  :       number_entry_CD = uL;

  000df	44 8b 6d 48	 mov	 r13d, DWORD PTR uL$[rbp-56]
  000e3	4c 89 6d 60	 mov	 QWORD PTR number_entry_CD$1$[rbp-56], r13
  000e7	41 8b c5	 mov	 eax, r13d
$LN29@LoadCentra:

; 765  : 
; 766  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  000ea	49 3b c6	 cmp	 rax, r14
  000ed	75 0a		 jne	 SHORT $LN31@LoadCentra
  000ef	39 75 50	 cmp	 DWORD PTR number_disk_with_CD$[rbp-56], esi
  000f2	75 05		 jne	 SHORT $LN31@LoadCentra
  000f4	39 75 58	 cmp	 DWORD PTR number_disk$[rbp-56], esi
  000f7	74 05		 je	 SHORT $LN30@LoadCentra
$LN31@LoadCentra:

; 767  :       err=ZIP_BADZIPFILE;

  000f9	bf 99 ff ff ff	 mov	 edi, -103		; ffffffffffffff99H
$LN30@LoadCentra:

; 768  : 
; 769  :     /* size of the central directory */
; 770  :     size_central_dir = 0;
; 771  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  000fe	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00102	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  00106	48 8b cb	 mov	 rcx, rbx
  00109	4c 8b f6	 mov	 r14, rsi
  0010c	e8 00 00 00 00	 call	 zip64local_getLong
  00111	85 c0		 test	 eax, eax
  00113	74 05		 je	 SHORT $LN32@LoadCentra

; 772  :       err=ZIP_ERRNO;

  00115	41 8b ff	 mov	 edi, r15d
  00118	eb 04		 jmp	 SHORT $LN33@LoadCentra
$LN32@LoadCentra:

; 773  :     else
; 774  :       size_central_dir = uL;

  0011a	44 8b 75 48	 mov	 r14d, DWORD PTR uL$[rbp-56]
$LN33@LoadCentra:

; 775  : 
; 776  :     /* offset of start of central directory with respect to the starting disk number */
; 777  :     offset_central_dir = 0;
; 778  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  0011e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00122	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  00126	48 8b cb	 mov	 rcx, rbx
  00129	e8 00 00 00 00	 call	 zip64local_getLong
  0012e	85 c0		 test	 eax, eax
  00130	74 05		 je	 SHORT $LN34@LoadCentra

; 779  :       err=ZIP_ERRNO;

  00132	41 8b ff	 mov	 edi, r15d
  00135	eb 03		 jmp	 SHORT $LN35@LoadCentra
$LN34@LoadCentra:

; 780  :     else
; 781  :       offset_central_dir = uL;

  00137	8b 75 48	 mov	 esi, DWORD PTR uL$[rbp-56]
$LN35@LoadCentra:

; 782  : 
; 783  : 
; 784  :     /* zipfile global comment length */
; 785  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &size_comment)!=ZIP_OK)

  0013a	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0013e	4c 8d 45 48	 lea	 r8, QWORD PTR size_comment$[rbp-56]
  00142	48 8b cb	 mov	 rcx, rbx
  00145	e8 00 00 00 00	 call	 zip64local_getShort
  0014a	44 8b 6d 48	 mov	 r13d, DWORD PTR size_comment$[rbp-56]
  0014e	e9 17 01 00 00	 jmp	 $LN57@LoadCentra
$LN55@LoadCentra:

; 673  :   }
; 674  : 
; 675  : /* disable to allow appending to empty ZIP archive
; 676  :         if (central_pos==0)
; 677  :             err=ZIP_ERRNO;
; 678  : */
; 679  : 
; 680  :   if(hasZIP64Record)
; 681  :   {
; 682  :     ZPOS64_T sizeEndOfCentralDirectory;
; 683  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos, ZLIB_FILEFUNC_SEEK_SET) != 0)

  00153	45 33 c9	 xor	 r9d, r9d
  00156	4c 8b c0	 mov	 r8, rax
  00159	e8 00 00 00 00	 call	 call_zseek64

; 684  :       err=ZIP_ERRNO;
; 685  : 
; 686  :     /* the signature, already checked */
; 687  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  0015e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00162	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  00166	85 c0		 test	 eax, eax
  00168	8b fe		 mov	 edi, esi
  0016a	41 bf ff ff ff
	ff		 mov	 r15d, -1
  00170	48 8b cb	 mov	 rcx, rbx
  00173	41 0f 45 ff	 cmovne	 edi, r15d
  00177	e8 00 00 00 00	 call	 zip64local_getLong

; 688  :       err=ZIP_ERRNO;
; 689  : 
; 690  :     /* size of zip64 end of central directory record */
; 691  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &sizeEndOfCentralDirectory)!=ZIP_OK)

  0017c	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00180	4c 8d 45 48	 lea	 r8, QWORD PTR sizeEndOfCentralDirectory$1[rbp-56]
  00184	85 c0		 test	 eax, eax
  00186	48 8b cb	 mov	 rcx, rbx
  00189	41 0f 45 ff	 cmovne	 edi, r15d
  0018d	e8 00 00 00 00	 call	 zip64local_getLong64

; 692  :       err=ZIP_ERRNO;
; 693  : 
; 694  :     /* version made by */
; 695  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionMadeBy)!=ZIP_OK)

  00192	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00196	4c 8d 45 48	 lea	 r8, QWORD PTR VersionMadeBy$[rbp-56]
  0019a	85 c0		 test	 eax, eax
  0019c	48 8b cb	 mov	 rcx, rbx
  0019f	41 0f 45 ff	 cmovne	 edi, r15d
  001a3	e8 00 00 00 00	 call	 zip64local_getShort

; 696  :       err=ZIP_ERRNO;
; 697  : 
; 698  :     /* version needed to extract */
; 699  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionNeeded)!=ZIP_OK)

  001a8	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001ac	4c 8d 45 48	 lea	 r8, QWORD PTR VersionNeeded$[rbp-56]
  001b0	85 c0		 test	 eax, eax
  001b2	48 8b cb	 mov	 rcx, rbx
  001b5	41 0f 45 ff	 cmovne	 edi, r15d
  001b9	e8 00 00 00 00	 call	 zip64local_getShort

; 700  :       err=ZIP_ERRNO;
; 701  : 
; 702  :     /* number of this disk */
; 703  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  001be	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001c2	4c 8d 45 58	 lea	 r8, QWORD PTR number_disk$[rbp-56]
  001c6	85 c0		 test	 eax, eax
  001c8	48 8b cb	 mov	 rcx, rbx
  001cb	41 0f 45 ff	 cmovne	 edi, r15d
  001cf	e8 00 00 00 00	 call	 zip64local_getLong

; 704  :       err=ZIP_ERRNO;
; 705  : 
; 706  :     /* number of the disk with the start of the central directory */
; 707  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  001d4	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001d8	4c 8d 45 50	 lea	 r8, QWORD PTR number_disk_with_CD$[rbp-56]
  001dc	85 c0		 test	 eax, eax
  001de	48 8b cb	 mov	 rcx, rbx
  001e1	41 0f 45 ff	 cmovne	 edi, r15d
  001e5	e8 00 00 00 00	 call	 zip64local_getLong

; 708  :       err=ZIP_ERRNO;
; 709  : 
; 710  :     /* total number of entries in the central directory on this disk */
; 711  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &number_entry)!=ZIP_OK)

  001ea	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001ee	4c 8d 45 e8	 lea	 r8, QWORD PTR number_entry$[rbp-56]
  001f2	85 c0		 test	 eax, eax
  001f4	48 8b cb	 mov	 rcx, rbx
  001f7	41 0f 45 ff	 cmovne	 edi, r15d
  001fb	e8 00 00 00 00	 call	 zip64local_getLong64

; 712  :       err=ZIP_ERRNO;
; 713  : 
; 714  :     /* total number of entries in the central directory */
; 715  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&number_entry_CD)!=ZIP_OK)

  00200	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00204	4c 8d 45 48	 lea	 r8, QWORD PTR number_entry_CD$[rbp-56]
  00208	85 c0		 test	 eax, eax
  0020a	48 8b cb	 mov	 rcx, rbx
  0020d	41 0f 45 ff	 cmovne	 edi, r15d
  00211	e8 00 00 00 00	 call	 zip64local_getLong64
  00216	85 c0		 test	 eax, eax

; 716  :       err=ZIP_ERRNO;
; 717  : 
; 718  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  00218	48 8b 45 48	 mov	 rax, QWORD PTR number_entry_CD$[rbp-56]
  0021c	48 89 45 60	 mov	 QWORD PTR number_entry_CD$1$[rbp-56], rax
  00220	41 0f 45 ff	 cmovne	 edi, r15d
  00224	48 3b 45 e8	 cmp	 rax, QWORD PTR number_entry$[rbp-56]
  00228	75 0a		 jne	 SHORT $LN19@LoadCentra
  0022a	39 75 50	 cmp	 DWORD PTR number_disk_with_CD$[rbp-56], esi
  0022d	75 05		 jne	 SHORT $LN19@LoadCentra
  0022f	39 75 58	 cmp	 DWORD PTR number_disk$[rbp-56], esi
  00232	74 05		 je	 SHORT $LN18@LoadCentra
$LN19@LoadCentra:

; 719  :       err=ZIP_BADZIPFILE;

  00234	bf 99 ff ff ff	 mov	 edi, -103		; ffffffffffffff99H
$LN18@LoadCentra:

; 720  : 
; 721  :     /* size of the central directory */
; 722  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&size_central_dir)!=ZIP_OK)

  00239	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0023d	4c 8d 45 48	 lea	 r8, QWORD PTR size_central_dir$[rbp-56]
  00241	48 8b cb	 mov	 rcx, rbx
  00244	e8 00 00 00 00	 call	 zip64local_getLong64

; 723  :       err=ZIP_ERRNO;
; 724  : 
; 725  :     /* offset of start of central directory with respect to the
; 726  :     starting disk number */
; 727  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&offset_central_dir)!=ZIP_OK)

  00249	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0024d	4c 8d 45 50	 lea	 r8, QWORD PTR offset_central_dir$[rbp-56]
  00251	85 c0		 test	 eax, eax
  00253	48 8b cb	 mov	 rcx, rbx
  00256	41 0f 45 ff	 cmovne	 edi, r15d
  0025a	e8 00 00 00 00	 call	 zip64local_getLong64

; 728  :       err=ZIP_ERRNO;
; 729  : 
; 730  :     // TODO..
; 731  :     // read the comment from the standard central header.
; 732  :     size_comment = 0;

  0025f	4c 8b 75 48	 mov	 r14, QWORD PTR size_central_dir$[rbp-56]
  00263	44 8b ee	 mov	 r13d, esi
  00266	48 8b 75 50	 mov	 rsi, QWORD PTR offset_central_dir$[rbp-56]
$LN57@LoadCentra:

; 786  :       err=ZIP_ERRNO;
; 787  :   }
; 788  : 
; 789  :   if ((central_pos<offset_central_dir+size_central_dir) &&

  0026a	85 c0		 test	 eax, eax
  0026c	4a 8d 04 36	 lea	 rax, QWORD PTR [rsi+r14]
  00270	41 0f 45 ff	 cmovne	 edi, r15d
  00274	4c 3b e0	 cmp	 r12, rax
  00277	0f 82 06 01 00
	00		 jb	 $LN53@LoadCentra

; 790  :     (err==ZIP_OK))
; 791  :     err=ZIP_BADZIPFILE;
; 792  : 
; 793  :   if (err!=ZIP_OK)

  0027d	85 ff		 test	 edi, edi
  0027f	0f 85 fe 00 00
	00		 jne	 $LN53@LoadCentra

; 797  :   }
; 798  : 
; 799  :   if (size_comment>0)

  00285	45 85 ed	 test	 r13d, r13d
  00288	74 34		 je	 SHORT $LN40@LoadCentra

; 800  :   {
; 801  :     pziinit->globalcomment = (char*)ALLOC(size_comment+1);

  0028a	41 8d 4d 01	 lea	 ecx, DWORD PTR [r13+1]
  0028e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00294	48 89 83 60 01
	01 00		 mov	 QWORD PTR [rbx+65888], rax

; 802  :     if (pziinit->globalcomment)

  0029b	48 85 c0	 test	 rax, rax
  0029e	74 1e		 je	 SHORT $LN40@LoadCentra

; 803  :     {
; 804  :       size_comment = ZREAD64(pziinit->z_filefunc, pziinit->filestream, pziinit->globalcomment,size_comment);

  002a0	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  002a4	45 8b cd	 mov	 r9d, r13d
  002a7	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  002ab	4c 8b c0	 mov	 r8, rax
  002ae	ff 53 08	 call	 QWORD PTR [rbx+8]

; 805  :       pziinit->globalcomment[size_comment]=0;

  002b1	8b c8		 mov	 ecx, eax
  002b3	48 8b 83 60 01
	01 00		 mov	 rax, QWORD PTR [rbx+65888]
  002ba	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
$LN40@LoadCentra:

; 806  :     }
; 807  :   }
; 808  : 
; 809  :   byte_before_the_zipfile = central_pos - (offset_central_dir+size_central_dir);

  002be	4c 2b e6	 sub	 r12, rsi

; 810  :   pziinit->add_position_when_writing_offset = byte_before_the_zipfile;
; 811  : 
; 812  :   {
; 813  :     ZPOS64_T size_central_dir_to_read = size_central_dir;
; 814  :     size_t buf_size = SIZEDATA_INDATABLOCK;
; 815  :     void* buf_read = (void*)ALLOC(buf_size);

  002c1	b9 f0 0f 00 00	 mov	 ecx, 4080		; 00000ff0H
  002c6	4d 2b e6	 sub	 r12, r14
  002c9	4c 89 a3 50 01
	01 00		 mov	 QWORD PTR [rbx+65872], r12
  002d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 816  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir + byte_before_the_zipfile, ZLIB_FILEFUNC_SEEK_SET) != 0)

  002d6	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  002da	49 03 f4	 add	 rsi, r12
  002dd	4c 8b c6	 mov	 r8, rsi
  002e0	48 89 75 48	 mov	 QWORD PTR tv466[rbp-56], rsi
  002e4	45 33 c9	 xor	 r9d, r9d
  002e7	48 8b cb	 mov	 rcx, rbx
  002ea	4c 8b e8	 mov	 r13, rax
  002ed	e8 00 00 00 00	 call	 call_zseek64
  002f2	85 c0		 test	 eax, eax
  002f4	41 0f 45 ff	 cmovne	 edi, r15d

; 817  :       err=ZIP_ERRNO;
; 818  : 
; 819  :     while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  002f8	4d 85 f6	 test	 r14, r14
  002fb	74 4a		 je	 SHORT $LN3@LoadCentra
  002fd	0f 1f 00	 npad	 3
$LL2@LoadCentra:
  00300	85 ff		 test	 edi, edi
  00302	75 3f		 jne	 SHORT $LN56@LoadCentra

; 820  :     {
; 821  :       ZPOS64_T read_this = SIZEDATA_INDATABLOCK;
; 822  :       if (read_this > size_central_dir_to_read)
; 823  :         read_this = size_central_dir_to_read;
; 824  : 
; 825  :       if (ZREAD64(pziinit->z_filefunc, pziinit->filestream,buf_read,(uLong)read_this) != read_this)

  00304	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00308	be f0 0f 00 00	 mov	 esi, 4080		; 00000ff0H
  0030d	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00311	4c 3b f6	 cmp	 r14, rsi
  00314	4d 8b c5	 mov	 r8, r13
  00317	49 0f 42 f6	 cmovb	 rsi, r14
  0031b	44 8b ce	 mov	 r9d, esi
  0031e	ff 53 08	 call	 QWORD PTR [rbx+8]
  00321	8b c0		 mov	 eax, eax
  00323	48 3b c6	 cmp	 rax, rsi
  00326	74 05		 je	 SHORT $LN54@LoadCentra

; 826  :         err=ZIP_ERRNO;

  00328	41 8b ff	 mov	 edi, r15d

; 827  : 
; 828  :       if (err==ZIP_OK)

  0032b	eb 11		 jmp	 SHORT $LN51@LoadCentra
$LN54@LoadCentra:

; 829  :         err = add_data_in_datablock(&pziinit->central_dir,buf_read, (uLong)read_this);

  0032d	48 8d 4b 60	 lea	 rcx, QWORD PTR [rbx+96]
  00331	44 8b c6	 mov	 r8d, esi
  00334	49 8b d5	 mov	 rdx, r13
  00337	e8 00 00 00 00	 call	 add_data_in_datablock
  0033c	8b f8		 mov	 edi, eax
$LN51@LoadCentra:

; 830  : 
; 831  :       size_central_dir_to_read-=read_this;

  0033e	4c 2b f6	 sub	 r14, rsi
  00341	75 bd		 jne	 SHORT $LL2@LoadCentra
$LN56@LoadCentra:
  00343	48 8b 75 48	 mov	 rsi, QWORD PTR tv466[rbp-56]
$LN3@LoadCentra:

; 832  :     }
; 833  :     TRYFREE(buf_read);

  00347	4d 85 ed	 test	 r13, r13
  0034a	74 09		 je	 SHORT $LN45@LoadCentra
  0034c	49 8b cd	 mov	 rcx, r13
  0034f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN45@LoadCentra:

; 834  :   }
; 835  :   pziinit->begin_pos = byte_before_the_zipfile;
; 836  :   pziinit->number_entry = number_entry_CD;

  00355	48 8b 45 60	 mov	 rax, QWORD PTR number_entry_CD$1$[rbp-56]

; 837  : 
; 838  :   if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir+byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET) != 0)

  00359	45 33 c9	 xor	 r9d, r9d
  0035c	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00360	4c 8b c6	 mov	 r8, rsi
  00363	48 8b cb	 mov	 rcx, rbx
  00366	48 89 83 58 01
	01 00		 mov	 QWORD PTR [rbx+65880], rax
  0036d	4c 89 a3 48 01
	01 00		 mov	 QWORD PTR [rbx+65864], r12
  00374	e8 00 00 00 00	 call	 call_zseek64
  00379	85 c0		 test	 eax, eax
  0037b	41 0f 45 ff	 cmovne	 edi, r15d

; 839  :     err=ZIP_ERRNO;
; 840  : 
; 841  :   return err;

  0037f	8b c7		 mov	 eax, edi
  00381	eb 0e		 jmp	 SHORT $LN1@LoadCentra
$LN53@LoadCentra:

; 794  :   {
; 795  :     ZCLOSE64(pziinit->z_filefunc, pziinit->filestream);

  00383	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00387	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0038b	ff 53 28	 call	 QWORD PTR [rbx+40]

; 796  :     return ZIP_ERRNO;

  0038e	41 8b c7	 mov	 eax, r15d
$LN1@LoadCentra:

; 842  : }

  00391	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00395	41 5f		 pop	 r15
  00397	41 5e		 pop	 r14
  00399	41 5d		 pop	 r13
  0039b	41 5c		 pop	 r12
  0039d	5f		 pop	 rdi
  0039e	5e		 pop	 rsi
  0039f	5b		 pop	 rbx
  003a0	5d		 pop	 rbp
  003a1	c3		 ret	 0
LoadCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpen3
_TEXT	SEGMENT
ziinit$ = 32
pathname$ = 65952
append$ = 65960
globalcomment$ = 65968
pzlib_filefunc64_32_def$ = 65976
zipOpen3 PROC						; COMDAT

; 850  : {

$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00014	55		 push	 rbp
  00015	48 8d ac 24 70
	ff fe ff	 lea	 rbp, QWORD PTR [rsp-65680]
  0001d	b8 90 01 01 00	 mov	 eax, 65936		; 00010190H
  00022	e8 00 00 00 00	 call	 __chkstk
  00027	48 2b e0	 sub	 rsp, rax

; 851  :     zip64_internal ziinit;
; 852  :     zip64_internal* zi;
; 853  :     int err=ZIP_OK;

  0002a	33 db		 xor	 ebx, ebx
  0002c	8b f2		 mov	 esi, edx

; 854  : 
; 855  :     ziinit.z_filefunc.zseek32_file = NULL;

  0002e	48 89 5c 24 70	 mov	 QWORD PTR ziinit$[rsp+80], rbx
  00033	4d 8b f0	 mov	 r14, r8

; 856  :     ziinit.z_filefunc.ztell32_file = NULL;

  00036	48 89 5c 24 68	 mov	 QWORD PTR ziinit$[rsp+72], rbx
  0003b	48 8b d1	 mov	 rdx, rcx

; 857  :     if (pzlib_filefunc64_32_def==NULL)

  0003e	4d 85 c9	 test	 r9, r9
  00041	75 0c		 jne	 SHORT $LN2@zipOpen3

; 858  :         fill_fopen64_filefunc(&ziinit.z_filefunc.zfile_func64);

  00043	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00048	e8 00 00 00 00	 call	 fill_fopen64_filefunc
  0004d	eb 3d		 jmp	 SHORT $LN3@zipOpen3
$LN2@zipOpen3:

; 859  :     else
; 860  :         ziinit.z_filefunc = *pzlib_filefunc64_32_def;

  0004f	41 0f 28 01	 movaps	 xmm0, XMMWORD PTR [r9]
  00053	41 0f 28 49 10	 movaps	 xmm1, XMMWORD PTR [r9+16]
  00058	0f 29 44 24 20	 movaps	 XMMWORD PTR ziinit$[rsp], xmm0
  0005d	41 0f 28 41 20	 movaps	 xmm0, XMMWORD PTR [r9+32]
  00062	0f 29 4c 24 30	 movaps	 XMMWORD PTR ziinit$[rsp+16], xmm1
  00067	41 0f 28 49 30	 movaps	 xmm1, XMMWORD PTR [r9+48]
  0006c	0f 29 44 24 40	 movaps	 XMMWORD PTR ziinit$[rsp+32], xmm0
  00071	41 0f 28 41 40	 movaps	 xmm0, XMMWORD PTR [r9+64]
  00076	0f 29 4c 24 50	 movaps	 XMMWORD PTR ziinit$[rsp+48], xmm1
  0007b	f2 41 0f 10 49
	50		 movsd	 xmm1, QWORD PTR [r9+80]
  00081	0f 29 44 24 60	 movaps	 XMMWORD PTR ziinit$[rsp+64], xmm0
  00086	f2 0f 11 4c 24
	70		 movsd	 QWORD PTR ziinit$[rsp+80], xmm1
$LN3@zipOpen3:

; 861  : 
; 862  :     ziinit.filestream = ZOPEN64(ziinit.z_filefunc,

  0008c	b8 0b 00 00 00	 mov	 eax, 11
  00091	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00096	41 b8 07 00 00
	00		 mov	 r8d, 7
  0009c	85 f6		 test	 esi, esi
  0009e	44 0f 44 c0	 cmove	 r8d, eax
  000a2	e8 00 00 00 00	 call	 call_zopen64
  000a7	48 89 44 24 78	 mov	 QWORD PTR ziinit$[rsp+88], rax
  000ac	48 8b f8	 mov	 rdi, rax

; 863  :                   pathname,
; 864  :                   (append == APPEND_STATUS_CREATE) ?
; 865  :                   (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_CREATE) :
; 866  :                     (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_EXISTING));
; 867  : 
; 868  :     if (ziinit.filestream == NULL)

  000af	48 85 c0	 test	 rax, rax
  000b2	74 6b		 je	 SHORT $LN14@zipOpen3

; 869  :         return NULL;
; 870  : 
; 871  :     if (append == APPEND_STATUS_CREATEAFTER)

  000b4	83 fe 01	 cmp	 esi, 1
  000b7	75 14		 jne	 SHORT $LN5@zipOpen3

; 872  :         ZSEEK64(ziinit.z_filefunc,ziinit.filestream,0,SEEK_END);

  000b9	44 8d 4e 01	 lea	 r9d, QWORD PTR [rsi+1]
  000bd	45 33 c0	 xor	 r8d, r8d
  000c0	48 8b d0	 mov	 rdx, rax
  000c3	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  000c8	e8 00 00 00 00	 call	 call_zseek64
$LN5@zipOpen3:

; 873  : 
; 874  :     ziinit.begin_pos = ZTELL64(ziinit.z_filefunc,ziinit.filestream);

  000cd	48 8b d7	 mov	 rdx, rdi
  000d0	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  000d5	e8 00 00 00 00	 call	 call_ztell64

; 875  :     ziinit.in_opened_file_inzip = 0;
; 876  :     ziinit.ci.stream_initialised = 0;
; 877  :     ziinit.number_entry = 0;
; 878  :     ziinit.add_position_when_writing_offset = 0;
; 879  :     init_linkedlist(&(ziinit.central_dir));

  000da	48 8d 4d 80	 lea	 rcx, QWORD PTR ziinit$[rbp-160]
  000de	48 89 85 68 00
	01 00		 mov	 QWORD PTR ziinit$[rbp+65608], rax
  000e5	89 5d 90	 mov	 DWORD PTR ziinit$[rbp-144], ebx
  000e8	89 5d f0	 mov	 DWORD PTR ziinit$[rbp-48], ebx
  000eb	48 89 9d 78 00
	01 00		 mov	 QWORD PTR ziinit$[rbp+65624], rbx
  000f2	48 89 9d 70 00
	01 00		 mov	 QWORD PTR ziinit$[rbp+65616], rbx
  000f9	e8 00 00 00 00	 call	 init_linkedlist

; 880  : 
; 881  : 
; 882  : 
; 883  :     zi = (zip64_internal*)ALLOC(sizeof(zip64_internal));

  000fe	b9 68 01 01 00	 mov	 ecx, 65896		; 00010168H
  00103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00109	48 8b f8	 mov	 rdi, rax

; 884  :     if (zi==NULL)

  0010c	48 85 c0	 test	 rax, rax
  0010f	75 12		 jne	 SHORT $LN6@zipOpen3

; 885  :     {
; 886  :         ZCLOSE64(ziinit.z_filefunc,ziinit.filestream);

  00111	48 8b 54 24 78	 mov	 rdx, QWORD PTR ziinit$[rsp+88]
  00116	48 8b 4c 24 58	 mov	 rcx, QWORD PTR ziinit$[rsp+56]
  0011b	ff 54 24 48	 call	 QWORD PTR ziinit$[rsp+40]
$LN14@zipOpen3:

; 917  :     }
; 918  : }

  0011f	33 c0		 xor	 eax, eax
  00121	eb 5c		 jmp	 SHORT $LN10@zipOpen3
$LN6@zipOpen3:

; 887  :         return NULL;
; 888  :     }
; 889  : 
; 890  :     /* now we add file in a zipfile */
; 891  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 892  :     ziinit.globalcomment = NULL;

  00123	48 89 9d 80 00
	01 00		 mov	 QWORD PTR ziinit$[rbp+65632], rbx
  0012a	48 8b cb	 mov	 rcx, rbx

; 893  :     if (append == APPEND_STATUS_ADDINZIP)

  0012d	83 fe 02	 cmp	 esi, 2
  00130	75 13		 jne	 SHORT $LN7@zipOpen3

; 894  :     {
; 895  :       // Read and Cache Central Directory Records
; 896  :       err = LoadCentralDirectoryRecord(&ziinit);

  00132	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00137	e8 00 00 00 00	 call	 LoadCentralDirectoryRecord
  0013c	48 8b 8d 80 00
	01 00		 mov	 rcx, QWORD PTR ziinit$[rbp+65632]
  00143	8b d8		 mov	 ebx, eax
$LN7@zipOpen3:

; 897  :     }
; 898  : 
; 899  :     if (globalcomment)

  00145	4d 85 f6	 test	 r14, r14
  00148	74 03		 je	 SHORT $LN8@zipOpen3

; 900  :     {
; 901  :       *globalcomment = ziinit.globalcomment;

  0014a	49 89 0e	 mov	 QWORD PTR [r14], rcx
$LN8@zipOpen3:

; 902  :     }
; 903  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 904  : 
; 905  :     if (err != ZIP_OK)

  0014d	85 db		 test	 ebx, ebx
  0014f	74 18		 je	 SHORT $LN9@zipOpen3

; 906  :     {
; 907  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 908  :         TRYFREE(ziinit.globalcomment);

  00151	48 85 c9	 test	 rcx, rcx
  00154	74 06		 je	 SHORT $LN11@zipOpen3
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN11@zipOpen3:

; 909  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 910  :         TRYFREE(zi);

  0015c	48 8b cf	 mov	 rcx, rdi
  0015f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 911  :         return NULL;

  00165	33 c0		 xor	 eax, eax
  00167	eb 16		 jmp	 SHORT $LN10@zipOpen3
$LN9@zipOpen3:

; 912  :     }
; 913  :     else
; 914  :     {
; 915  :         *zi = ziinit;

  00169	41 b8 68 01 01
	00		 mov	 r8d, 65896		; 00010168H
  0016f	48 8d 54 24 20	 lea	 rdx, QWORD PTR ziinit$[rsp]
  00174	48 8b cf	 mov	 rcx, rdi
  00177	e8 00 00 00 00	 call	 memcpy

; 916  :         return (zipFile)zi;

  0017c	48 8b c7	 mov	 rax, rdi
$LN10@zipOpen3:

; 917  :     }
; 918  : }

  0017f	4c 8d 9c 24 90
	01 01 00	 lea	 r11, QWORD PTR [rsp+65936]
  00187	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  0018b	49 8b 73 18	 mov	 rsi, QWORD PTR [r11+24]
  0018f	49 8b 7b 20	 mov	 rdi, QWORD PTR [r11+32]
  00193	4d 8b 73 28	 mov	 r14, QWORD PTR [r11+40]
  00197	49 8b e3	 mov	 rsp, r11
  0019a	5d		 pop	 rbp
  0019b	c3		 ret	 0
zipOpen3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpen2
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$1 = 32
pathname$ = 144
append$ = 152
globalcomment$ = 160
pzlib_filefunc32_def$ = 168
zipOpen2 PROC						; COMDAT

; 921  : {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00009	4d 8b d0	 mov	 r10, r8
  0000c	44 8b da	 mov	 r11d, edx
  0000f	48 8b d9	 mov	 rbx, rcx

; 922  :     if (pzlib_filefunc32_def != NULL)

  00012	4d 85 c9	 test	 r9, r9
  00015	74 29		 je	 SHORT $LN2@zipOpen2

; 923  :     {
; 924  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 925  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  00017	49 8b d1	 mov	 rdx, r9
  0001a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR zlib_filefunc64_32_def_fill$1[rsp]
  0001f	e8 00 00 00 00	 call	 fill_zlib_filefunc64_32_def_from_filefunc32

; 926  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00024	4d 8b c2	 mov	 r8, r10
  00027	4c 8d 4c 24 20	 lea	 r9, QWORD PTR zlib_filefunc64_32_def_fill$1[rsp]
  0002c	41 8b d3	 mov	 edx, r11d
  0002f	48 8b cb	 mov	 rcx, rbx

; 927  :     }
; 928  :     else
; 929  :         return zipOpen3(pathname, append, globalcomment, NULL);
; 930  : }

  00032	e8 00 00 00 00	 call	 zipOpen3
  00037	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0003e	5b		 pop	 rbx
  0003f	c3		 ret	 0
$LN2@zipOpen2:
  00040	e8 00 00 00 00	 call	 zipOpen3
  00045	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
zipOpen2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpen2_64
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$1 = 32
pathname$ = 144
append$ = 152
globalcomment$ = 160
pzlib_filefunc_def$ = 168
zipOpen2_64 PROC					; COMDAT

; 933  : {

$LN7:
  00000	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 934  :     if (pzlib_filefunc_def != NULL)

  00007	4d 85 c9	 test	 r9, r9
  0000a	74 45		 je	 SHORT $LN2@zipOpen2_6

; 935  :     {
; 936  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 937  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  0000c	41 0f 10 01	 movups	 xmm0, XMMWORD PTR [r9]

; 938  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;

  00010	33 c0		 xor	 eax, eax
  00012	41 0f 10 49 10	 movups	 xmm1, XMMWORD PTR [r9+16]
  00017	48 89 44 24 68	 mov	 QWORD PTR zlib_filefunc64_32_def_fill$1[rsp+72], rax
  0001c	0f 29 44 24 20	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp], xmm0
  00021	41 0f 10 41 20	 movups	 xmm0, XMMWORD PTR [r9+32]

; 939  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;

  00026	48 89 44 24 70	 mov	 QWORD PTR zlib_filefunc64_32_def_fill$1[rsp+80], rax
  0002b	0f 29 4c 24 30	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp+16], xmm1
  00030	41 0f 10 49 30	 movups	 xmm1, XMMWORD PTR [r9+48]

; 940  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00035	4c 8d 4c 24 20	 lea	 r9, QWORD PTR zlib_filefunc64_32_def_fill$1[rsp]
  0003a	0f 29 44 24 40	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp+32], xmm0
  0003f	0f 29 4c 24 50	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp+48], xmm1

; 941  :     }
; 942  :     else
; 943  :         return zipOpen3(pathname, append, globalcomment, NULL);
; 944  : }

  00044	e8 00 00 00 00	 call	 zipOpen3
  00049	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00050	c3		 ret	 0
$LN2@zipOpen2_6:
  00051	e8 00 00 00 00	 call	 zipOpen3
  00056	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0005d	c3		 ret	 0
zipOpen2_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpen
_TEXT	SEGMENT
pathname$ = 8
append$ = 16
zipOpen	PROC						; COMDAT

; 950  :     return zipOpen3((const void*)pathname,append,NULL,NULL);

  00000	45 33 c9	 xor	 r9d, r9d
  00003	45 33 c0	 xor	 r8d, r8d
  00006	e9 00 00 00 00	 jmp	 zipOpen3
zipOpen	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpen64
_TEXT	SEGMENT
pathname$ = 8
append$ = 16
zipOpen64 PROC						; COMDAT

; 955  :     return zipOpen3(pathname,append,NULL,NULL);

  00000	45 33 c9	 xor	 r9d, r9d
  00003	45 33 c0	 xor	 r8d, r8d
  00006	e9 00 00 00 00	 jmp	 zipOpen3
zipOpen64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT Write_LocalFileHeader
_TEXT	SEGMENT
zi$ = 64
filename$ = 72
size_extrafield_local$ = 80
extrafield_local$ = 88
Write_LocalFileHeader PROC				; COMDAT

; 959  : {

$LN33:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	41 56		 push	 r14
  0000d	41 57		 push	 r15
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00013	4d 8b f9	 mov	 r15, r9
  00016	45 8b f0	 mov	 r14d, r8d
  00019	48 8b f2	 mov	 rsi, rdx
  0001c	48 8b d9	 mov	 rbx, rcx

; 960  :   /* write the local header */
; 961  :   int err;
; 962  :   uInt size_filename = (uInt)strlen(filename);

  0001f	48 c7 c7 ff ff
	ff ff		 mov	 rdi, -1
$LL26@Write_Loca:
  00026	48 ff c7	 inc	 rdi
  00029	80 3c 3a 00	 cmp	 BYTE PTR [rdx+rdi], 0
  0002d	75 f7		 jne	 SHORT $LL26@Write_Loca

; 963  :   uInt size_extrafield = size_extrafield_local;
; 964  : 
; 965  :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)LOCALHEADERMAGIC, 4);

  0002f	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00033	41 b9 04 00 00
	00		 mov	 r9d, 4
  00039	41 b8 50 4b 03
	04		 mov	 r8d, 67324752		; 04034b50H
  0003f	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  00044	e8 00 00 00 00	 call	 zip64local_putValue

; 966  : 
; 967  :   if (err==ZIP_OK)

  00049	85 c0		 test	 eax, eax
  0004b	0f 85 f2 01 00
	00		 jne	 $LN29@Write_Loca

; 968  :   {
; 969  :     if(zi->ci.zip64)
; 970  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);/* version needed to extract */
; 971  :     else
; 972  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)20,2);/* version needed to extract */
; 973  :   }
; 974  : 
; 975  :   if (err==ZIP_OK)

  00051	83 bb 0c 01 01
	00 00		 cmp	 DWORD PTR [rbx+65804], 0
  00058	b8 14 00 00 00	 mov	 eax, 20
  0005d	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00061	41 b8 2d 00 00
	00		 mov	 r8d, 45			; 0000002dH
  00067	44 0f 44 c0	 cmove	 r8d, eax
  0006b	48 8b cb	 mov	 rcx, rbx
  0006e	44 8d 48 ee	 lea	 r9d, QWORD PTR [rax-18]
  00072	e8 00 00 00 00	 call	 zip64local_putValue
  00077	85 c0		 test	 eax, eax
  00079	0f 85 c4 01 00
	00		 jne	 $LN29@Write_Loca

; 976  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.flag,2);

  0007f	44 8b 83 f4 00
	00 00		 mov	 r8d, DWORD PTR [rbx+244]
  00086	44 8d 48 02	 lea	 r9d, QWORD PTR [rax+2]
  0008a	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0008e	48 8b cb	 mov	 rcx, rbx
  00091	e8 00 00 00 00	 call	 zip64local_putValue

; 977  : 
; 978  :   if (err==ZIP_OK)

  00096	85 c0		 test	 eax, eax
  00098	0f 85 a5 01 00
	00		 jne	 $LN29@Write_Loca

; 979  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.method,2);

  0009e	44 8b 83 f8 00
	00 00		 mov	 r8d, DWORD PTR [rbx+248]
  000a5	44 8d 48 02	 lea	 r9d, QWORD PTR [rax+2]
  000a9	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000ad	48 8b cb	 mov	 rcx, rbx
  000b0	e8 00 00 00 00	 call	 zip64local_putValue

; 980  : 
; 981  :   if (err==ZIP_OK)

  000b5	85 c0		 test	 eax, eax
  000b7	0f 85 86 01 00
	00		 jne	 $LN29@Write_Loca

; 982  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.dosDate,4);

  000bd	44 8b 83 00 01
	01 00		 mov	 r8d, DWORD PTR [rbx+65792]
  000c4	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  000c8	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	e8 00 00 00 00	 call	 zip64local_putValue

; 983  : 
; 984  :   // CRC / Compressed size / Uncompressed size will be filled in later and rewritten later
; 985  :   if (err==ZIP_OK)

  000d4	85 c0		 test	 eax, eax
  000d6	0f 85 67 01 00
	00		 jne	 $LN29@Write_Loca

; 986  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* crc 32, unknown */

  000dc	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000e0	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  000e4	45 33 c0	 xor	 r8d, r8d
  000e7	48 8b cb	 mov	 rcx, rbx
  000ea	e8 00 00 00 00	 call	 zip64local_putValue

; 987  :   if (err==ZIP_OK)

  000ef	85 c0		 test	 eax, eax
  000f1	0f 85 4c 01 00
	00		 jne	 $LN29@Write_Loca

; 988  :   {
; 989  :     if(zi->ci.zip64)
; 990  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* compressed size, unknown */
; 991  :     else
; 992  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* compressed size, unknown */
; 993  :   }
; 994  :   if (err==ZIP_OK)

  000f7	8b 83 0c 01 01
	00		 mov	 eax, DWORD PTR [rbx+65804]
  000fd	bd ff ff ff ff	 mov	 ebp, -1			; ffffffffH
  00102	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00106	f7 d8		 neg	 eax
  00108	41 b9 04 00 00
	00		 mov	 r9d, 4
  0010e	48 8b cb	 mov	 rcx, rbx
  00111	4d 1b c0	 sbb	 r8, r8
  00114	4c 23 c5	 and	 r8, rbp
  00117	e8 00 00 00 00	 call	 zip64local_putValue
  0011c	85 c0		 test	 eax, eax
  0011e	0f 85 1f 01 00
	00		 jne	 $LN29@Write_Loca

; 995  :   {
; 996  :     if(zi->ci.zip64)
; 997  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* uncompressed size, unknown */
; 998  :     else
; 999  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* uncompressed size, unknown */
; 1000 :   }
; 1001 : 
; 1002 :   if (err==ZIP_OK)

  00124	8b 83 0c 01 01
	00		 mov	 eax, DWORD PTR [rbx+65804]
  0012a	41 b9 04 00 00
	00		 mov	 r9d, 4
  00130	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00134	f7 d8		 neg	 eax
  00136	48 8b cb	 mov	 rcx, rbx
  00139	4d 1b c0	 sbb	 r8, r8
  0013c	4c 23 c5	 and	 r8, rbp
  0013f	e8 00 00 00 00	 call	 zip64local_putValue
  00144	85 c0		 test	 eax, eax
  00146	0f 85 f7 00 00
	00		 jne	 $LN29@Write_Loca

; 1003 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_filename,2);

  0014c	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00150	44 8d 48 02	 lea	 r9d, QWORD PTR [rax+2]
  00154	44 8b c7	 mov	 r8d, edi
  00157	48 8b cb	 mov	 rcx, rbx
  0015a	e8 00 00 00 00	 call	 zip64local_putValue

; 1004 : 
; 1005 :   if(zi->ci.zip64)
; 1006 :   {
; 1007 :     size_extrafield += 20;
; 1008 :   }
; 1009 : 
; 1010 :   if (err==ZIP_OK)

  0015f	85 c0		 test	 eax, eax
  00161	0f 85 dc 00 00
	00		 jne	 $LN29@Write_Loca
  00167	39 83 0c 01 01
	00		 cmp	 DWORD PTR [rbx+65804], eax
  0016d	45 8d 46 14	 lea	 r8d, DWORD PTR [r14+20]

; 1011 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_extrafield,2);

  00171	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00175	44 8d 48 02	 lea	 r9d, QWORD PTR [rax+2]
  00179	45 0f 44 c6	 cmove	 r8d, r14d
  0017d	48 8b cb	 mov	 rcx, rbx
  00180	e8 00 00 00 00	 call	 zip64local_putValue
  00185	8b e8		 mov	 ebp, eax

; 1012 : 
; 1013 :   if ((err==ZIP_OK) && (size_filename > 0))

  00187	85 c0		 test	 eax, eax
  00189	0f 85 b4 00 00
	00		 jne	 $LN29@Write_Loca
  0018f	85 ff		 test	 edi, edi
  00191	74 1f		 je	 SHORT $LN24@Write_Loca

; 1014 :   {
; 1015 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,filename,size_filename)!=size_filename)

  00193	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00197	44 8b cf	 mov	 r9d, edi
  0019a	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0019e	4c 8b c6	 mov	 r8, rsi
  001a1	ff 53 10	 call	 QWORD PTR [rbx+16]
  001a4	3b c7		 cmp	 eax, edi
  001a6	74 0a		 je	 SHORT $LN24@Write_Loca
$LN31@Write_Loca:

; 1045 : }

  001a8	b8 ff ff ff ff	 mov	 eax, -1
  001ad	e9 91 00 00 00	 jmp	 $LN29@Write_Loca
$LN24@Write_Loca:

; 1016 :       err = ZIP_ERRNO;
; 1017 :   }
; 1018 : 
; 1019 :   if ((err==ZIP_OK) && (size_extrafield_local > 0))

  001b2	45 85 f6	 test	 r14d, r14d
  001b5	74 16		 je	 SHORT $LN25@Write_Loca

; 1020 :   {
; 1021 :     if (ZWRITE64(zi->z_filefunc, zi->filestream, extrafield_local, size_extrafield_local) != size_extrafield_local)

  001b7	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001bb	45 8b ce	 mov	 r9d, r14d
  001be	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  001c2	4d 8b c7	 mov	 r8, r15
  001c5	ff 53 10	 call	 QWORD PTR [rbx+16]
  001c8	41 3b c6	 cmp	 eax, r14d
  001cb	75 db		 jne	 SHORT $LN31@Write_Loca
$LN25@Write_Loca:

; 1022 :       err = ZIP_ERRNO;
; 1023 :   }
; 1024 : 
; 1025 : 
; 1026 :   if ((err==ZIP_OK) && (zi->ci.zip64))

  001cd	83 bb 0c 01 01
	00 00		 cmp	 DWORD PTR [rbx+65804], 0
  001d4	74 6b		 je	 SHORT $LN27@Write_Loca

; 1027 :   {
; 1028 :       // write the Zip64 extended info
; 1029 :       short HeaderID = 1;
; 1030 :       short DataSize = 16;
; 1031 :       ZPOS64_T CompressedSize = 0;
; 1032 :       ZPOS64_T UncompressedSize = 0;
; 1033 : 
; 1034 :       // Remember position of Zip64 extended info for the local file header. (needed when we update size after done with file)
; 1035 :       zi->ci.pos_zip64extrainfo = ZTELL64(zi->z_filefunc,zi->filestream);

  001d6	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001da	48 8b cb	 mov	 rcx, rbx
  001dd	e8 00 00 00 00	 call	 call_ztell64

; 1036 : 
; 1037 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (short)HeaderID,2);

  001e2	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001e6	41 b9 02 00 00
	00		 mov	 r9d, 2
  001ec	48 8b cb	 mov	 rcx, rbx
  001ef	48 89 83 10 01
	01 00		 mov	 QWORD PTR [rbx+65808], rax
  001f6	45 8d 41 ff	 lea	 r8d, QWORD PTR [r9-1]
  001fa	e8 00 00 00 00	 call	 zip64local_putValue

; 1038 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (short)DataSize,2);

  001ff	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00203	41 b9 02 00 00
	00		 mov	 r9d, 2
  00209	48 8b cb	 mov	 rcx, rbx
  0020c	45 8d 41 0e	 lea	 r8d, QWORD PTR [r9+14]
  00210	e8 00 00 00 00	 call	 zip64local_putValue

; 1039 : 
; 1040 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)UncompressedSize,8);

  00215	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00219	41 b9 08 00 00
	00		 mov	 r9d, 8
  0021f	45 33 c0	 xor	 r8d, r8d
  00222	48 8b cb	 mov	 rcx, rbx
  00225	e8 00 00 00 00	 call	 zip64local_putValue

; 1041 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)CompressedSize,8);

  0022a	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0022e	41 b9 08 00 00
	00		 mov	 r9d, 8
  00234	45 33 c0	 xor	 r8d, r8d
  00237	48 8b cb	 mov	 rcx, rbx
  0023a	e8 00 00 00 00	 call	 zip64local_putValue
  0023f	eb 02		 jmp	 SHORT $LN29@Write_Loca
$LN27@Write_Loca:

; 1042 :   }
; 1043 : 
; 1044 :   return err;

  00241	8b c5		 mov	 eax, ebp
$LN29@Write_Loca:
  00243	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]

; 1045 : }

  00248	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  0024d	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00252	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00256	41 5f		 pop	 r15
  00258	41 5e		 pop	 r14
  0025a	5f		 pop	 rdi
  0025b	c3		 ret	 0
Write_LocalFileHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip4_64
_TEXT	SEGMENT
bufHead$1 = 64
file$ = 128
filename$ = 136
zipfi$ = 144
extrafield_local$ = 152
size_extrafield_local$ = 160
extrafield_global$ = 168
size_extrafield_global$ = 176
comment$ = 184
method$ = 192
level$ = 200
raw$ = 208
windowBits$ = 216
memLevel$ = 224
strategy$ = 232
password$ = 240
crcForCrypting$ = 248
versionMadeBy$ = 256
flagBase$ = 264
zip64$ = 272
zipOpenNewFileInZip4_64 PROC				; COMDAT

; 1062 : {

$LN66:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	53		 push	 rbx
  00006	57		 push	 rdi
  00007	41 55		 push	 r13
  00009	41 57		 push	 r15
  0000b	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0000f	4d 8b f8	 mov	 r15, r8
  00012	48 8b fa	 mov	 rdi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 1063 :     zip64_internal* zi;
; 1064 :     uInt size_filename;
; 1065 :     uInt size_comment;
; 1066 :     uInt i;
; 1067 :     int err = ZIP_OK;
; 1068 : 
; 1069 : #    ifdef NOCRYPT
; 1070 :     (crcForCrypting);
; 1071 :     if (password != NULL)
; 1072 :         return ZIP_PARAMERROR;
; 1073 : #    endif
; 1074 : 
; 1075 :     if (file == NULL)

  00018	48 85 c9	 test	 rcx, rcx
  0001b	0f 84 5f 05 00
	00		 je	 $LN58@zipOpenNew

; 1076 :         return ZIP_PARAMERROR;
; 1077 : 
; 1078 : #ifdef HAVE_BZIP2
; 1079 :     if ((method!=0) && (method!=Z_DEFLATED) && (method!=Z_BZIP2ED))
; 1080 :       return ZIP_PARAMERROR;
; 1081 : #else
; 1082 :     if ((method!=0) && (method!=Z_DEFLATED))

  00021	44 8b ac 24 c0
	00 00 00	 mov	 r13d, DWORD PTR method$[rsp]
  00029	41 f7 c5 f7 ff
	ff ff		 test	 r13d, -9		; fffffff7H
  00030	0f 85 4a 05 00
	00		 jne	 $LN58@zipOpenNew

; 1084 : #endif
; 1085 : 
; 1086 :     zi = (zip64_internal*)file;
; 1087 : 
; 1088 :     if (zi->in_opened_file_inzip == 1)

  00036	83 79 70 01	 cmp	 DWORD PTR [rcx+112], 1
  0003a	75 0d		 jne	 SHORT $LN14@zipOpenNew

; 1089 :     {
; 1090 :         err = zipCloseFileInZip (file);

  0003c	e8 00 00 00 00	 call	 zipCloseFileInZip

; 1091 :         if (err != ZIP_OK)

  00041	85 c0		 test	 eax, eax
  00043	0f 85 ab 03 00
	00		 jne	 $LN1@zipOpenNew
$LN14@zipOpenNew:
  00049	48 89 ac 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rbp

; 1092 :             return err;
; 1093 :     }
; 1094 : 
; 1095 :     if (filename==NULL)
; 1096 :         filename="-";
; 1097 : 
; 1098 :     if (comment==NULL)

  00051	48 85 ff	 test	 rdi, rdi
  00054	48 89 b4 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rsi
  0005c	4c 89 a4 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], r12
  00064	4c 89 74 24 50	 mov	 QWORD PTR [rsp+80], r14
  00069	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:??_C@_01JOAMLHOP@?9@
  00070	4c 0f 45 f7	 cmovne	 r14, rdi
  00074	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR comment$[rsp]
  0007c	33 c9		 xor	 ecx, ecx
  0007e	48 85 ff	 test	 rdi, rdi
  00081	75 04		 jne	 SHORT $LN16@zipOpenNew

; 1099 :         size_comment = 0;

  00083	8b f1		 mov	 esi, ecx
  00085	eb 11		 jmp	 SHORT $LN17@zipOpenNew
$LN16@zipOpenNew:

; 1100 :     else
; 1101 :         size_comment = (uInt)strlen(comment);

  00087	48 c7 c6 ff ff
	ff ff		 mov	 rsi, -1
  0008e	66 90		 npad	 2
$LL61@zipOpenNew:
  00090	48 ff c6	 inc	 rsi
  00093	38 0c 37	 cmp	 BYTE PTR [rdi+rsi], cl
  00096	75 f8		 jne	 SHORT $LL61@zipOpenNew
$LN17@zipOpenNew:

; 1102 : 
; 1103 :     size_filename = (uInt)strlen(filename);

  00098	48 c7 c5 ff ff
	ff ff		 mov	 rbp, -1
  0009f	90		 npad	 1
$LL60@zipOpenNew:
  000a0	48 ff c5	 inc	 rbp
  000a3	41 38 0c 2e	 cmp	 BYTE PTR [r14+rbp], cl
  000a7	75 f7		 jne	 SHORT $LL60@zipOpenNew

; 1104 : 
; 1105 :     if (zipfi == NULL)

  000a9	4d 85 ff	 test	 r15, r15
  000ac	75 04		 jne	 SHORT $LN18@zipOpenNew

; 1106 :         zi->ci.dosDate = 0;

  000ae	8b c1		 mov	 eax, ecx
  000b0	eb 10		 jmp	 SHORT $LN21@zipOpenNew
$LN18@zipOpenNew:

; 1107 :     else
; 1108 :     {
; 1109 :         if (zipfi->dosDate != 0)

  000b2	41 8b 47 18	 mov	 eax, DWORD PTR [r15+24]
  000b6	85 c0		 test	 eax, eax
  000b8	75 08		 jne	 SHORT $LN21@zipOpenNew

; 1110 :             zi->ci.dosDate = zipfi->dosDate;
; 1111 :         else
; 1112 :           zi->ci.dosDate = zip64local_TmzDateToDosDate(&zipfi->tmz_date);

  000ba	49 8b cf	 mov	 rcx, r15
  000bd	e8 00 00 00 00	 call	 zip64local_TmzDateToDosDate
$LN21@zipOpenNew:

; 1113 :     }
; 1114 : 
; 1115 :     zi->ci.flag = flagBase;
; 1116 :     if ((level==8) || (level==9))

  000c2	44 8b a4 24 c8
	00 00 00	 mov	 r12d, DWORD PTR level$[rsp]
  000ca	89 83 00 01 01
	00		 mov	 DWORD PTR [rbx+65792], eax
  000d0	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR flagBase$[rsp]
  000d7	89 83 f4 00 00
	00		 mov	 DWORD PTR [rbx+244], eax
  000dd	41 83 fc 08	 cmp	 r12d, 8
  000e1	74 06		 je	 SHORT $LN23@zipOpenNew
  000e3	41 83 fc 09	 cmp	 r12d, 9
  000e7	75 09		 jne	 SHORT $LN22@zipOpenNew
$LN23@zipOpenNew:

; 1117 :       zi->ci.flag |= 2;

  000e9	83 c8 02	 or	 eax, 2
  000ec	89 83 f4 00 00
	00		 mov	 DWORD PTR [rbx+244], eax
$LN22@zipOpenNew:

; 1118 :     if (level==2)

  000f2	41 83 fc 02	 cmp	 r12d, 2
  000f6	75 09		 jne	 SHORT $LN24@zipOpenNew

; 1119 :       zi->ci.flag |= 4;

  000f8	83 c8 04	 or	 eax, 4
  000fb	89 83 f4 00 00
	00		 mov	 DWORD PTR [rbx+244], eax
$LN24@zipOpenNew:

; 1120 :     if (level==1)

  00101	41 83 fc 01	 cmp	 r12d, 1
  00105	75 09		 jne	 SHORT $LN25@zipOpenNew

; 1121 :       zi->ci.flag |= 6;

  00107	83 c8 06	 or	 eax, 6
  0010a	89 83 f4 00 00
	00		 mov	 DWORD PTR [rbx+244], eax
$LN25@zipOpenNew:

; 1122 :     if (password != NULL)

  00110	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR password$[rsp], 0
  00119	74 09		 je	 SHORT $LN26@zipOpenNew

; 1123 :       zi->ci.flag |= 1;

  0011b	83 c8 01	 or	 eax, 1
  0011e	89 83 f4 00 00
	00		 mov	 DWORD PTR [rbx+244], eax
$LN26@zipOpenNew:

; 1124 : 
; 1125 :     zi->ci.crc32 = 0;
; 1126 :     zi->ci.method = method;
; 1127 :     zi->ci.encrypt = 0;
; 1128 :     zi->ci.stream_initialised = 0;
; 1129 :     zi->ci.pos_in_buffered_data = 0;
; 1130 :     zi->ci.raw = raw;

  00124	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR raw$[rsp]

; 1131 :     zi->ci.pos_local_header = ZTELL64(zi->z_filefunc,zi->filestream);

  0012b	48 8b cb	 mov	 rcx, rbx
  0012e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00132	89 83 fc 00 00
	00		 mov	 DWORD PTR [rbx+252], eax
  00138	48 c7 83 04 01
	01 00 00 00 00
	00		 mov	 QWORD PTR [rbx+65796], 0
  00143	44 89 ab f8 00
	00 00		 mov	 DWORD PTR [rbx+248], r13d
  0014a	48 c7 83 d0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+208], 0
  00155	e8 00 00 00 00	 call	 call_ztell64

; 1132 : 
; 1133 :     zi->ci.size_centralheader = SIZECENTRALHEADER + size_filename + size_extrafield_global + size_comment;

  0015a	44 8b ac 24 b0
	00 00 00	 mov	 r13d, DWORD PTR size_extrafield_global$[rsp]
  00162	48 89 83 d8 00
	00 00		 mov	 QWORD PTR [rbx+216], rax
  00169	8d 46 2e	 lea	 eax, DWORD PTR [rsi+46]
  0016c	03 c5		 add	 eax, ebp

; 1134 :     zi->ci.size_centralExtraFree = 32; // Extra space we have reserved in case we need to add ZIP64 extra info data

  0016e	c7 83 f0 00 00
	00 20 00 00 00	 mov	 DWORD PTR [rbx+240], 32	; 00000020H
  00178	41 03 c5	 add	 eax, r13d
  0017b	89 83 ec 00 00
	00		 mov	 DWORD PTR [rbx+236], eax

; 1135 : 
; 1136 :     zi->ci.central_header = (char*)ALLOC((uInt)zi->ci.size_centralheader + zi->ci.size_centralExtraFree);

  00181	8d 48 20	 lea	 ecx, DWORD PTR [rax+32]
  00184	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 1137 : 
; 1138 :     zi->ci.size_centralExtra = size_extrafield_global;
; 1139 :     zip64local_putValue_inmemory(zi->ci.central_header,(uLong)CENTRALHEADERMAGIC,4);

  0018a	ba 50 4b 01 02	 mov	 edx, 33639248		; 02014b50H
  0018f	44 89 ab e8 00
	00 00		 mov	 DWORD PTR [rbx+232], r13d
  00196	48 8b c8	 mov	 rcx, rax
  00199	48 89 83 e0 00
	00 00		 mov	 QWORD PTR [rbx+224], rax
  001a0	41 b8 04 00 00
	00		 mov	 r8d, 4
  001a6	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1140 :     /* version info */
; 1141 :     zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)versionMadeBy,2);

  001ab	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  001b2	8b 94 24 00 01
	00 00		 mov	 edx, DWORD PTR versionMadeBy$[rsp]
  001b9	49 03 c8	 add	 rcx, r8
  001bc	41 b8 02 00 00
	00		 mov	 r8d, 2
  001c2	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1142 :     zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)20,2);

  001c7	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  001ce	41 8d 50 12	 lea	 edx, QWORD PTR [r8+18]
  001d2	48 83 c1 06	 add	 rcx, 6
  001d6	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1143 :     zip64local_putValue_inmemory(zi->ci.central_header+8,(uLong)zi->ci.flag,2);

  001db	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  001e2	8b 93 f4 00 00
	00		 mov	 edx, DWORD PTR [rbx+244]
  001e8	48 83 c1 08	 add	 rcx, 8
  001ec	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1144 :     zip64local_putValue_inmemory(zi->ci.central_header+10,(uLong)zi->ci.method,2);

  001f1	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  001f8	8b 93 f8 00 00
	00		 mov	 edx, DWORD PTR [rbx+248]
  001fe	48 83 c1 0a	 add	 rcx, 10
  00202	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1145 :     zip64local_putValue_inmemory(zi->ci.central_header+12,(uLong)zi->ci.dosDate,4);

  00207	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0020e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00214	8b 93 00 01 01
	00		 mov	 edx, DWORD PTR [rbx+65792]
  0021a	48 83 c1 0c	 add	 rcx, 12
  0021e	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1146 :     zip64local_putValue_inmemory(zi->ci.central_header+16,(uLong)0,4); /*crc*/

  00223	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0022a	33 d2		 xor	 edx, edx
  0022c	48 83 c1 10	 add	 rcx, 16
  00230	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1147 :     zip64local_putValue_inmemory(zi->ci.central_header+20,(uLong)0,4); /*compr size*/

  00235	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0023c	33 d2		 xor	 edx, edx
  0023e	48 83 c1 14	 add	 rcx, 20
  00242	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1148 :     zip64local_putValue_inmemory(zi->ci.central_header+24,(uLong)0,4); /*uncompr size*/

  00247	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0024e	33 d2		 xor	 edx, edx
  00250	48 83 c1 18	 add	 rcx, 24
  00254	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1149 :     zip64local_putValue_inmemory(zi->ci.central_header+28,(uLong)size_filename,2);

  00259	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00260	41 b8 02 00 00
	00		 mov	 r8d, 2
  00266	48 83 c1 1c	 add	 rcx, 28
  0026a	8b d5		 mov	 edx, ebp
  0026c	44 8b d5	 mov	 r10d, ebp
  0026f	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1150 :     zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)size_extrafield_global,2);

  00274	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0027b	41 8b d5	 mov	 edx, r13d
  0027e	48 83 c1 1e	 add	 rcx, 30
  00282	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1151 :     zip64local_putValue_inmemory(zi->ci.central_header+32,(uLong)size_comment,2);

  00287	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0028e	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00292	8b d6		 mov	 edx, esi
  00294	44 8b de	 mov	 r11d, esi
  00297	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1152 :     zip64local_putValue_inmemory(zi->ci.central_header+34,(uLong)0,2); /*disk nm start*/

  0029c	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  002a3	33 d2		 xor	 edx, edx
  002a5	48 83 c1 22	 add	 rcx, 34			; 00000022H
  002a9	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1153 : 
; 1154 :     if (zipfi==NULL)

  002ae	4d 85 ff	 test	 r15, r15
  002b1	75 04		 jne	 SHORT $LN27@zipOpenNew

; 1155 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)0,2);

  002b3	33 d2		 xor	 edx, edx
  002b5	eb 04		 jmp	 SHORT $LN28@zipOpenNew
$LN27@zipOpenNew:

; 1156 :     else
; 1157 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)zipfi->internal_fa,2);

  002b7	41 8b 57 1c	 mov	 edx, DWORD PTR [r15+28]
$LN28@zipOpenNew:

; 1158 : 
; 1159 :     if (zipfi==NULL)

  002bb	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  002c2	48 83 c1 24	 add	 rcx, 36			; 00000024H
  002c6	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  002cb	4d 85 ff	 test	 r15, r15
  002ce	75 05		 jne	 SHORT $LN29@zipOpenNew

; 1160 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)0,4);

  002d0	49 8b d7	 mov	 rdx, r15
  002d3	eb 07		 jmp	 SHORT $LN30@zipOpenNew
$LN29@zipOpenNew:

; 1161 :     else
; 1162 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)zipfi->external_fa,4);

  002d5	41 8b 57 20	 mov	 edx, DWORD PTR [r15+32]
  002d9	45 33 ff	 xor	 r15d, r15d
$LN30@zipOpenNew:

; 1163 : 
; 1164 :     if(zi->ci.pos_local_header >= 0xffffffff)

  002dc	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  002e3	41 b8 04 00 00
	00		 mov	 r8d, 4
  002e9	48 83 c1 26	 add	 rcx, 38			; 00000026H
  002ed	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  002f2	4c 8b 83 d8 00
	00 00		 mov	 r8, QWORD PTR [rbx+216]
  002f9	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  002fe	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00305	4c 3b c2	 cmp	 r8, rdx
  00308	73 0a		 jae	 SHORT $LN32@zipOpenNew

; 1165 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)0xffffffff,4);
; 1166 :     else
; 1167 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)zi->ci.pos_local_header - zi->add_position_when_writing_offset,4);

  0030a	41 8b d0	 mov	 edx, r8d
  0030d	48 2b 93 50 01
	01 00		 sub	 rdx, QWORD PTR [rbx+65872]
$LN32@zipOpenNew:

; 1168 : 
; 1169 :     for (i=0;i<size_filename;i++)

  00314	48 83 c1 2a	 add	 rcx, 42			; 0000002aH
  00318	41 b8 04 00 00
	00		 mov	 r8d, 4
  0031e	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  00323	85 ed		 test	 ebp, ebp
  00325	48 8b ac 24 80
	00 00 00	 mov	 rbp, QWORD PTR [rsp+128]
  0032d	74 2e		 je	 SHORT $LN3@zipOpenNew
  0032f	49 8b d7	 mov	 rdx, r15
  00332	4d 8b c6	 mov	 r8, r14
  00335	4d 8b ca	 mov	 r9, r10
  00338	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@zipOpenNew:

; 1170 :         *(zi->ci.central_header+SIZECENTRALHEADER+i) = *(filename+i);

  00340	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  00344	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  00348	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0034f	4d 8d 40 01	 lea	 r8, QWORD PTR [r8+1]
  00353	88 44 11 2d	 mov	 BYTE PTR [rcx+rdx+45], al
  00357	49 83 e9 01	 sub	 r9, 1
  0035b	75 e3		 jne	 SHORT $LL4@zipOpenNew
$LN3@zipOpenNew:

; 1171 : 
; 1172 :     for (i=0;i<size_extrafield_global;i++)

  0035d	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR size_extrafield_global$[rsp], 0
  00365	76 39		 jbe	 SHORT $LN53@zipOpenNew
  00367	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR extrafield_global$[rsp]
  0036f	49 8b d7	 mov	 rdx, r15
  00372	4d 8b cd	 mov	 r9, r13
  00375	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL7@zipOpenNew:

; 1173 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+i) =

  00380	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00387	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  0038b	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  0038f	4d 8d 40 01	 lea	 r8, QWORD PTR [r8+1]
  00393	49 03 ca	 add	 rcx, r10
  00396	88 44 11 2d	 mov	 BYTE PTR [rcx+rdx+45], al
  0039a	49 83 e9 01	 sub	 r9, 1
  0039e	75 e0		 jne	 SHORT $LL7@zipOpenNew
$LN53@zipOpenNew:

; 1174 :               *(((const char*)extrafield_global)+i);
; 1175 : 
; 1176 :     for (i=0;i<size_comment;i++)

  003a0	85 f6		 test	 esi, esi
  003a2	74 2c		 je	 SHORT $LN9@zipOpenNew
  003a4	49 8b d7	 mov	 rdx, r15
  003a7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL10@zipOpenNew:

; 1177 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+
; 1178 :               size_extrafield_global+i) = *(comment+i);

  003b0	0f b6 07	 movzx	 eax, BYTE PTR [rdi]
  003b3	4b 8d 0c 2a	 lea	 rcx, QWORD PTR [r10+r13]
  003b7	48 03 8b e0 00
	00 00		 add	 rcx, QWORD PTR [rbx+224]
  003be	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  003c2	48 8d 7f 01	 lea	 rdi, QWORD PTR [rdi+1]
  003c6	88 44 11 2d	 mov	 BYTE PTR [rcx+rdx+45], al
  003ca	49 83 eb 01	 sub	 r11, 1
  003ce	75 e0		 jne	 SHORT $LL10@zipOpenNew
$LN9@zipOpenNew:

; 1179 :     if (zi->ci.central_header == NULL)

  003d0	48 83 bb e0 00
	00 00 00	 cmp	 QWORD PTR [rbx+224], 0
  003d8	75 25		 jne	 SHORT $LN33@zipOpenNew

; 1180 :         return ZIP_INTERNALERROR;

  003da	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
$LN64@zipOpenNew:
  003df	4c 8b a4 24 90
	00 00 00	 mov	 r12, QWORD PTR [rsp+144]
  003e7	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR [rsp+136]
  003ef	4c 8b 74 24 50	 mov	 r14, QWORD PTR [rsp+80]
$LN1@zipOpenNew:

; 1263 : }

  003f4	48 83 c4 58	 add	 rsp, 88			; 00000058H
  003f8	41 5f		 pop	 r15
  003fa	41 5d		 pop	 r13
  003fc	5f		 pop	 rdi
  003fd	5b		 pop	 rbx
  003fe	c3		 ret	 0
$LN33@zipOpenNew:

; 1181 : 
; 1182 :     zi->ci.zip64 = zip64;

  003ff	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]

; 1183 :     zi->ci.totalCompressedData = 0;
; 1184 :     zi->ci.totalUncompressedData = 0;
; 1185 :     zi->ci.pos_zip64extrainfo = 0;
; 1186 : 
; 1187 :     err = Write_LocalFileHeader(zi, filename, size_extrafield_local, extrafield_local);

  00406	49 8b d6	 mov	 rdx, r14
  00409	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  00411	48 8b cb	 mov	 rcx, rbx
  00414	44 8b 84 24 a0
	00 00 00	 mov	 r8d, DWORD PTR size_extrafield_local$[rsp]
  0041c	89 83 0c 01 01
	00		 mov	 DWORD PTR [rbx+65804], eax
  00422	4c 89 bb 18 01
	01 00		 mov	 QWORD PTR [rbx+65816], r15
  00429	4c 89 bb 20 01
	01 00		 mov	 QWORD PTR [rbx+65824], r15
  00430	4c 89 bb 10 01
	01 00		 mov	 QWORD PTR [rbx+65808], r15
  00437	e8 00 00 00 00	 call	 Write_LocalFileHeader

; 1188 : 
; 1189 : #ifdef HAVE_BZIP2
; 1190 :     zi->ci.bstream.avail_in = (uInt)0;
; 1191 :     zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1192 :     zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1193 :     zi->ci.bstream.total_in_hi32 = 0;
; 1194 :     zi->ci.bstream.total_in_lo32 = 0;
; 1195 :     zi->ci.bstream.total_out_hi32 = 0;
; 1196 :     zi->ci.bstream.total_out_lo32 = 0;
; 1197 : #endif
; 1198 : 
; 1199 :     zi->ci.stream.avail_in = (uInt)0;

  0043c	48 c7 83 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+128], 0

; 1200 :     zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
; 1201 :     zi->ci.stream.next_out = zi->ci.buffered_data;

  00447	48 8d 8b 00 01
	00 00		 lea	 rcx, QWORD PTR [rbx+256]
  0044e	48 89 8b 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rcx
  00455	8b f0		 mov	 esi, eax
  00457	48 c7 83 90 00
	00 00 00 00 01
	00		 mov	 QWORD PTR [rbx+144], 65536 ; 00010000H

; 1202 :     zi->ci.stream.total_in = 0;
; 1203 :     zi->ci.stream.total_out = 0;
; 1204 :     zi->ci.stream.data_type = Z_BINARY;

  00462	44 89 bb c0 00
	00 00		 mov	 DWORD PTR [rbx+192], r15d

; 1205 : 
; 1206 : #ifdef HAVE_BZIP2
; 1207 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED || zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1208 : #else
; 1209 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00469	85 c0		 test	 eax, eax
  0046b	0f 85 84 00 00
	00		 jne	 $LN38@zipOpenNew
  00471	83 bb f8 00 00
	00 08		 cmp	 DWORD PTR [rbx+248], 8
  00478	75 7b		 jne	 SHORT $LN38@zipOpenNew
  0047a	39 83 fc 00 00
	00		 cmp	 DWORD PTR [rbx+252], eax
  00480	75 73		 jne	 SHORT $LN38@zipOpenNew

; 1210 : #endif
; 1211 :     {
; 1212 :         if(zi->ci.method == Z_DEFLATED)
; 1213 :         {
; 1214 :           zi->ci.stream.zalloc = (alloc_func)0;
; 1215 :           zi->ci.stream.zfree = (free_func)0;
; 1216 :           zi->ci.stream.opaque = (voidpf)0;
; 1217 : 
; 1218 :           if (windowBits>0)
; 1219 :               windowBits = -windowBits;
; 1220 : 
; 1221 :           err = deflateInit2(&zi->ci.stream, level, Z_DEFLATED, windowBits, memLevel, strategy);

  00482	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  00489	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  0048d	99		 cdq
  0048e	c7 44 24 38 58
	00 00 00	 mov	 DWORD PTR [rsp+56], 88	; 00000058H
  00496	44 8b c8	 mov	 r9d, eax
  00499	4c 89 bb a8 00
	00 00		 mov	 QWORD PTR [rbx+168], r15
  004a0	44 33 ca	 xor	 r9d, edx
  004a3	4c 89 bb b0 00
	00 00		 mov	 QWORD PTR [rbx+176], r15
  004aa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06CJNJFBNP@1?42?411@
  004b1	4c 89 bb b8 00
	00 00		 mov	 QWORD PTR [rbx+184], r15
  004b8	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  004bd	44 8d 46 08	 lea	 r8d, QWORD PTR [rsi+8]
  004c1	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  004c8	44 2b ca	 sub	 r9d, edx
  004cb	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  004cf	41 f7 d9	 neg	 r9d
  004d2	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  004d9	41 8b d4	 mov	 edx, r12d
  004dc	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  004e0	e8 00 00 00 00	 call	 deflateInit2_
  004e5	8b f0		 mov	 esi, eax

; 1222 : 
; 1223 :           if (err==Z_OK)

  004e7	85 c0		 test	 eax, eax
  004e9	75 0a		 jne	 SHORT $LN38@zipOpenNew

; 1224 :               zi->ci.stream_initialised = Z_DEFLATED;

  004eb	c7 83 d0 00 00
	00 08 00 00 00	 mov	 DWORD PTR [rbx+208], 8
$LN38@zipOpenNew:

; 1225 :         }
; 1226 :         else if(zi->ci.method == Z_BZIP2ED)
; 1227 :         {
; 1228 : #ifdef HAVE_BZIP2
; 1229 :             // Init BZip stuff here
; 1230 :           zi->ci.bstream.bzalloc = 0;
; 1231 :           zi->ci.bstream.bzfree = 0;
; 1232 :           zi->ci.bstream.opaque = (voidpf)0;
; 1233 : 
; 1234 :           err = BZ2_bzCompressInit(&zi->ci.bstream, level, 0,35);
; 1235 :           if(err == BZ_OK)
; 1236 :             zi->ci.stream_initialised = Z_BZIP2ED;
; 1237 : #endif
; 1238 :         }
; 1239 : 
; 1240 :     }
; 1241 : 
; 1242 : #    ifndef NOCRYPT
; 1243 :     zi->ci.crypt_header_size = 0;

  004f5	44 89 bb 40 01
	01 00		 mov	 DWORD PTR [rbx+65856], r15d

; 1244 :     if ((err==Z_OK) && (password != NULL))

  004fc	85 f6		 test	 esi, esi
  004fe	75 79		 jne	 SHORT $LN42@zipOpenNew
  00500	48 8b bc 24 f0
	00 00 00	 mov	 rdi, QWORD PTR password$[rsp]
  00508	48 85 ff	 test	 rdi, rdi
  0050b	74 65		 je	 SHORT $LN57@zipOpenNew

; 1245 :     {
; 1246 :         unsigned char bufHead[RAND_HEAD_LEN];
; 1247 :         unsigned int sizeHead;
; 1248 :         zi->ci.encrypt = 1;

  0050d	c7 83 08 01 01
	00 01 00 00 00	 mov	 DWORD PTR [rbx+65800], 1

; 1249 :         zi->ci.pcrc_32_tab = get_crc_table();

  00517	e8 00 00 00 00	 call	 get_crc_table

; 1250 :         /*init_keys(password,zi->ci.keys,zi->ci.pcrc_32_tab);*/
; 1251 : 
; 1252 :         sizeHead=crypthead(password,bufHead,RAND_HEAD_LEN,zi->ci.keys,zi->ci.pcrc_32_tab,crcForCrypting);

  0051c	8b 94 24 f8 00
	00 00		 mov	 edx, DWORD PTR crcForCrypting$[rsp]
  00523	4c 8d 8b 28 01
	01 00		 lea	 r9, QWORD PTR [rbx+65832]
  0052a	89 54 24 28	 mov	 DWORD PTR [rsp+40], edx
  0052e	48 8b cf	 mov	 rcx, rdi
  00531	48 8d 54 24 40	 lea	 rdx, QWORD PTR bufHead$1[rsp]
  00536	48 89 83 38 01
	01 00		 mov	 QWORD PTR [rbx+65848], rax
  0053d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00542	e8 00 00 00 00	 call	 crypthead

; 1253 :         zi->ci.crypt_header_size = sizeHead;
; 1254 : 
; 1255 :         if (ZWRITE64(zi->z_filefunc,zi->filestream,bufHead,sizeHead) != sizeHead)

  00547	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0054b	4c 8d 44 24 40	 lea	 r8, QWORD PTR bufHead$1[rsp]
  00550	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00554	44 8b c8	 mov	 r9d, eax
  00557	8b f8		 mov	 edi, eax
  00559	89 83 40 01 01
	00		 mov	 DWORD PTR [rbx+65856], eax
  0055f	ff 53 10	 call	 QWORD PTR [rbx+16]
  00562	3b c7		 cmp	 eax, edi
  00564	74 0c		 je	 SHORT $LN57@zipOpenNew

; 1256 :                 err = ZIP_ERRNO;

  00566	be ff ff ff ff	 mov	 esi, -1

; 1262 :     return err;

  0056b	8b c6		 mov	 eax, esi
  0056d	e9 6d fe ff ff	 jmp	 $LN64@zipOpenNew
$LN57@zipOpenNew:

; 1257 :     }
; 1258 : #    endif
; 1259 : 
; 1260 :     if (err==Z_OK)
; 1261 :         zi->in_opened_file_inzip = 1;

  00572	c7 43 70 01 00
	00 00		 mov	 DWORD PTR [rbx+112], 1
$LN42@zipOpenNew:

; 1262 :     return err;

  00579	8b c6		 mov	 eax, esi
  0057b	e9 5f fe ff ff	 jmp	 $LN64@zipOpenNew
$LN58@zipOpenNew:

; 1083 :       return ZIP_PARAMERROR;

  00580	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1263 : }

  00585	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00589	41 5f		 pop	 r15
  0058b	41 5d		 pop	 r13
  0058d	5f		 pop	 rdi
  0058e	5b		 pop	 rbx
  0058f	c3		 ret	 0
zipOpenNewFileInZip4_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip3
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
windowBits$ = 264
memLevel$ = 272
strategy$ = 280
password$ = 288
crcForCrypting$ = 296
zipOpenNewFileInZip3 PROC				; COMDAT

; 1287 : {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1288 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0000a	33 c0		 xor	 eax, eax
  0000c	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00010	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  00014	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  00018	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  0001f	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  00023	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR password$[rsp]
  0002b	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  0002f	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  00036	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  0003a	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  00041	89 44 24 60	 mov	 DWORD PTR [rsp+96], eax
  00045	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  0004c	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  00050	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  00057	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  0005b	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00062	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00066	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  0006d	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00071	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  00079	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  0007d	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00084	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00088	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  00090	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  00094	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  0009b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0009f	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1289 :                                  extrafield_local, size_extrafield_local,
; 1290 :                                  extrafield_global, size_extrafield_global,
; 1291 :                                  comment, method, level, raw,
; 1292 :                                  windowBits, memLevel, strategy,
; 1293 :                                  password, crcForCrypting, VERSIONMADEBY, 0, 0);
; 1294 : }

  000a4	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000ab	c3		 ret	 0
zipOpenNewFileInZip3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip3_64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
windowBits$ = 264
memLevel$ = 272
strategy$ = 280
password$ = 288
crcForCrypting$ = 296
zip64$ = 304
zipOpenNewFileInZip3_64 PROC				; COMDAT

; 1302 : {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1303 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0000a	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00011	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00015	33 c0		 xor	 eax, eax
  00017	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  0001b	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  0001f	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  00026	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  0002a	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR password$[rsp]
  00032	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00036	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  0003d	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  00041	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  00048	89 44 24 60	 mov	 DWORD PTR [rsp+96], eax
  0004c	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  00053	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  00057	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  0005e	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00062	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00069	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0006d	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00074	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00078	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  00080	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  00084	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  0008b	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0008f	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  00097	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  0009b	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000a2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a6	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1304 :                                  extrafield_local, size_extrafield_local,
; 1305 :                                  extrafield_global, size_extrafield_global,
; 1306 :                                  comment, method, level, raw,
; 1307 :                                  windowBits, memLevel, strategy,
; 1308 :                                  password, crcForCrypting, VERSIONMADEBY, 0, zip64);
; 1309 : }

  000ab	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000b2	c3		 ret	 0
zipOpenNewFileInZip3_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip2
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
zipOpenNewFileInZip2 PROC				; COMDAT

; 1315 : {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1316 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0000a	33 c0		 xor	 eax, eax
  0000c	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00010	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  00014	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  00018	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  0001c	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00020	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  00024	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  0002b	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  00033	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  0003b	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  0003f	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00046	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0004a	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00051	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00055	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  0005d	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  00061	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00068	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0006c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  00074	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  00078	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  0007f	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00083	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1317 :                                  extrafield_local, size_extrafield_local,
; 1318 :                                  extrafield_global, size_extrafield_global,
; 1319 :                                  comment, method, level, raw,
; 1320 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1321 :                                  NULL, 0, VERSIONMADEBY, 0, 0);
; 1322 : }

  00088	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0008f	c3		 ret	 0
zipOpenNewFileInZip2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip2_64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
zip64$ = 264
zipOpenNewFileInZip2_64 PROC				; COMDAT

; 1328 : {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1329 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0000a	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00011	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00015	33 c0		 xor	 eax, eax
  00017	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  0001b	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  0001f	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  00023	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00027	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  0002b	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  00032	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  0003a	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  00042	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00046	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  0004d	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00051	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00058	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0005c	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  00064	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  00068	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  0006f	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00073	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  0007b	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  0007f	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  00086	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0008a	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1330 :                                  extrafield_local, size_extrafield_local,
; 1331 :                                  extrafield_global, size_extrafield_global,
; 1332 :                                  comment, method, level, raw,
; 1333 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1334 :                                  NULL, 0, VERSIONMADEBY, 0, zip64);
; 1335 : }

  0008f	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00096	c3		 ret	 0
zipOpenNewFileInZip2_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
zip64$ = 256
zipOpenNewFileInZip64 PROC				; COMDAT

; 1341 : {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1342 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0000a	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00011	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00015	33 c0		 xor	 eax, eax
  00017	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  0001b	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  0001f	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  00023	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00027	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  0002b	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  00033	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  0003b	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  0003f	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00046	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0004a	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00051	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00055	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  0005d	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  00061	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00068	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0006c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  00074	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  00078	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  0007f	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00083	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1343 :                                  extrafield_local, size_extrafield_local,
; 1344 :                                  extrafield_global, size_extrafield_global,
; 1345 :                                  comment, method, level, 0,
; 1346 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1347 :                                  NULL, 0, VERSIONMADEBY, 0, zip64);
; 1348 : }

  00088	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0008f	c3		 ret	 0
zipOpenNewFileInZip64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
zipOpenNewFileInZip PROC				; COMDAT

; 1354 : {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1355 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,

  0000a	33 c0		 xor	 eax, eax
  0000c	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00010	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  00014	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  00018	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  0001c	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00020	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  00024	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  0002c	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  00034	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00038	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  0003f	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00043	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  0004a	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0004e	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  00056	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  0005a	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00061	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00065	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  0006d	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  00071	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1356 :                                  extrafield_local, size_extrafield_local,
; 1357 :                                  extrafield_global, size_extrafield_global,
; 1358 :                                  comment, method, level, 0,
; 1359 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1360 :                                  NULL, 0, VERSIONMADEBY, 0, 0);
; 1361 : }

  00081	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00088	c3		 ret	 0
zipOpenNewFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zip64FlushWriteBuffer
_TEXT	SEGMENT
zi$ = 48
zip64FlushWriteBuffer PROC				; COMDAT

; 1364 : {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1365 :     int err=ZIP_OK;
; 1366 : 
; 1367 :     if (zi->ci.encrypt != 0)

  0000a	83 b9 08 01 01
	00 00		 cmp	 DWORD PTR [rcx+65800], 0
  00011	48 8b d9	 mov	 rbx, rcx
  00014	74 65		 je	 SHORT $LN3@zip64Flush

; 1368 :     {
; 1369 : #ifndef NOCRYPT
; 1370 :         uInt i;
; 1371 :         int t;
; 1372 :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  00016	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  0001b	33 ed		 xor	 ebp, ebp
  0001d	39 a9 d4 00 00
	00		 cmp	 DWORD PTR [rcx+212], ebp
  00023	76 51		 jbe	 SHORT $LN12@zip64Flush
  00025	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0002a	4c 89 74 24 40	 mov	 QWORD PTR [rsp+64], r14
  0002f	90		 npad	 1
$LL4@zip64Flush:

; 1373 :             zi->ci.buffered_data[i] = zencode(zi->ci.keys, zi->ci.pcrc_32_tab, zi->ci.buffered_data[i],t);

  00030	48 8d 8b 28 01
	01 00		 lea	 rcx, QWORD PTR [rbx+65832]
  00037	e8 00 00 00 00	 call	 decrypt_byte
  0003c	48 8b 93 38 01
	01 00		 mov	 rdx, QWORD PTR [rbx+65848]
  00043	48 8d 8b 28 01
	01 00		 lea	 rcx, QWORD PTR [rbx+65832]
  0004a	44 0f b6 84 1d
	00 01 00 00	 movzx	 r8d, BYTE PTR [rbp+rbx+256]
  00053	8b f0		 mov	 esi, eax
  00055	e8 00 00 00 00	 call	 update_keys
  0005a	40 30 b4 1d 00
	01 00 00	 xor	 BYTE PTR [rbp+rbx+256], sil
  00062	ff c5		 inc	 ebp
  00064	3b ab d4 00 00
	00		 cmp	 ebp, DWORD PTR [rbx+212]
  0006a	72 c4		 jb	 SHORT $LL4@zip64Flush

; 1368 :     {
; 1369 : #ifndef NOCRYPT
; 1370 :         uInt i;
; 1371 :         int t;
; 1372 :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  0006c	4c 8b 74 24 40	 mov	 r14, QWORD PTR [rsp+64]
  00071	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
$LN12@zip64Flush:
  00076	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
$LN3@zip64Flush:

; 1374 : #endif
; 1375 :     }
; 1376 : 
; 1377 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,zi->ci.buffered_data,zi->ci.pos_in_buffered_data) != zi->ci.pos_in_buffered_data)

  0007b	44 8b 8b d4 00
	00 00		 mov	 r9d, DWORD PTR [rbx+212]
  00082	4c 8d 83 00 01
	00 00		 lea	 r8, QWORD PTR [rbx+256]
  00089	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0008d	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00091	8b bb d4 00 00
	00		 mov	 edi, DWORD PTR [rbx+212]
  00097	ff 53 10	 call	 QWORD PTR [rbx+16]
  0009a	33 d2		 xor	 edx, edx

; 1378 :       err = ZIP_ERRNO;
; 1379 : 
; 1380 :     zi->ci.totalCompressedData += zi->ci.pos_in_buffered_data;
; 1381 : 
; 1382 : #ifdef HAVE_BZIP2
; 1383 :     if(zi->ci.method == Z_BZIP2ED)
; 1384 :     {
; 1385 :       zi->ci.totalUncompressedData += zi->ci.bstream.total_in_lo32;
; 1386 :       zi->ci.bstream.total_in_lo32 = 0;
; 1387 :       zi->ci.bstream.total_in_hi32 = 0;
; 1388 :     }
; 1389 :     else
; 1390 : #endif
; 1391 :     {
; 1392 :       zi->ci.totalUncompressedData += zi->ci.stream.total_in;
; 1393 :       zi->ci.stream.total_in = 0;
; 1394 :     }
; 1395 : 
; 1396 : 
; 1397 :     zi->ci.pos_in_buffered_data = 0;

  0009c	c7 83 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbx+212], 0
  000a6	3b c7		 cmp	 eax, edi
  000a8	b9 ff ff ff ff	 mov	 ecx, -1
  000ad	0f 45 d1	 cmovne	 edx, ecx
  000b0	8b 8b 84 00 00
	00		 mov	 ecx, DWORD PTR [rbx+132]
  000b6	48 01 bb 18 01
	01 00		 add	 QWORD PTR [rbx+65816], rdi

; 1398 : 
; 1399 :     return err;

  000bd	8b c2		 mov	 eax, edx
  000bf	48 01 8b 20 01
	01 00		 add	 QWORD PTR [rbx+65824], rcx
  000c6	c7 83 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbx+132], 0

; 1400 : }

  000d0	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000d5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d9	5f		 pop	 rdi
  000da	c3		 ret	 0
zip64FlushWriteBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipWriteInFileInZip
_TEXT	SEGMENT
file$ = 48
buf$ = 56
len$ = 64
zipWriteInFileInZip PROC				; COMDAT

; 1403 : {

$LN30:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1404 :     zip64_internal* zi;
; 1405 :     int err=ZIP_OK;

  00014	33 f6		 xor	 esi, esi
  00016	41 8b f8	 mov	 edi, r8d
  00019	48 8b ea	 mov	 rbp, rdx
  0001c	48 8b d9	 mov	 rbx, rcx

; 1406 : 
; 1407 :     if (file == NULL)

  0001f	48 85 c9	 test	 rcx, rcx
  00022	0f 84 2a 01 00
	00		 je	 $LN27@zipWriteIn

; 1408 :         return ZIP_PARAMERROR;
; 1409 :     zi = (zip64_internal*)file;
; 1410 : 
; 1411 :     if (zi->in_opened_file_inzip == 0)

  00028	39 71 70	 cmp	 DWORD PTR [rcx+112], esi
  0002b	0f 84 21 01 00
	00		 je	 $LN27@zipWriteIn

; 1413 : 
; 1414 :     zi->ci.crc32 = crc32(zi->ci.crc32,buf,(uInt)len);

  00031	8b 89 04 01 01
	00		 mov	 ecx, DWORD PTR [rcx+65796]
  00037	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  0003c	e8 00 00 00 00	 call	 crc32

; 1415 : 
; 1416 : #ifdef HAVE_BZIP2
; 1417 :     if(zi->ci.method == Z_BZIP2ED && (!zi->ci.raw))
; 1418 :     {
; 1419 :       zi->ci.bstream.next_in = (void*)buf;
; 1420 :       zi->ci.bstream.avail_in = len;
; 1421 :       err = BZ_RUN_OK;
; 1422 : 
; 1423 :       while ((err==BZ_RUN_OK) && (zi->ci.bstream.avail_in>0))
; 1424 :       {
; 1425 :         if (zi->ci.bstream.avail_out == 0)
; 1426 :         {
; 1427 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1428 :             err = ZIP_ERRNO;
; 1429 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1430 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1431 :         }
; 1432 : 
; 1433 : 
; 1434 :         if(err != BZ_RUN_OK)
; 1435 :           break;
; 1436 : 
; 1437 :         if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1438 :         {
; 1439 :           uLong uTotalOutBefore_lo = zi->ci.bstream.total_out_lo32;
; 1440 : //          uLong uTotalOutBefore_hi = zi->ci.bstream.total_out_hi32;
; 1441 :           err=BZ2_bzCompress(&zi->ci.bstream,  BZ_RUN);
; 1442 : 
; 1443 :           zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore_lo) ;
; 1444 :         }
; 1445 :       }
; 1446 : 
; 1447 :       if(err == BZ_RUN_OK)
; 1448 :         err = ZIP_OK;
; 1449 :     }
; 1450 :     else
; 1451 : #endif
; 1452 :     {
; 1453 :       zi->ci.stream.next_in = (Bytef*)buf;

  00041	48 89 6b 78	 mov	 QWORD PTR [rbx+120], rbp

; 1454 :       zi->ci.stream.avail_in = len;

  00045	8d 6e ff	 lea	 ebp, QWORD PTR [rsi-1]
  00048	89 83 04 01 01
	00		 mov	 DWORD PTR [rbx+65796], eax
  0004e	89 bb 80 00 00
	00		 mov	 DWORD PTR [rbx+128], edi
$LL2@zipWriteIn:

; 1455 : 
; 1456 :       while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  00054	83 bb 80 00 00
	00 00		 cmp	 DWORD PTR [rbx+128], 0
  0005b	76 6e		 jbe	 SHORT $LN28@zipWriteIn

; 1457 :       {
; 1458 :           if (zi->ci.stream.avail_out == 0)

  0005d	8b 83 90 00 00
	00		 mov	 eax, DWORD PTR [rbx+144]
  00063	85 c0		 test	 eax, eax
  00065	75 2a		 jne	 SHORT $LN24@zipWriteIn

; 1459 :           {
; 1460 :               if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  00067	48 8b cb	 mov	 rcx, rbx
  0006a	e8 00 00 00 00	 call	 zip64FlushWriteBuffer
  0006f	3b c5		 cmp	 eax, ebp

; 1461 :                   err = ZIP_ERRNO;
; 1462 :               zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  00071	c7 83 90 00 00
	00 00 00 01 00	 mov	 DWORD PTR [rbx+144], 65536 ; 00010000H

; 1463 :               zi->ci.stream.next_out = zi->ci.buffered_data;

  0007b	48 8d 83 00 01
	00 00		 lea	 rax, QWORD PTR [rbx+256]
  00082	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax
  00089	0f 44 f5	 cmove	 esi, ebp
  0008c	b8 00 00 01 00	 mov	 eax, 65536		; 00010000H
$LN24@zipWriteIn:

; 1464 :           }
; 1465 : 
; 1466 : 
; 1467 :           if(err != ZIP_OK)

  00091	85 f6		 test	 esi, esi
  00093	75 36		 jne	 SHORT $LN28@zipWriteIn

; 1468 :               break;
; 1469 : 
; 1470 :           if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00095	83 bb f8 00 00
	00 08		 cmp	 DWORD PTR [rbx+248], 8
  0009c	75 39		 jne	 SHORT $LN12@zipWriteIn
  0009e	39 b3 fc 00 00
	00		 cmp	 DWORD PTR [rbx+252], esi
  000a4	75 31		 jne	 SHORT $LN12@zipWriteIn

; 1471 :           {
; 1472 :               uLong uTotalOutBefore = zi->ci.stream.total_out;

  000a6	8b bb 94 00 00
	00		 mov	 edi, DWORD PTR [rbx+148]

; 1473 :               err=deflate(&zi->ci.stream,  Z_NO_FLUSH);

  000ac	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  000b0	33 d2		 xor	 edx, edx
  000b2	e8 00 00 00 00	 call	 deflate

; 1474 :               if(uTotalOutBefore > zi->ci.stream.total_out)
; 1475 :               {
; 1476 :                 int bBreak = 0;
; 1477 :                 bBreak++;
; 1478 :               }
; 1479 : 
; 1480 :               zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  000b7	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  000bd	8b f0		 mov	 esi, eax
  000bf	2b cf		 sub	 ecx, edi
  000c1	01 8b d4 00 00
	00		 add	 DWORD PTR [rbx+212], ecx
  000c7	85 c0		 test	 eax, eax
  000c9	74 89		 je	 SHORT $LL2@zipWriteIn
$LN28@zipWriteIn:

; 1501 :               }
; 1502 :           }
; 1503 :       }// while(...)
; 1504 :     }
; 1505 : 
; 1506 :     return err;

  000cb	4c 8b 74 24 30	 mov	 r14, QWORD PTR [rsp+48]
  000d0	8b c6		 mov	 eax, esi
  000d2	e9 80 00 00 00	 jmp	 $LN1@zipWriteIn
$LN12@zipWriteIn:

; 1481 :           }
; 1482 :           else
; 1483 :           {
; 1484 :               uInt copy_this,i;
; 1485 :               if (zi->ci.stream.avail_in < zi->ci.stream.avail_out)

  000d7	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]

; 1486 :                   copy_this = zi->ci.stream.avail_in;
; 1487 :               else
; 1488 :                   copy_this = zi->ci.stream.avail_out;
; 1489 : 
; 1490 :               for (i = 0; i < copy_this; i++)

  000dd	3b c8		 cmp	 ecx, eax
  000df	44 8b c9	 mov	 r9d, ecx
  000e2	44 0f 43 c8	 cmovae	 r9d, eax
  000e6	45 33 c0	 xor	 r8d, r8d
  000e9	45 85 c9	 test	 r9d, r9d
  000ec	74 2a		 je	 SHORT $LN5@zipWriteIn
  000ee	66 90		 npad	 2
$LL6@zipWriteIn:

; 1491 :                   *(((char*)zi->ci.stream.next_out)+i) =

  000f0	48 8b 43 78	 mov	 rax, QWORD PTR [rbx+120]
  000f4	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  000fb	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  00100	41 88 04 08	 mov	 BYTE PTR [r8+rcx], al
  00104	41 ff c0	 inc	 r8d
  00107	45 3b c1	 cmp	 r8d, r9d
  0010a	72 e4		 jb	 SHORT $LL6@zipWriteIn

; 1463 :               zi->ci.stream.next_out = zi->ci.buffered_data;

  0010c	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  00112	8b 83 90 00 00
	00		 mov	 eax, DWORD PTR [rbx+144]
$LN5@zipWriteIn:

; 1492 :                       *(((const char*)zi->ci.stream.next_in)+i);
; 1493 :               {
; 1494 :                   zi->ci.stream.avail_in -= copy_this;
; 1495 :                   zi->ci.stream.avail_out-= copy_this;
; 1496 :                   zi->ci.stream.next_in+= copy_this;
; 1497 :                   zi->ci.stream.next_out+= copy_this;
; 1498 :                   zi->ci.stream.total_in+= copy_this;

  00118	44 01 8b 84 00
	00 00		 add	 DWORD PTR [rbx+132], r9d
  0011f	41 2b c1	 sub	 eax, r9d

; 1499 :                   zi->ci.stream.total_out+= copy_this;

  00122	44 01 8b 94 00
	00 00		 add	 DWORD PTR [rbx+148], r9d
  00129	41 2b c9	 sub	 ecx, r9d
  0012c	89 83 90 00 00
	00		 mov	 DWORD PTR [rbx+144], eax
  00132	41 8b c1	 mov	 eax, r9d
  00135	48 01 43 78	 add	 QWORD PTR [rbx+120], rax
  00139	48 01 83 88 00
	00 00		 add	 QWORD PTR [rbx+136], rax

; 1500 :                   zi->ci.pos_in_buffered_data += copy_this;

  00140	44 01 8b d4 00
	00 00		 add	 DWORD PTR [rbx+212], r9d
  00147	89 8b 80 00 00
	00		 mov	 DWORD PTR [rbx+128], ecx
  0014d	e9 02 ff ff ff	 jmp	 $LL2@zipWriteIn
$LN27@zipWriteIn:

; 1412 :         return ZIP_PARAMERROR;

  00152	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
$LN1@zipWriteIn:

; 1507 : }

  00157	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0015c	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00161	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00166	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0016a	5f		 pop	 rdi
  0016b	c3		 ret	 0
zipWriteInFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipCloseFileInZipRaw
_TEXT	SEGMENT
file$ = 8
uncompressed_size$ = 16
crc32$ = 24
zipCloseFileInZipRaw PROC				; COMDAT

; 1511 :     return zipCloseFileInZipRaw64 (file, uncompressed_size, crc32);

  00000	8b d2		 mov	 edx, edx
  00002	e9 00 00 00 00	 jmp	 zipCloseFileInZipRaw64
zipCloseFileInZipRaw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipCloseFileInZipRaw64
_TEXT	SEGMENT
file$ = 80
uncompressed_size$ = 88
crc32$ = 96
zipCloseFileInZipRaw64 PROC				; COMDAT

; 1515 : {

$LN62:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	41 55		 push	 r13
  00005	41 56		 push	 r14
  00007	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1516 :     zip64_internal* zi;
; 1517 :     ZPOS64_T compressed_size;
; 1518 :     uLong invalidValue = 0xffffffff;
; 1519 :     short datasize = 0;
; 1520 :     int err=ZIP_OK;

  0000b	45 33 ed	 xor	 r13d, r13d
  0000e	45 8b f0	 mov	 r14d, r8d
  00011	48 8b ea	 mov	 rbp, rdx
  00014	48 8b d9	 mov	 rbx, rcx
  00017	41 8b c5	 mov	 eax, r13d

; 1521 : 
; 1522 :     if (file == NULL)

  0001a	48 85 c9	 test	 rcx, rcx
  0001d	0f 84 34 04 00
	00		 je	 $LN55@zipCloseFi

; 1523 :         return ZIP_PARAMERROR;
; 1524 :     zi = (zip64_internal*)file;
; 1525 : 
; 1526 :     if (zi->in_opened_file_inzip == 0)

  00023	39 41 70	 cmp	 DWORD PTR [rcx+112], eax
  00026	0f 84 2b 04 00
	00		 je	 $LN55@zipCloseFi

; 1528 :     zi->ci.stream.avail_in = 0;
; 1529 : 
; 1530 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  0002c	83 b9 f8 00 00
	00 08		 cmp	 DWORD PTR [rcx+248], 8
  00033	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00038	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  0003d	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  00042	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00047	44 89 a9 80 00
	00 00		 mov	 DWORD PTR [rcx+128], r13d
  0004e	75 5f		 jne	 SHORT $LN3@zipCloseFi
  00050	39 81 fc 00 00
	00		 cmp	 DWORD PTR [rcx+252], eax
  00056	75 57		 jne	 SHORT $LN3@zipCloseFi
  00058	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@zipCloseFi:

; 1531 :                 {
; 1532 :                         while (err==ZIP_OK)
; 1533 :                         {
; 1534 :                                 uLong uTotalOutBefore;
; 1535 :                                 if (zi->ci.stream.avail_out == 0)

  00060	44 39 ab 90 00
	00 00		 cmp	 DWORD PTR [rbx+144], r13d
  00067	75 20		 jne	 SHORT $LN54@zipCloseFi

; 1536 :                                 {
; 1537 :                                         if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  00069	48 8b cb	 mov	 rcx, rbx
  0006c	e8 00 00 00 00	 call	 zip64FlushWriteBuffer

; 1538 :                                                 err = ZIP_ERRNO;
; 1539 :                                         zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
; 1540 :                                         zi->ci.stream.next_out = zi->ci.buffered_data;

  00071	48 8d 83 00 01
	00 00		 lea	 rax, QWORD PTR [rbx+256]
  00078	c7 83 90 00 00
	00 00 00 01 00	 mov	 DWORD PTR [rbx+144], 65536 ; 00010000H
  00082	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax
$LN54@zipCloseFi:

; 1541 :                                 }
; 1542 :                                 uTotalOutBefore = zi->ci.stream.total_out;

  00089	8b bb 94 00 00
	00		 mov	 edi, DWORD PTR [rbx+148]

; 1543 :                                 err=deflate(&zi->ci.stream,  Z_FINISH);

  0008f	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  00093	ba 04 00 00 00	 mov	 edx, 4
  00098	e8 00 00 00 00	 call	 deflate

; 1544 :                                 zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  0009d	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  000a3	2b cf		 sub	 ecx, edi
  000a5	01 8b d4 00 00
	00		 add	 DWORD PTR [rbx+212], ecx
  000ab	85 c0		 test	 eax, eax
  000ad	74 b1		 je	 SHORT $LL2@zipCloseFi
$LN3@zipCloseFi:

; 1545 :                         }
; 1546 :                 }
; 1547 :     else if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1548 :     {
; 1549 : #ifdef HAVE_BZIP2
; 1550 :       err = BZ_FINISH_OK;
; 1551 :       while (err==BZ_FINISH_OK)
; 1552 :       {
; 1553 :         uLong uTotalOutBefore;
; 1554 :         if (zi->ci.bstream.avail_out == 0)
; 1555 :         {
; 1556 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1557 :             err = ZIP_ERRNO;
; 1558 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1559 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1560 :         }
; 1561 :         uTotalOutBefore = zi->ci.bstream.total_out_lo32;
; 1562 :         err=BZ2_bzCompress(&zi->ci.bstream,  BZ_FINISH);
; 1563 :         if(err == BZ_STREAM_END)
; 1564 :           err = Z_STREAM_END;
; 1565 : 
; 1566 :         zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore);
; 1567 :       }
; 1568 : 
; 1569 :       if(err == BZ_FINISH_OK)
; 1570 :         err = ZIP_OK;
; 1571 : #endif
; 1572 :     }
; 1573 : 
; 1574 :     if (err==Z_STREAM_END)
; 1575 :         err=ZIP_OK; /* this is normal */
; 1576 : 
; 1577 :     if ((zi->ci.pos_in_buffered_data>0) && (err==ZIP_OK))

  000af	83 f8 01	 cmp	 eax, 1
  000b2	41 8b cd	 mov	 ecx, r13d
  000b5	be ff ff ff ff	 mov	 esi, -1
  000ba	0f 45 c8	 cmovne	 ecx, eax
  000bd	8b f9		 mov	 edi, ecx
  000bf	44 39 ab d4 00
	00 00		 cmp	 DWORD PTR [rbx+212], r13d
  000c6	76 14		 jbe	 SHORT $LN13@zipCloseFi
  000c8	85 c9		 test	 ecx, ecx
  000ca	75 10		 jne	 SHORT $LN13@zipCloseFi

; 1578 :                 {
; 1579 :         if (zip64FlushWriteBuffer(zi)==ZIP_ERRNO)

  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	41 8b fd	 mov	 edi, r13d
  000d2	e8 00 00 00 00	 call	 zip64FlushWriteBuffer
  000d7	3b c6		 cmp	 eax, esi
  000d9	0f 44 fe	 cmove	 edi, esi
$LN13@zipCloseFi:

; 1580 :             err = ZIP_ERRNO;
; 1581 :                 }
; 1582 : 
; 1583 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  000dc	83 bb f8 00 00
	00 08		 cmp	 DWORD PTR [rbx+248], 8
  000e3	75 1e		 jne	 SHORT $LN14@zipCloseFi
  000e5	44 39 ab fc 00
	00 00		 cmp	 DWORD PTR [rbx+252], r13d
  000ec	75 2c		 jne	 SHORT $LN16@zipCloseFi

; 1584 :     {
; 1585 :         int tmp_err = deflateEnd(&zi->ci.stream);

  000ee	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  000f2	e8 00 00 00 00	 call	 deflateEnd

; 1586 :         if (err == ZIP_OK)

  000f7	85 ff		 test	 edi, edi

; 1587 :             err = tmp_err;
; 1588 :         zi->ci.stream_initialised = 0;

  000f9	44 89 ab d0 00
	00 00		 mov	 DWORD PTR [rbx+208], r13d
  00100	0f 44 f8	 cmove	 edi, eax
$LN14@zipCloseFi:

; 1589 :     }
; 1590 : #ifdef HAVE_BZIP2
; 1591 :     else if((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1592 :     {
; 1593 :       int tmperr = BZ2_bzCompressEnd(&zi->ci.bstream);
; 1594 :                         if (err==ZIP_OK)
; 1595 :                                 err = tmperr;
; 1596 :                         zi->ci.stream_initialised = 0;
; 1597 :     }
; 1598 : #endif
; 1599 : 
; 1600 :     if (!zi->ci.raw)

  00103	44 39 ab fc 00
	00 00		 cmp	 DWORD PTR [rbx+252], r13d
  0010a	75 0e		 jne	 SHORT $LN16@zipCloseFi

; 1601 :     {
; 1602 :         crc32 = (uLong)zi->ci.crc32;

  0010c	44 8b b3 04 01
	01 00		 mov	 r14d, DWORD PTR [rbx+65796]

; 1603 :         uncompressed_size = zi->ci.totalUncompressedData;

  00113	48 8b ab 20 01
	01 00		 mov	 rbp, QWORD PTR [rbx+65824]
$LN16@zipCloseFi:

; 1604 :     }
; 1605 :     compressed_size = zi->ci.totalCompressedData;
; 1606 : 
; 1607 : #    ifndef NOCRYPT
; 1608 :     compressed_size += zi->ci.crypt_header_size;

  0011a	48 63 b3 40 01
	01 00		 movsxd	 rsi, DWORD PTR [rbx+65856]

; 1609 : #    endif
; 1610 : 
; 1611 :     // update Current Item crc and sizes,
; 1612 :     if(compressed_size >= 0xffffffff || uncompressed_size >= 0xffffffff || zi->ci.pos_local_header >= 0xffffffff)

  00121	41 bc ff ff ff
	ff		 mov	 r12d, -1		; ffffffffH
  00127	48 03 b3 18 01
	01 00		 add	 rsi, QWORD PTR [rbx+65816]
  0012e	49 3b f4	 cmp	 rsi, r12
  00131	73 0e		 jae	 SHORT $LN18@zipCloseFi
  00133	49 3b ec	 cmp	 rbp, r12
  00136	73 09		 jae	 SHORT $LN18@zipCloseFi
  00138	4c 39 a3 d8 00
	00 00		 cmp	 QWORD PTR [rbx+216], r12
  0013f	72 2d		 jb	 SHORT $LN17@zipCloseFi
$LN18@zipCloseFi:

; 1613 :     {
; 1614 :       /*version Made by*/
; 1615 :       zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)45,2);

  00141	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00148	ba 2d 00 00 00	 mov	 edx, 45			; 0000002dH
  0014d	48 83 c1 04	 add	 rcx, 4
  00151	44 8d 42 d5	 lea	 r8d, QWORD PTR [rdx-43]
  00155	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1616 :       /*version needed*/
; 1617 :       zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)45,2);

  0015a	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00161	41 8d 50 2b	 lea	 edx, QWORD PTR [r8+43]
  00165	48 83 c1 06	 add	 rcx, 6
  00169	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN17@zipCloseFi:

; 1618 : 
; 1619 :     }
; 1620 : 
; 1621 :     zip64local_putValue_inmemory(zi->ci.central_header+16,crc32,4); /*crc*/

  0016e	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00175	41 b8 04 00 00
	00		 mov	 r8d, 4
  0017b	48 83 c1 10	 add	 rcx, 16
  0017f	41 8b d6	 mov	 edx, r14d
  00182	45 8b fe	 mov	 r15d, r14d
  00185	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  0018a	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]

; 1622 : 
; 1623 : 
; 1624 :     if(compressed_size >= 0xffffffff)

  00191	49 3b f4	 cmp	 rsi, r12
  00194	48 8b d6	 mov	 rdx, rsi
  00197	49 0f 43 d4	 cmovae	 rdx, r12

; 1625 :       zip64local_putValue_inmemory(zi->ci.central_header+20, invalidValue,4); /*compr size*/
; 1626 :     else
; 1627 :       zip64local_putValue_inmemory(zi->ci.central_header+20, compressed_size,4); /*compr size*/
; 1628 : 
; 1629 :     /// set internal file attributes field
; 1630 :     if (zi->ci.stream.data_type == Z_ASCII)

  0019b	48 83 c1 14	 add	 rcx, 20
  0019f	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  001a4	83 bb c0 00 00
	00 01		 cmp	 DWORD PTR [rbx+192], 1
  001ab	75 18		 jne	 SHORT $LN21@zipCloseFi

; 1631 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)Z_ASCII,2);

  001ad	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  001b4	41 8d 50 fd	 lea	 edx, QWORD PTR [r8-3]
  001b8	48 83 c1 24	 add	 rcx, 36			; 00000024H
  001bc	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  001c0	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN21@zipCloseFi:

; 1632 : 
; 1633 :     if(uncompressed_size >= 0xffffffff)

  001c5	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  001cc	49 3b ec	 cmp	 rbp, r12
  001cf	48 8b d5	 mov	 rdx, rbp

; 1634 :       zip64local_putValue_inmemory(zi->ci.central_header+24, invalidValue,4); /*uncompr size*/
; 1635 :     else
; 1636 :       zip64local_putValue_inmemory(zi->ci.central_header+24, uncompressed_size,4); /*uncompr size*/
; 1637 : 
; 1638 :     // Add ZIP64 extra info field for uncompressed size
; 1639 :     if(uncompressed_size >= 0xffffffff)

  001d2	41 b8 04 00 00
	00		 mov	 r8d, 4
  001d8	49 0f 43 d4	 cmovae	 rdx, r12
  001dc	48 83 c1 18	 add	 rcx, 24
  001e0	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1640 :       datasize += 8;
; 1641 : 
; 1642 :     // Add ZIP64 extra info field for compressed size
; 1643 :     if(compressed_size >= 0xffffffff)

  001e5	49 3b ec	 cmp	 rbp, r12
  001e8	b8 08 00 00 00	 mov	 eax, 8
  001ed	66 41 0f 42 c5	 cmovb	 ax, r13w

; 1644 :       datasize += 8;
; 1645 : 
; 1646 :     // Add ZIP64 extra info field for relative offset to local file header of current file
; 1647 :     if(zi->ci.pos_local_header >= 0xffffffff)

  001f2	49 3b f4	 cmp	 rsi, r12
  001f5	8d 48 08	 lea	 ecx, DWORD PTR [rax+8]
  001f8	66 0f 42 c8	 cmovb	 cx, ax

; 1648 :       datasize += 8;
; 1649 : 
; 1650 :     if(datasize > 0)

  001fc	4c 39 a3 d8 00
	00 00		 cmp	 QWORD PTR [rbx+216], r12
  00203	44 8d 59 08	 lea	 r11d, DWORD PTR [rcx+8]
  00207	66 44 0f 42 d9	 cmovb	 r11w, cx
  0020c	66 45 85 db	 test	 r11w, r11w
  00210	0f 84 ed 00 00
	00		 je	 $LN27@zipCloseFi

; 1651 :     {
; 1652 :       char* p = NULL;
; 1653 : 
; 1654 :       if((uLong)(datasize + 4) > zi->ci.size_centralExtraFree)

  00216	45 0f b7 d3	 movzx	 r10d, r11w
  0021a	41 8d 42 04	 lea	 eax, DWORD PTR [r10+4]
  0021e	3b 83 f0 00 00
	00		 cmp	 eax, DWORD PTR [rbx+240]
  00224	76 23		 jbe	 SHORT $LN28@zipCloseFi

; 1655 :       {
; 1656 :         // we can not write more data to the buffer that we have room for.
; 1657 :         return ZIP_BADZIPFILE;

  00226	41 8d 40 95	 lea	 eax, QWORD PTR [r8-107]
$LN59@zipCloseFi:
  0022a	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
  0022f	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00234	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00239	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]

; 1748 : }

  0023e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00242	41 5e		 pop	 r14
  00244	41 5d		 pop	 r13
  00246	5d		 pop	 rbp
  00247	5b		 pop	 rbx
  00248	c3		 ret	 0
$LN28@zipCloseFi:

; 1658 :       }
; 1659 : 
; 1660 :       p = zi->ci.central_header + zi->ci.size_centralheader;

  00249	44 8b 8b ec 00
	00 00		 mov	 r9d, DWORD PTR [rbx+236]

; 1661 : 
; 1662 :       // Add Extra Information Header for 'ZIP64 information'
; 1663 :       zip64local_putValue_inmemory(p, 0x0001, 2); // HeaderID

  00250	ba 01 00 00 00	 mov	 edx, 1
  00255	4c 03 8b e0 00
	00 00		 add	 r9, QWORD PTR [rbx+224]
  0025c	49 8b c9	 mov	 rcx, r9
  0025f	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  00263	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1664 :       p += 2;
; 1665 :       zip64local_putValue_inmemory(p, datasize, 2); // DataSize

  00268	41 0f b7 d3	 movzx	 edx, r11w
  0026c	49 8d 49 02	 lea	 rcx, QWORD PTR [r9+2]
  00270	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1666 :       p += 2;

  00275	49 83 c1 04	 add	 r9, 4

; 1667 : 
; 1668 :       if(uncompressed_size >= 0xffffffff)

  00279	49 3b ec	 cmp	 rbp, r12
  0027c	72 14		 jb	 SHORT $LN29@zipCloseFi

; 1669 :       {
; 1670 :         zip64local_putValue_inmemory(p, uncompressed_size, 8);

  0027e	41 b8 08 00 00
	00		 mov	 r8d, 8
  00284	48 8b d5	 mov	 rdx, rbp
  00287	49 8b c9	 mov	 rcx, r9
  0028a	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1671 :         p += 8;

  0028f	4d 03 c8	 add	 r9, r8
$LN29@zipCloseFi:

; 1672 :       }
; 1673 : 
; 1674 :       if(compressed_size >= 0xffffffff)

  00292	49 3b f4	 cmp	 rsi, r12
  00295	72 14		 jb	 SHORT $LN30@zipCloseFi

; 1675 :       {
; 1676 :         zip64local_putValue_inmemory(p, compressed_size, 8);

  00297	41 b8 08 00 00
	00		 mov	 r8d, 8
  0029d	48 8b d6	 mov	 rdx, rsi
  002a0	49 8b c9	 mov	 rcx, r9
  002a3	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1677 :         p += 8;

  002a8	4d 03 c8	 add	 r9, r8
$LN30@zipCloseFi:

; 1678 :       }
; 1679 : 
; 1680 :       if(zi->ci.pos_local_header >= 0xffffffff)

  002ab	48 8b 93 d8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+216]
  002b2	49 3b d4	 cmp	 rdx, r12
  002b5	72 0e		 jb	 SHORT $LN31@zipCloseFi

; 1681 :       {
; 1682 :         zip64local_putValue_inmemory(p, zi->ci.pos_local_header, 8);

  002b7	41 b8 08 00 00
	00		 mov	 r8d, 8
  002bd	49 8b c9	 mov	 rcx, r9
  002c0	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN31@zipCloseFi:

; 1683 :         p += 8;
; 1684 :       }
; 1685 : 
; 1686 :       // Update how much extra free space we got in the memory buffer
; 1687 :       // and increase the centralheader size so the new ZIP64 fields are included
; 1688 :       // ( 4 below is the size of HeaderID and DataSize field )
; 1689 :       zi->ci.size_centralExtraFree -= datasize + 4;
; 1690 :       zi->ci.size_centralheader += datasize + 4;
; 1691 : 
; 1692 :       // Update the extra info size field
; 1693 :       zi->ci.size_centralExtra += datasize + 4;
; 1694 :       zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)zi->ci.size_centralExtra,2);

  002c5	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  002cc	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  002d1	41 2b c2	 sub	 eax, r10d
  002d4	48 83 c1 1e	 add	 rcx, 30
  002d8	01 83 f0 00 00
	00		 add	 DWORD PTR [rbx+240], eax
  002de	41 b8 02 00 00
	00		 mov	 r8d, 2
  002e4	41 8d 42 04	 lea	 eax, DWORD PTR [r10+4]
  002e8	01 83 ec 00 00
	00		 add	 DWORD PTR [rbx+236], eax
  002ee	41 8d 42 04	 lea	 eax, DWORD PTR [r10+4]
  002f2	01 83 e8 00 00
	00		 add	 DWORD PTR [rbx+232], eax
  002f8	8b 93 e8 00 00
	00		 mov	 edx, DWORD PTR [rbx+232]
  002fe	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN27@zipCloseFi:

; 1695 :     }
; 1696 : 
; 1697 :     if (err==ZIP_OK)

  00303	85 ff		 test	 edi, edi
  00305	75 19		 jne	 SHORT $LN32@zipCloseFi

; 1698 :         err = add_data_in_datablock(&zi->central_dir, zi->ci.central_header, (uLong)zi->ci.size_centralheader);

  00307	44 8b 83 ec 00
	00 00		 mov	 r8d, DWORD PTR [rbx+236]
  0030e	48 8d 4b 60	 lea	 rcx, QWORD PTR [rbx+96]
  00312	48 8b 93 e0 00
	00 00		 mov	 rdx, QWORD PTR [rbx+224]
  00319	e8 00 00 00 00	 call	 add_data_in_datablock
  0031e	8b f8		 mov	 edi, eax
$LN32@zipCloseFi:

; 1699 : 
; 1700 :     free(zi->ci.central_header);

  00320	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00327	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1701 : 
; 1702 :     if (err==ZIP_OK)

  0032d	85 ff		 test	 edi, edi
  0032f	0f 85 10 01 00
	00		 jne	 $LN46@zipCloseFi

; 1703 :     {
; 1704 :         // Update the LocalFileHeader with the new values.
; 1705 : 
; 1706 :         ZPOS64_T cur_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  00335	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00339	48 8b cb	 mov	 rcx, rbx
  0033c	e8 00 00 00 00	 call	 call_ztell64

; 1707 : 
; 1708 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_local_header + 14,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00341	4c 8b 83 d8 00
	00 00		 mov	 r8, QWORD PTR [rbx+216]
  00348	45 33 c9	 xor	 r9d, r9d
  0034b	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0034f	49 83 c0 0e	 add	 r8, 14
  00353	48 8b cb	 mov	 rcx, rbx
  00356	4c 8b f0	 mov	 r14, rax
  00359	e8 00 00 00 00	 call	 call_zseek64
  0035e	85 c0		 test	 eax, eax
  00360	74 0b		 je	 SHORT $LN53@zipCloseFi

; 1709 :             err = ZIP_ERRNO;

  00362	41 bf ff ff ff
	ff		 mov	 r15d, -1
  00368	41 8b ff	 mov	 edi, r15d

; 1710 : 
; 1711 :         if (err==ZIP_OK)

  0036b	eb 1d		 jmp	 SHORT $LN35@zipCloseFi
$LN53@zipCloseFi:

; 1712 :             err = zip64local_putValue(&zi->z_filefunc,zi->filestream,crc32,4); /* crc 32, unknown */

  0036d	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00371	41 b9 04 00 00
	00		 mov	 r9d, 4
  00377	4d 8b c7	 mov	 r8, r15
  0037a	48 8b cb	 mov	 rcx, rbx
  0037d	e8 00 00 00 00	 call	 zip64local_putValue
  00382	8b f8		 mov	 edi, eax
  00384	41 bf ff ff ff
	ff		 mov	 r15d, -1
$LN35@zipCloseFi:

; 1713 : 
; 1714 :         if(uncompressed_size >= 0xffffffff || compressed_size >= 0xffffffff )

  0038a	49 3b ec	 cmp	 rbp, r12
  0038d	73 3d		 jae	 SHORT $LN38@zipCloseFi
  0038f	49 3b f4	 cmp	 rsi, r12
  00392	73 38		 jae	 SHORT $LN38@zipCloseFi

; 1730 :         }
; 1731 :         else
; 1732 :         {
; 1733 :           if (err==ZIP_OK) /* compressed size, unknown */

  00394	85 ff		 test	 edi, edi
  00396	0f 85 91 00 00
	00		 jne	 $LN40@zipCloseFi

; 1734 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,compressed_size,4);

  0039c	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  003a0	44 8d 4f 04	 lea	 r9d, QWORD PTR [rdi+4]
  003a4	4c 8b c6	 mov	 r8, rsi
  003a7	48 8b cb	 mov	 rcx, rbx
  003aa	e8 00 00 00 00	 call	 zip64local_putValue
  003af	8b f8		 mov	 edi, eax

; 1735 : 
; 1736 :           if (err==ZIP_OK) /* uncompressed size, unknown */

  003b1	85 c0		 test	 eax, eax
  003b3	75 78		 jne	 SHORT $LN40@zipCloseFi

; 1737 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,uncompressed_size,4);

  003b5	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  003b9	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  003bd	4c 8b c5	 mov	 r8, rbp
  003c0	48 8b cb	 mov	 rcx, rbx
  003c3	e8 00 00 00 00	 call	 zip64local_putValue
  003c8	8b f8		 mov	 edi, eax
  003ca	eb 61		 jmp	 SHORT $LN40@zipCloseFi
$LN38@zipCloseFi:

; 1715 :         {
; 1716 :           if(zi->ci.pos_zip64extrainfo > 0)

  003cc	4c 8b 83 10 01
	01 00		 mov	 r8, QWORD PTR [rbx+65808]
  003d3	4d 85 c0	 test	 r8, r8
  003d6	74 50		 je	 SHORT $LN39@zipCloseFi

; 1717 :           {
; 1718 :             // Update the size in the ZIP64 extended field.
; 1719 :             if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_zip64extrainfo + 4,ZLIB_FILEFUNC_SEEK_SET)!=0)

  003d8	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  003dc	49 83 c0 04	 add	 r8, 4
  003e0	45 33 c9	 xor	 r9d, r9d
  003e3	48 8b cb	 mov	 rcx, rbx
  003e6	e8 00 00 00 00	 call	 call_zseek64
  003eb	85 c0		 test	 eax, eax
  003ed	74 05		 je	 SHORT $LN41@zipCloseFi

; 1720 :               err = ZIP_ERRNO;

  003ef	41 8b ff	 mov	 edi, r15d

; 1721 : 
; 1722 :             if (err==ZIP_OK) /* compressed size, unknown */

  003f2	eb 39		 jmp	 SHORT $LN40@zipCloseFi
$LN41@zipCloseFi:
  003f4	85 ff		 test	 edi, edi
  003f6	75 35		 jne	 SHORT $LN40@zipCloseFi

; 1723 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, uncompressed_size, 8);

  003f8	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  003fc	44 8d 4f 08	 lea	 r9d, QWORD PTR [rdi+8]
  00400	4c 8b c5	 mov	 r8, rbp
  00403	48 8b cb	 mov	 rcx, rbx
  00406	e8 00 00 00 00	 call	 zip64local_putValue
  0040b	8b f8		 mov	 edi, eax

; 1724 : 
; 1725 :             if (err==ZIP_OK) /* uncompressed size, unknown */

  0040d	85 c0		 test	 eax, eax
  0040f	75 1c		 jne	 SHORT $LN40@zipCloseFi

; 1726 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, compressed_size, 8);

  00411	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00415	44 8d 48 08	 lea	 r9d, QWORD PTR [rax+8]
  00419	4c 8b c6	 mov	 r8, rsi
  0041c	48 8b cb	 mov	 rcx, rbx
  0041f	e8 00 00 00 00	 call	 zip64local_putValue
  00424	8b f8		 mov	 edi, eax

; 1727 :           }

  00426	eb 05		 jmp	 SHORT $LN40@zipCloseFi
$LN39@zipCloseFi:

; 1728 :           else
; 1729 :               err = ZIP_BADZIPFILE; // Caller passed zip64 = 0, so no room for zip64 info -> fatal

  00428	bf 99 ff ff ff	 mov	 edi, -103		; ffffffffffffff99H
$LN40@zipCloseFi:

; 1738 :         }
; 1739 : 
; 1740 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, cur_pos_inzip,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0042d	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00431	45 33 c9	 xor	 r9d, r9d
  00434	4d 8b c6	 mov	 r8, r14
  00437	48 8b cb	 mov	 rcx, rbx
  0043a	e8 00 00 00 00	 call	 call_zseek64
  0043f	85 c0		 test	 eax, eax
  00441	41 0f 45 ff	 cmovne	 edi, r15d
$LN46@zipCloseFi:

; 1741 :             err = ZIP_ERRNO;
; 1742 :     }
; 1743 : 
; 1744 :     zi->number_entry ++;

  00445	48 ff 83 58 01
	01 00		 inc	 QWORD PTR [rbx+65880]

; 1745 :     zi->in_opened_file_inzip = 0;
; 1746 : 
; 1747 :     return err;

  0044c	8b c7		 mov	 eax, edi
  0044e	44 89 6b 70	 mov	 DWORD PTR [rbx+112], r13d
  00452	e9 d3 fd ff ff	 jmp	 $LN59@zipCloseFi
$LN55@zipCloseFi:

; 1527 :         return ZIP_PARAMERROR;

  00457	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1748 : }

  0045c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00460	41 5e		 pop	 r14
  00462	41 5d		 pop	 r13
  00464	5d		 pop	 rbp
  00465	5b		 pop	 rbx
  00466	c3		 ret	 0
zipCloseFileInZipRaw64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipCloseFileInZip
_TEXT	SEGMENT
file$ = 8
zipCloseFileInZip PROC					; COMDAT

; 1752 :     return zipCloseFileInZipRaw (file,0,0);

  00000	45 33 c0	 xor	 r8d, r8d
  00003	33 d2		 xor	 edx, edx
  00005	e9 00 00 00 00	 jmp	 zipCloseFileInZipRaw
zipCloseFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT Write_Zip64EndOfCentralDirectoryLocator
_TEXT	SEGMENT
zi$ = 48
zip64eocd_pos_inzip$ = 56
Write_Zip64EndOfCentralDirectoryLocator PROC		; COMDAT

; 1756 : {

$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx

; 1757 :   int err = ZIP_OK;
; 1758 :   ZPOS64_T pos = zip64eocd_pos_inzip - zi->add_position_when_writing_offset;
; 1759 : 
; 1760 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDLOCHEADERMAGIC,4);

  0000d	41 b9 04 00 00
	00		 mov	 r9d, 4
  00013	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00017	41 b8 50 4b 06
	07		 mov	 r8d, 117853008		; 07064b50H
  0001d	48 2b b9 50 01
	01 00		 sub	 rdi, QWORD PTR [rcx+65872]
  00024	48 8b d9	 mov	 rbx, rcx
  00027	e8 00 00 00 00	 call	 zip64local_putValue

; 1761 : 
; 1762 :   /*num disks*/
; 1763 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0002c	85 c0		 test	 eax, eax
  0002e	75 42		 jne	 SHORT $LN8@Write_Zip6

; 1764 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  00030	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00034	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  00038	45 33 c0	 xor	 r8d, r8d
  0003b	48 8b cb	 mov	 rcx, rbx
  0003e	e8 00 00 00 00	 call	 zip64local_putValue

; 1765 : 
; 1766 :   /*relative offset*/
; 1767 :     if (err==ZIP_OK) /* Relative offset to the Zip64EndOfCentralDirectory */

  00043	85 c0		 test	 eax, eax
  00045	75 2b		 jne	 SHORT $LN8@Write_Zip6

; 1768 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, pos,8);

  00047	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0004b	44 8d 48 08	 lea	 r9d, QWORD PTR [rax+8]
  0004f	4c 8b c7	 mov	 r8, rdi
  00052	48 8b cb	 mov	 rcx, rbx
  00055	e8 00 00 00 00	 call	 zip64local_putValue

; 1769 : 
; 1770 :   /*total disks*/ /* Do not support spawning of disk so always say 1 here*/
; 1771 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0005a	85 c0		 test	 eax, eax
  0005c	75 14		 jne	 SHORT $LN8@Write_Zip6

; 1772 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)1,4);

  0005e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00062	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  00066	44 8d 40 01	 lea	 r8d, QWORD PTR [rax+1]
  0006a	48 8b cb	 mov	 rcx, rbx
  0006d	e8 00 00 00 00	 call	 zip64local_putValue
$LN8@Write_Zip6:

; 1773 : 
; 1774 :     return err;
; 1775 : }

  00072	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00077	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
Write_Zip64EndOfCentralDirectoryLocator ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT Write_Zip64EndOfCentralDirectoryRecord
_TEXT	SEGMENT
zi$ = 48
size_centraldir$ = 56
centraldir_pos_inzip$ = 64
Write_Zip64EndOfCentralDirectoryRecord PROC		; COMDAT

; 1778 : {

$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	8b f2		 mov	 esi, edx

; 1779 :   int err = ZIP_OK;
; 1780 : 
; 1781 :   uLong Zip64DataSize = 44;
; 1782 : 
; 1783 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDHEADERMAGIC,4);

  00014	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00018	41 b8 50 4b 06
	06		 mov	 r8d, 101075792		; 06064b50H
  0001e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00024	48 8b d9	 mov	 rbx, rcx
  00027	e8 00 00 00 00	 call	 zip64local_putValue

; 1784 : 
; 1785 :   if (err==ZIP_OK) /* size of this 'zip64 end of central directory' */

  0002c	85 c0		 test	 eax, eax
  0002e	0f 85 e9 00 00
	00		 jne	 $LN10@Write_Zip6

; 1786 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)Zip64DataSize,8); // why ZPOS64_T of this ?

  00034	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00038	44 8d 48 08	 lea	 r9d, QWORD PTR [rax+8]
  0003c	44 8d 40 2c	 lea	 r8d, QWORD PTR [rax+44]
  00040	48 8b cb	 mov	 rcx, rbx
  00043	e8 00 00 00 00	 call	 zip64local_putValue

; 1787 : 
; 1788 :   if (err==ZIP_OK) /* version made by */

  00048	85 c0		 test	 eax, eax
  0004a	0f 85 cd 00 00
	00		 jne	 $LN10@Write_Zip6

; 1789 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  00050	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00054	44 8d 48 02	 lea	 r9d, QWORD PTR [rax+2]
  00058	44 8d 40 2d	 lea	 r8d, QWORD PTR [rax+45]
  0005c	48 8b cb	 mov	 rcx, rbx
  0005f	e8 00 00 00 00	 call	 zip64local_putValue

; 1790 : 
; 1791 :   if (err==ZIP_OK) /* version needed */

  00064	85 c0		 test	 eax, eax
  00066	0f 85 b1 00 00
	00		 jne	 $LN10@Write_Zip6

; 1792 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  0006c	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00070	44 8d 48 02	 lea	 r9d, QWORD PTR [rax+2]
  00074	44 8d 40 2d	 lea	 r8d, QWORD PTR [rax+45]
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	e8 00 00 00 00	 call	 zip64local_putValue

; 1793 : 
; 1794 :   if (err==ZIP_OK) /* number of this disk */

  00080	85 c0		 test	 eax, eax
  00082	0f 85 95 00 00
	00		 jne	 $LN10@Write_Zip6

; 1795 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  00088	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0008c	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  00090	45 33 c0	 xor	 r8d, r8d
  00093	48 8b cb	 mov	 rcx, rbx
  00096	e8 00 00 00 00	 call	 zip64local_putValue

; 1796 : 
; 1797 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0009b	85 c0		 test	 eax, eax
  0009d	75 7e		 jne	 SHORT $LN10@Write_Zip6

; 1798 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  0009f	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000a3	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  000a7	45 33 c0	 xor	 r8d, r8d
  000aa	48 8b cb	 mov	 rcx, rbx
  000ad	e8 00 00 00 00	 call	 zip64local_putValue

; 1799 : 
; 1800 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  000b2	85 c0		 test	 eax, eax
  000b4	75 67		 jne	 SHORT $LN10@Write_Zip6

; 1801 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  000b6	4c 8b 83 58 01
	01 00		 mov	 r8, QWORD PTR [rbx+65880]
  000bd	44 8d 48 08	 lea	 r9d, QWORD PTR [rax+8]
  000c1	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000c5	48 8b cb	 mov	 rcx, rbx
  000c8	e8 00 00 00 00	 call	 zip64local_putValue

; 1802 : 
; 1803 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  000cd	85 c0		 test	 eax, eax
  000cf	75 4c		 jne	 SHORT $LN10@Write_Zip6

; 1804 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  000d1	4c 8b 83 58 01
	01 00		 mov	 r8, QWORD PTR [rbx+65880]
  000d8	44 8d 48 08	 lea	 r9d, QWORD PTR [rax+8]
  000dc	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000e0	48 8b cb	 mov	 rcx, rbx
  000e3	e8 00 00 00 00	 call	 zip64local_putValue

; 1805 : 
; 1806 :   if (err==ZIP_OK) /* size of the central directory */

  000e8	85 c0		 test	 eax, eax
  000ea	75 31		 jne	 SHORT $LN10@Write_Zip6

; 1807 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)size_centraldir,8);

  000ec	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000f0	44 8d 48 08	 lea	 r9d, QWORD PTR [rax+8]
  000f4	44 8b c6	 mov	 r8d, esi
  000f7	48 8b cb	 mov	 rcx, rbx
  000fa	e8 00 00 00 00	 call	 zip64local_putValue

; 1808 : 
; 1809 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  000ff	85 c0		 test	 eax, eax
  00101	75 1a		 jne	 SHORT $LN10@Write_Zip6

; 1810 :   {
; 1811 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  00103	48 2b bb 50 01
	01 00		 sub	 rdi, QWORD PTR [rbx+65872]

; 1812 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (ZPOS64_T)pos,8);

  0010a	44 8d 48 08	 lea	 r9d, QWORD PTR [rax+8]
  0010e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00112	4c 8b c7	 mov	 r8, rdi
  00115	48 8b cb	 mov	 rcx, rbx
  00118	e8 00 00 00 00	 call	 zip64local_putValue
$LN10@Write_Zip6:

; 1813 :   }
; 1814 :   return err;
; 1815 : }

  0011d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00122	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00127	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0012b	5f		 pop	 rdi
  0012c	c3		 ret	 0
Write_Zip64EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT Write_EndOfCentralDirectoryRecord
_TEXT	SEGMENT
zi$ = 48
size_centraldir$ = 56
centraldir_pos_inzip$ = 64
Write_EndOfCentralDirectoryRecord PROC			; COMDAT

; 1817 : {

$LN24:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f0	 mov	 rsi, r8
  00012	8b ea		 mov	 ebp, edx

; 1818 :   int err = ZIP_OK;
; 1819 : 
; 1820 :   /*signature*/
; 1821 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ENDHEADERMAGIC,4);

  00014	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00018	41 b8 50 4b 05
	06		 mov	 r8d, 101010256		; 06054b50H
  0001e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00024	48 8b d9	 mov	 rbx, rcx
  00027	e8 00 00 00 00	 call	 zip64local_putValue

; 1822 : 
; 1823 :   if (err==ZIP_OK) /* number of this disk */

  0002c	85 c0		 test	 eax, eax
  0002e	0f 85 da 00 00
	00		 jne	 $LN13@Write_EndO

; 1824 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00034	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00038	44 8d 48 02	 lea	 r9d, QWORD PTR [rax+2]
  0003c	45 33 c0	 xor	 r8d, r8d
  0003f	48 8b cb	 mov	 rcx, rbx
  00042	e8 00 00 00 00	 call	 zip64local_putValue

; 1825 : 
; 1826 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00047	85 c0		 test	 eax, eax
  00049	0f 85 bf 00 00
	00		 jne	 $LN13@Write_EndO

; 1827 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  0004f	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00053	44 8d 48 02	 lea	 r9d, QWORD PTR [rax+2]
  00057	45 33 c0	 xor	 r8d, r8d
  0005a	48 8b cb	 mov	 rcx, rbx
  0005d	e8 00 00 00 00	 call	 zip64local_putValue

; 1828 : 
; 1829 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  00062	85 c0		 test	 eax, eax
  00064	0f 85 a4 00 00
	00		 jne	 $LN13@Write_EndO

; 1830 :   {
; 1831 :     {
; 1832 :       if(zi->number_entry >= 0xFFFF)

  0006a	48 8b 83 58 01
	01 00		 mov	 rax, QWORD PTR [rbx+65880]
  00071	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00076	bf ff ff 00 00	 mov	 edi, 65535		; 0000ffffH

; 1833 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  0007b	44 8b c7	 mov	 r8d, edi
  0007e	48 3b c7	 cmp	 rax, rdi
  00081	73 03		 jae	 SHORT $LN6@Write_EndO

; 1834 :       else
; 1835 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  00083	44 8b c0	 mov	 r8d, eax
$LN6@Write_EndO:

; 1836 :     }
; 1837 :   }
; 1838 : 
; 1839 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  00086	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0008a	41 b9 02 00 00
	00		 mov	 r9d, 2
  00090	48 8b cb	 mov	 rcx, rbx
  00093	e8 00 00 00 00	 call	 zip64local_putValue
  00098	85 c0		 test	 eax, eax
  0009a	75 6d		 jne	 SHORT $LN21@Write_EndO

; 1840 :   {
; 1841 :     if(zi->number_entry >= 0xFFFF)

  0009c	48 8b 83 58 01
	01 00		 mov	 rax, QWORD PTR [rbx+65880]
  000a3	48 3b c7	 cmp	 rax, rdi
  000a6	73 02		 jae	 SHORT $LN9@Write_EndO

; 1842 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record
; 1843 :     else
; 1844 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  000a8	8b f8		 mov	 edi, eax
$LN9@Write_EndO:

; 1845 :   }
; 1846 : 
; 1847 :   if (err==ZIP_OK) /* size of the central directory */

  000aa	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000ae	41 b9 02 00 00
	00		 mov	 r9d, 2
  000b4	4c 8b c7	 mov	 r8, rdi
  000b7	48 8b cb	 mov	 rcx, rbx
  000ba	e8 00 00 00 00	 call	 zip64local_putValue
  000bf	85 c0		 test	 eax, eax
  000c1	75 46		 jne	 SHORT $LN21@Write_EndO

; 1848 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_centraldir,4);

  000c3	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000c7	44 8d 48 04	 lea	 r9d, QWORD PTR [rax+4]
  000cb	4c 8b c5	 mov	 r8, rbp
  000ce	48 8b cb	 mov	 rcx, rbx
  000d1	e8 00 00 00 00	 call	 zip64local_putValue

; 1849 : 
; 1850 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  000d6	85 c0		 test	 eax, eax
  000d8	75 2f		 jne	 SHORT $LN21@Write_EndO

; 1851 :   {
; 1852 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  000da	48 8b 8b 50 01
	01 00		 mov	 rcx, QWORD PTR [rbx+65872]
  000e1	48 8b c6	 mov	 rax, rsi
  000e4	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000e8	48 2b c1	 sub	 rax, rcx

; 1853 :     if(pos >= 0xffffffff)

  000eb	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  000f1	41 b9 04 00 00
	00		 mov	 r9d, 4
  000f7	49 3b c0	 cmp	 rax, r8
  000fa	73 05		 jae	 SHORT $LN22@Write_EndO

; 1854 :     {
; 1855 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)0xffffffff,4);
; 1856 :     }
; 1857 :     else
; 1858 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)(centraldir_pos_inzip - zi->add_position_when_writing_offset),4);

  000fc	2b f1		 sub	 esi, ecx
  000fe	44 8b c6	 mov	 r8d, esi
$LN22@Write_EndO:
  00101	48 8b cb	 mov	 rcx, rbx
  00104	e8 00 00 00 00	 call	 zip64local_putValue
$LN21@Write_EndO:
  00109	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
$LN13@Write_EndO:

; 1859 :   }
; 1860 : 
; 1861 :    return err;
; 1862 : }

  0010e	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00113	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00118	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0011c	5e		 pop	 rsi
  0011d	c3		 ret	 0
Write_EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT Write_GlobalComment
_TEXT	SEGMENT
zi$ = 48
global_comment$ = 56
Write_GlobalComment PROC				; COMDAT

; 1865 : {

$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1866 :   int err = ZIP_OK;
; 1867 :   uInt size_global_comment = 0;

  0001a	33 db		 xor	 ebx, ebx
  0001c	48 8b fa	 mov	 rdi, rdx
  0001f	48 8b e9	 mov	 rbp, rcx

; 1868 : 
; 1869 :   if(global_comment != NULL)

  00022	4c 8d 73 ff	 lea	 r14, QWORD PTR [rbx-1]
  00026	48 85 d2	 test	 rdx, rdx
  00029	74 0e		 je	 SHORT $LN2@Write_Glob

; 1870 :     size_global_comment = (uInt)strlen(global_comment);

  0002b	49 8b de	 mov	 rbx, r14
  0002e	66 90		 npad	 2
$LL6@Write_Glob:
  00030	48 ff c3	 inc	 rbx
  00033	80 3c 1a 00	 cmp	 BYTE PTR [rdx+rbx], 0
  00037	75 f7		 jne	 SHORT $LL6@Write_Glob
$LN2@Write_Glob:

; 1871 : 
; 1872 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_global_comment,2);

  00039	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0003d	41 b9 02 00 00
	00		 mov	 r9d, 2
  00043	44 8b c3	 mov	 r8d, ebx
  00046	e8 00 00 00 00	 call	 zip64local_putValue
  0004b	8b f0		 mov	 esi, eax

; 1873 : 
; 1874 :   if (err == ZIP_OK && size_global_comment > 0)

  0004d	85 c0		 test	 eax, eax
  0004f	75 1d		 jne	 SHORT $LN4@Write_Glob
  00051	85 db		 test	 ebx, ebx
  00053	74 19		 je	 SHORT $LN4@Write_Glob

; 1875 :   {
; 1876 :     if (ZWRITE64(zi->z_filefunc,zi->filestream, global_comment, size_global_comment) != size_global_comment)

  00055	48 8b 55 58	 mov	 rdx, QWORD PTR [rbp+88]
  00059	44 8b cb	 mov	 r9d, ebx
  0005c	48 8b 4d 38	 mov	 rcx, QWORD PTR [rbp+56]
  00060	4c 8b c7	 mov	 r8, rdi
  00063	ff 55 10	 call	 QWORD PTR [rbp+16]
  00066	3b c3		 cmp	 eax, ebx
  00068	41 0f 45 f6	 cmovne	 esi, r14d

; 1877 :       err = ZIP_ERRNO;
; 1878 :   }
; 1879 :   return err;

  0006c	8b c6		 mov	 eax, esi
$LN4@Write_Glob:

; 1880 : }

  0006e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00073	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00078	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0007d	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	41 5e		 pop	 r14
  00088	c3		 ret	 0
Write_GlobalComment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\daten\projekte\simulationplatform\third_party_libraries\zlib\zlib-1.2.11\contrib\minizip\zip.c
;	COMDAT zipClose
_TEXT	SEGMENT
file$ = 64
global_comment$ = 72
zipClose PROC						; COMDAT

; 1883 : {

$LN26:
  00000	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	41 56		 push	 r14
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1884 :     zip64_internal* zi;
; 1885 :     int err = 0;

  0000d	33 f6		 xor	 esi, esi
  0000f	4c 8b f2	 mov	 r14, rdx
  00012	48 8b f9	 mov	 rdi, rcx

; 1886 :     uLong size_centraldir = 0;

  00015	8b ee		 mov	 ebp, esi

; 1887 :     ZPOS64_T centraldir_pos_inzip;
; 1888 :     ZPOS64_T pos;
; 1889 : 
; 1890 :     if (file == NULL)

  00017	48 85 c9	 test	 rcx, rcx
  0001a	75 11		 jne	 SHORT $LN4@zipClose

; 1891 :         return ZIP_PARAMERROR;

  0001c	8d 41 9a	 lea	 eax, QWORD PTR [rcx-102]

; 1947 : 
; 1948 :     return err;
; 1949 : }

  0001f	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	41 5e		 pop	 r14
  0002a	5f		 pop	 rdi
  0002b	5e		 pop	 rsi
  0002c	c3		 ret	 0
$LN4@zipClose:

; 1892 : 
; 1893 :     zi = (zip64_internal*)file;
; 1894 : 
; 1895 :     if (zi->in_opened_file_inzip == 1)

  0002d	83 79 70 01	 cmp	 DWORD PTR [rcx+112], 1
  00031	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12
  00036	4c 89 7c 24 50	 mov	 QWORD PTR [rsp+80], r15
  0003b	75 07		 jne	 SHORT $LN5@zipClose

; 1896 :     {
; 1897 :         err = zipCloseFileInZip (file);

  0003d	e8 00 00 00 00	 call	 zipCloseFileInZip
  00042	8b f0		 mov	 esi, eax
$LN5@zipClose:

; 1898 :     }
; 1899 : 
; 1900 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1901 :     if (global_comment==NULL)

  00044	4d 85 f6	 test	 r14, r14
  00047	75 07		 jne	 SHORT $LN24@zipClose

; 1902 :         global_comment = zi->globalcomment;

  00049	4c 8b b7 60 01
	01 00		 mov	 r14, QWORD PTR [rdi+65888]
$LN24@zipClose:

; 1903 : #endif
; 1904 : 
; 1905 :     centraldir_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  00050	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  00054	48 8b cf	 mov	 rcx, rdi
  00057	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0005c	e8 00 00 00 00	 call	 call_ztell64
  00061	4c 8b f8	 mov	 r15, rax

; 1906 : 
; 1907 :     if (err==ZIP_OK)

  00064	41 bc ff ff ff
	ff		 mov	 r12d, -1
  0006a	85 f6		 test	 esi, esi
  0006c	75 37		 jne	 SHORT $LN3@zipClose

; 1908 :     {
; 1909 :         linkedlist_datablock_internal* ldi = zi->central_dir.first_block;

  0006e	48 8b 5f 60	 mov	 rbx, QWORD PTR [rdi+96]

; 1910 :         while (ldi!=NULL)

  00072	48 85 db	 test	 rbx, rbx
  00075	74 2e		 je	 SHORT $LN3@zipClose
$LL2@zipClose:

; 1911 :         {
; 1912 :             if ((err==ZIP_OK) && (ldi->filled_in_this_block>0))

  00077	85 f6		 test	 esi, esi
  00079	75 1f		 jne	 SHORT $LN9@zipClose
  0007b	44 8b 4b 0c	 mov	 r9d, DWORD PTR [rbx+12]
  0007f	45 85 c9	 test	 r9d, r9d
  00082	74 16		 je	 SHORT $LN9@zipClose

; 1913 :             {
; 1914 :                 if (ZWRITE64(zi->z_filefunc,zi->filestream, ldi->data, ldi->filled_in_this_block) != ldi->filled_in_this_block)

  00084	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  00088	4c 8d 43 14	 lea	 r8, QWORD PTR [rbx+20]
  0008c	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  00090	ff 57 10	 call	 QWORD PTR [rdi+16]
  00093	3b 43 0c	 cmp	 eax, DWORD PTR [rbx+12]
  00096	41 0f 45 f4	 cmovne	 esi, r12d
$LN9@zipClose:

; 1915 :                     err = ZIP_ERRNO;
; 1916 :             }
; 1917 : 
; 1918 :             size_centraldir += ldi->filled_in_this_block;

  0009a	03 6b 0c	 add	 ebp, DWORD PTR [rbx+12]

; 1919 :             ldi = ldi->next_datablock;

  0009d	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
  000a0	48 85 db	 test	 rbx, rbx
  000a3	75 d2		 jne	 SHORT $LL2@zipClose
$LN3@zipClose:

; 1920 :         }
; 1921 :     }
; 1922 :     free_linkedlist(&(zi->central_dir));

  000a5	48 8d 4f 60	 lea	 rcx, QWORD PTR [rdi+96]
  000a9	e8 00 00 00 00	 call	 free_linkedlist

; 1923 : 
; 1924 :     pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  000ae	49 8b c7	 mov	 rax, r15

; 1925 :     if(pos >= 0xffffffff || zi->number_entry > 0xFFFF)

  000b1	b9 ff ff ff ff	 mov	 ecx, -1			; ffffffffH
  000b6	48 2b 87 50 01
	01 00		 sub	 rax, QWORD PTR [rdi+65872]
  000bd	48 3b c1	 cmp	 rax, rcx
  000c0	73 0d		 jae	 SHORT $LN11@zipClose
  000c2	48 81 bf 58 01
	01 00 ff ff 00
	00		 cmp	 QWORD PTR [rdi+65880], 65535 ; 0000ffffH
  000cd	76 27		 jbe	 SHORT $LN10@zipClose
$LN11@zipClose:

; 1926 :     {
; 1927 :       ZPOS64_T Zip64EOCDpos = ZTELL64(zi->z_filefunc,zi->filestream);

  000cf	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  000d3	48 8b cf	 mov	 rcx, rdi
  000d6	e8 00 00 00 00	 call	 call_ztell64

; 1928 :       Write_Zip64EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  000db	4d 8b c7	 mov	 r8, r15
  000de	8b d5		 mov	 edx, ebp
  000e0	48 8b cf	 mov	 rcx, rdi
  000e3	48 8b d8	 mov	 rbx, rax
  000e6	e8 00 00 00 00	 call	 Write_Zip64EndOfCentralDirectoryRecord

; 1929 : 
; 1930 :       Write_Zip64EndOfCentralDirectoryLocator(zi, Zip64EOCDpos);

  000eb	48 8b d3	 mov	 rdx, rbx
  000ee	48 8b cf	 mov	 rcx, rdi
  000f1	e8 00 00 00 00	 call	 Write_Zip64EndOfCentralDirectoryLocator
$LN10@zipClose:

; 1931 :     }
; 1932 : 
; 1933 :     if (err==ZIP_OK)

  000f6	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000fb	85 f6		 test	 esi, esi
  000fd	75 20		 jne	 SHORT $LN13@zipClose

; 1934 :       err = Write_EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  000ff	4d 8b c7	 mov	 r8, r15
  00102	8b d5		 mov	 edx, ebp
  00104	48 8b cf	 mov	 rcx, rdi
  00107	e8 00 00 00 00	 call	 Write_EndOfCentralDirectoryRecord
  0010c	8b f0		 mov	 esi, eax

; 1935 : 
; 1936 :     if(err == ZIP_OK)

  0010e	85 c0		 test	 eax, eax
  00110	75 0d		 jne	 SHORT $LN13@zipClose

; 1937 :       err = Write_GlobalComment(zi, global_comment);

  00112	49 8b d6	 mov	 rdx, r14
  00115	48 8b cf	 mov	 rcx, rdi
  00118	e8 00 00 00 00	 call	 Write_GlobalComment
  0011d	8b f0		 mov	 esi, eax
$LN13@zipClose:

; 1938 : 
; 1939 :     if (ZCLOSE64(zi->z_filefunc,zi->filestream) != 0)

  0011f	48 8b 57 58	 mov	 rdx, QWORD PTR [rdi+88]
  00123	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  00127	ff 57 28	 call	 QWORD PTR [rdi+40]
  0012a	4c 8b 7c 24 50	 mov	 r15, QWORD PTR [rsp+80]
  0012f	85 c0		 test	 eax, eax
  00131	74 06		 je	 SHORT $LN15@zipClose

; 1940 :         if (err == ZIP_OK)

  00133	85 f6		 test	 esi, esi
  00135	41 0f 44 f4	 cmove	 esi, r12d
$LN15@zipClose:

; 1941 :             err = ZIP_ERRNO;
; 1942 : 
; 1943 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1944 :     TRYFREE(zi->globalcomment);

  00139	48 8b 8f 60 01
	01 00		 mov	 rcx, QWORD PTR [rdi+65888]
  00140	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
  00145	48 85 c9	 test	 rcx, rcx
  00148	74 06		 je	 SHORT $LN16@zipClose
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN16@zipClose:

; 1945 : #endif
; 1946 :     TRYFREE(zi);

  00150	48 8b cf	 mov	 rcx, rdi
  00153	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1947 : 
; 1948 :     return err;
; 1949 : }

  00159	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0015e	8b c6		 mov	 eax, esi
  00160	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00164	41 5e		 pop	 r14
  00166	5f		 pop	 rdi
  00167	5e		 pop	 rsi
  00168	c3		 ret	 0
zipClose ENDP
_TEXT	ENDS
END
