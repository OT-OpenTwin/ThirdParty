import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "qquicksafeimage.h"
        name: "QQuickSafeImage"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: [
            "Qt.SafeRenderer/QQuickSafeImage 2.0",
            "Qt.SafeRenderer/QQuickSafeImage 2.1",
            "Qt.SafeRenderer/QQuickSafeImage 2.4",
            "Qt.SafeRenderer/QQuickSafeImage 2.7",
            "Qt.SafeRenderer/QQuickSafeImage 2.11"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523]
        Property {
            name: "source"
            type: "QUrl"
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 0
        }
        Property {
            name: "fillColor"
            type: "QColor"
            read: "fillColor"
            write: "setFillColor"
            notify: "fillColorChanged"
            index: 1
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "url"; type: "QUrl" }
        }
        Signal {
            name: "positionChanged"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "fillColorChanged"
            Parameter { name: "fillColor"; type: "QColor" }
        }
        Method { name: "sizeChanged" }
    }
    Component {
        file: "qquicksafepicture.h"
        name: "QQuickSafePicture"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: [
            "Qt.SafeRenderer/QQuickSafePicture 2.0",
            "Qt.SafeRenderer/QQuickSafePicture 2.1",
            "Qt.SafeRenderer/QQuickSafePicture 2.4",
            "Qt.SafeRenderer/QQuickSafePicture 2.7",
            "Qt.SafeRenderer/QQuickSafePicture 2.11"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523]
        Property {
            name: "source"
            type: "QUrl"
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 0
        }
        Property {
            name: "color"
            type: "QColor"
            read: "color"
            write: "setColor"
            notify: "colorChanged"
            index: 1
        }
        Property {
            name: "fillColor"
            type: "QColor"
            read: "fillColor"
            write: "setFillColor"
            notify: "fillColorChanged"
            index: 2
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "url"; type: "QUrl" }
        }
        Signal {
            name: "positionChanged"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "fillColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Method { name: "updateTexture" }
    }
    Component {
        file: "qquicksafetext.h"
        name: "QQuickSafeText"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: [
            "Qt.SafeRenderer/QQuickSafeText 2.0",
            "Qt.SafeRenderer/QQuickSafeText 2.1",
            "Qt.SafeRenderer/QQuickSafeText 2.4",
            "Qt.SafeRenderer/QQuickSafeText 2.7",
            "Qt.SafeRenderer/QQuickSafeText 2.11"
        ]
        exportMetaObjectRevisions: [512, 513, 516, 519, 523]
        Enum {
            name: "HAlignment"
            values: [
                "AlignLeft",
                "AlignRight",
                "AlignHCenter",
                "AlignJustify"
            ]
        }
        Enum {
            name: "VAlignment"
            values: ["AlignTop", "AlignBottom", "AlignVCenter"]
        }
        Enum {
            name: "WrapMode"
            values: [
                "NoWrap",
                "WordWrap",
                "WrapAnywhere",
                "WrapAtWordBoundaryOrAnywhere",
                "Wrap"
            ]
        }
        Property {
            name: "text"
            type: "QString"
            read: "text"
            write: "setText"
            notify: "textChanged"
            index: 0
        }
        Property {
            name: "font"
            type: "QFont"
            read: "font"
            write: "setFont"
            notify: "fontChanged"
            index: 1
        }
        Property {
            name: "color"
            type: "QColor"
            read: "color"
            write: "setColor"
            notify: "colorChanged"
            index: 2
        }
        Property {
            name: "fillColor"
            type: "QColor"
            read: "fillColor"
            write: "setFillColor"
            notify: "fillColorChanged"
            index: 3
        }
        Property {
            name: "horizontalAlignment"
            type: "HAlignment"
            read: "hAlign"
            write: "setHAlign"
            notify: "horizontalAlignmentChanged"
            index: 4
        }
        Property {
            name: "verticalAlignment"
            type: "VAlignment"
            read: "vAlign"
            write: "setVAlign"
            notify: "verticalAlignmentChanged"
            index: 5
        }
        Property {
            name: "wrapMode"
            type: "WrapMode"
            read: "wrapMode"
            write: "setWrapMode"
            notify: "wrapModeChanged"
            index: 6
        }
        Property {
            name: "runtimeEditable"
            type: "bool"
            read: "runtimeEditable"
            write: "setRuntimeEditable"
            notify: "runtimeEditableChanged"
            index: 7
        }
        Signal { name: "colorChanged" }
        Signal { name: "fillColorChanged" }
        Signal {
            name: "fontChanged"
            Parameter { name: "font"; type: "QFont" }
        }
        Signal {
            name: "sourceChanged"
            Parameter { name: "url"; type: "QUrl" }
        }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "QString" }
        }
        Signal {
            name: "horizontalAlignmentChanged"
            Parameter { name: "alignment"; type: "QQuickSafeText::HAlignment" }
        }
        Signal {
            name: "verticalAlignmentChanged"
            Parameter { name: "alignment"; type: "QQuickSafeText::VAlignment" }
        }
        Signal { name: "wrapModeChanged" }
        Signal {
            name: "positionChanged"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal { name: "runtimeEditableChanged" }
        Method { name: "updateTexture" }
    }
    Component {
        file: "qsafemessagesender.h"
        name: "QSafeMessageSender"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["Qt.SafeRenderer/QSafeMessageSender 2.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [512]
        Method {
            name: "sendHeartBeat"
            Parameter { name: "timeout"; type: "int" }
        }
        Method {
            name: "changeItemVisiblity"
            Parameter { name: "id"; type: "QString" }
            Parameter { name: "enable"; type: "bool" }
        }
        Method {
            name: "moveItem"
            Parameter { name: "itemId"; type: "QString" }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Method {
            name: "changeLayout"
            Parameter { name: "layoutId"; type: "QString" }
        }
        Method {
            name: "setText"
            Parameter { name: "itemId"; type: "QString" }
            Parameter { name: "text"; type: "QString" }
        }
        Method {
            name: "setColor"
            Parameter { name: "itemId"; type: "QString" }
            Parameter { name: "colorStr"; type: "QString" }
        }
        Method {
            name: "changeState"
            Parameter { name: "id"; type: "QString" }
            Parameter { name: "state"; type: "QString" }
        }
    }
}
