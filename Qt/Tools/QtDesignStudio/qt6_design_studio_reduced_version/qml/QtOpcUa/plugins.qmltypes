import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "private/opcuaforeign_p.h"
        name: "QOpcUa"
        accessSemantics: "none"
        extension: "QOpcUaUserTokenPolicy"
        exports: ["QtOpcUa/Constants 5.12", "QtOpcUa/Constants 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1292, 1536]
        Enum {
            name: "NodeClass"
            values: [
                "Undefined",
                "Object",
                "Variable",
                "Method",
                "ObjectType",
                "VariableType",
                "ReferenceType",
                "DataType",
                "View"
            ]
        }
        Enum {
            name: "NodeAttribute"
            values: [
                "None",
                "NodeId",
                "NodeClass",
                "BrowseName",
                "DisplayName",
                "Description",
                "WriteMask",
                "UserWriteMask",
                "IsAbstract",
                "Symmetric",
                "InverseName",
                "ContainsNoLoops",
                "EventNotifier",
                "Value",
                "DataType",
                "ValueRank",
                "ArrayDimensions",
                "AccessLevel",
                "UserAccessLevel",
                "MinimumSamplingInterval",
                "Historizing",
                "Executable",
                "UserExecutable"
            ]
        }
        Enum {
            name: "WriteMaskBit"
            type: "uint"
            values: [
                "None",
                "AccessLevel",
                "ArrayDimensions",
                "BrowseName",
                "ContainsNoLoops",
                "DataType",
                "Description",
                "DisplayName",
                "EventNotifier",
                "Executable",
                "Historizing",
                "InverseName",
                "IsAbstract",
                "MinimumSamplingInterval",
                "NodeClass",
                "NodeId",
                "Symmetric",
                "UserAccessLevel",
                "UserExecutable",
                "UserWriteMask",
                "ValueRank",
                "WriteMask",
                "ValueForVariableType"
            ]
        }
        Enum {
            name: "AccessLevelBit"
            type: "quint8"
            values: [
                "None",
                "CurrentRead",
                "CurrentWrite",
                "HistoryRead",
                "HistoryWrite",
                "SemanticChange",
                "StatusWrite",
                "TimestampWrite"
            ]
        }
        Enum {
            name: "EventNotifierBit"
            type: "quint8"
            values: [
                "None",
                "SubscribeToEvents",
                "HistoryRead",
                "HistoryWrite"
            ]
        }
        Enum {
            name: "ReferenceTypeId"
            type: "uint"
            values: [
                "Unspecified",
                "References",
                "NonHierarchicalReferences",
                "HierarchicalReferences",
                "HasChild",
                "Organizes",
                "HasEventSource",
                "HasModellingRule",
                "HasEncoding",
                "HasDescription",
                "HasTypeDefinition",
                "GeneratesEvent",
                "Aggregates",
                "HasSubtype",
                "HasProperty",
                "HasComponent",
                "HasNotifier",
                "HasOrderedComponent",
                "FromState",
                "ToState",
                "HasCause",
                "HasEffect",
                "HasHistoricalConfiguration",
                "HasSubStateMachine",
                "HasArgumentDescription",
                "HasOptionalInputArgumentDescription",
                "AlwaysGeneratesEvent",
                "HasTrueSubState",
                "HasFalseSubState",
                "HasCondition",
                "HasPubSubConnection",
                "DataSetToWriter",
                "HasGuard",
                "HasDataSetWriter",
                "HasDataSetReader",
                "HasAlarmSuppressionGroup",
                "AlarmGroupMember",
                "HasEffectDisable",
                "HasDictionaryEntry",
                "HasInterface",
                "HasAddIn",
                "HasEffectEnable",
                "HasEffectSuppressed",
                "HasEffectUnsuppressed",
                "HasWriterGroup",
                "HasReaderGroup",
                "AliasFor"
            ]
        }
        Enum {
            name: "Types"
            values: [
                "Boolean",
                "Int32",
                "UInt32",
                "Double",
                "Float",
                "String",
                "LocalizedText",
                "DateTime",
                "UInt16",
                "Int16",
                "UInt64",
                "Int64",
                "Byte",
                "SByte",
                "ByteString",
                "XmlElement",
                "NodeId",
                "Guid",
                "QualifiedName",
                "StatusCode",
                "ExtensionObject",
                "Range",
                "EUInformation",
                "ComplexNumber",
                "DoubleComplexNumber",
                "AxisInformation",
                "XV",
                "ExpandedNodeId",
                "Argument",
                "Undefined"
            ]
        }
        Enum {
            name: "UaStatusCode"
            type: "uint"
            values: [
                "Good",
                "BadUnexpectedError",
                "BadInternalError",
                "BadOutOfMemory",
                "BadResourceUnavailable",
                "BadCommunicationError",
                "BadEncodingError",
                "BadDecodingError",
                "BadEncodingLimitsExceeded",
                "BadRequestTooLarge",
                "BadResponseTooLarge",
                "BadUnknownResponse",
                "BadTimeout",
                "BadServiceUnsupported",
                "BadShutdown",
                "BadServerNotConnected",
                "BadServerHalted",
                "BadNothingToDo",
                "BadTooManyOperations",
                "BadTooManyMonitoredItems",
                "BadDataTypeIdUnknown",
                "BadCertificateInvalid",
                "BadSecurityChecksFailed",
                "BadCertificateTimeInvalid",
                "BadCertificateIssuerTimeInvalid",
                "BadCertificateHostNameInvalid",
                "BadCertificateUriInvalid",
                "BadCertificateUseNotAllowed",
                "BadCertificateIssuerUseNotAllowed",
                "BadCertificateUntrusted",
                "BadCertificateRevocationUnknown",
                "BadCertificateIssuerRevocationUnknown",
                "BadCertificateRevoked",
                "BadCertificateIssuerRevoked",
                "BadCertificateChainIncomplete",
                "BadUserAccessDenied",
                "BadIdentityTokenInvalid",
                "BadIdentityTokenRejected",
                "BadSecureChannelIdInvalid",
                "BadInvalidTimestamp",
                "BadNonceInvalid",
                "BadSessionIdInvalid",
                "BadSessionClosed",
                "BadSessionNotActivated",
                "BadSubscriptionIdInvalid",
                "BadRequestHeaderInvalid",
                "BadTimestampsToReturnInvalid",
                "BadRequestCancelledByClient",
                "BadTooManyArguments",
                "GoodSubscriptionTransferred",
                "GoodCompletesAsynchronously",
                "GoodOverload",
                "GoodClamped",
                "BadNoCommunication",
                "BadWaitingForInitialData",
                "BadNodeIdInvalid",
                "BadNodeIdUnknown",
                "BadAttributeIdInvalid",
                "BadIndexRangeInvalid",
                "BadIndexRangeNoData",
                "BadDataEncodingInvalid",
                "BadDataEncodingUnsupported",
                "BadNotReadable",
                "BadNotWritable",
                "BadOutOfRange",
                "BadNotSupported",
                "BadNotFound",
                "BadObjectDeleted",
                "BadNotImplemented",
                "BadMonitoringModeInvalid",
                "BadMonitoredItemIdInvalid",
                "BadMonitoredItemFilterInvalid",
                "BadMonitoredItemFilterUnsupported",
                "BadFilterNotAllowed",
                "BadStructureMissing",
                "BadEventFilterInvalid",
                "BadContentFilterInvalid",
                "BadFilterOperatorInvalid",
                "BadFilterOperatorUnsupported",
                "BadFilterOperandCountMismatch",
                "BadFilterOperandInvalid",
                "BadFilterElementInvalid",
                "BadFilterLiteralInvalid",
                "BadContinuationPointInvalid",
                "BadNoContinuationPoints",
                "BadReferenceTypeIdInvalid",
                "BadBrowseDirectionInvalid",
                "BadNodeNotInView",
                "BadServerUriInvalid",
                "BadServerNameMissing",
                "BadDiscoveryUrlMissing",
                "BadSempahoreFileMissing",
                "BadRequestTypeInvalid",
                "BadSecurityModeRejected",
                "BadSecurityPolicyRejected",
                "BadTooManySessions",
                "BadUserSignatureInvalid",
                "BadApplicationSignatureInvalid",
                "BadNoValidCertificates",
                "BadIdentityChangeNotSupported",
                "BadRequestCancelledByRequest",
                "BadParentNodeIdInvalid",
                "BadReferenceNotAllowed",
                "BadNodeIdRejected",
                "BadNodeIdExists",
                "BadNodeClassInvalid",
                "BadBrowseNameInvalid",
                "BadBrowseNameDuplicated",
                "BadNodeAttributesInvalid",
                "BadTypeDefinitionInvalid",
                "BadSourceNodeIdInvalid",
                "BadTargetNodeIdInvalid",
                "BadDuplicateReferenceNotAllowed",
                "BadInvalidSelfReference",
                "BadReferenceLocalOnly",
                "BadNoDeleteRights",
                "UncertainReferenceNotDeleted",
                "BadServerIndexInvalid",
                "BadViewIdUnknown",
                "BadViewTimestampInvalid",
                "BadViewParameterMismatch",
                "BadViewVersionInvalid",
                "UncertainNotAllNodesAvailable",
                "GoodResultsMayBeIncomplete",
                "BadNotTypeDefinition",
                "UncertainReferenceOutOfServer",
                "BadTooManyMatches",
                "BadQueryTooComplex",
                "BadNoMatch",
                "BadMaxAgeInvalid",
                "BadSecurityModeInsufficient",
                "BadHistoryOperationInvalid",
                "BadHistoryOperationUnsupported",
                "BadInvalidTimestampArgument",
                "BadWriteNotSupported",
                "BadTypeMismatch",
                "BadMethodInvalid",
                "BadArgumentsMissing",
                "BadTooManySubscriptions",
                "BadTooManyPublishRequests",
                "BadNoSubscription",
                "BadSequenceNumberUnknown",
                "BadMessageNotAvailable",
                "BadInsufficientClientProfile",
                "BadStateNotActive",
                "BadTcpServerTooBusy",
                "BadTcpMessageTypeInvalid",
                "BadTcpSecureChannelUnknown",
                "BadTcpMessageTooLarge",
                "BadTcpNotEnoughResources",
                "BadTcpInternalError",
                "BadTcpEndpointUrlInvalid",
                "BadRequestInterrupted",
                "BadRequestTimeout",
                "BadSecureChannelClosed",
                "BadSecureChannelTokenUnknown",
                "BadSequenceNumberInvalid",
                "BadProtocolVersionUnsupported",
                "BadConfigurationError",
                "BadNotConnected",
                "BadDeviceFailure",
                "BadSensorFailure",
                "BadOutOfService",
                "BadDeadbandFilterInvalid",
                "UncertainNoCommunicationLastUsableValue",
                "UncertainLastUsableValue",
                "UncertainSubstituteValue",
                "UncertainInitialValue",
                "UncertainSensorNotAccurate",
                "UncertainEngineeringUnitsExceeded",
                "UncertainSubNormal",
                "GoodLocalOverride",
                "BadRefreshInProgress",
                "BadConditionAlreadyDisabled",
                "BadConditionAlreadyEnabled",
                "BadConditionDisabled",
                "BadEventIdUnknown",
                "BadEventNotAcknowledgeable",
                "BadDialogNotActive",
                "BadDialogResponseInvalid",
                "BadConditionBranchAlreadyAcked",
                "BadConditionBranchAlreadyConfirmed",
                "BadConditionAlreadyShelved",
                "BadConditionNotShelved",
                "BadShelvingTimeOutOfRange",
                "BadNoData",
                "BadBoundNotFound",
                "BadBoundNotSupported",
                "BadDataLost",
                "BadDataUnavailable",
                "BadEntryExists",
                "BadNoEntryExists",
                "BadTimestampNotSupported",
                "GoodEntryInserted",
                "GoodEntryReplaced",
                "UncertainDataSubNormal",
                "GoodNoData",
                "GoodMoreData",
                "BadAggregateListMismatch",
                "BadAggregateNotSupported",
                "BadAggregateInvalidInputs",
                "BadAggregateConfigurationRejected",
                "GoodDataIgnored",
                "BadRequestNotAllowed",
                "GoodEdited",
                "GoodPostActionFailed",
                "UncertainDominantValueChanged",
                "GoodDependentValueChanged",
                "BadDominantValueChanged",
                "UncertainDependentValueChanged",
                "BadDependentValueChanged",
                "GoodCommunicationEvent",
                "GoodShutdownEvent",
                "GoodCallAgain",
                "GoodNonCriticalTimeout",
                "BadInvalidArgument",
                "BadConnectionRejected",
                "BadDisconnect",
                "BadConnectionClosed",
                "BadInvalidState",
                "BadEndOfStream",
                "BadNoDataAvailable",
                "BadWaitingForResponse",
                "BadOperationAbandoned",
                "BadExpectedStreamToBlock",
                "BadWouldBlock",
                "BadSyntaxError",
                "BadMaxConnectionsReached"
            ]
        }
        Enum {
            name: "ErrorCategory"
            values: [
                "NoError",
                "NodeError",
                "AttributeError",
                "PermissionError",
                "ArgumentError",
                "TypeError",
                "ConnectionError",
                "UnspecifiedError"
            ]
        }
    }
    Component {
        file: "private/opcuaattributeoperand_p.h"
        name: "OpcUaAttributeOperand"
        accessSemantics: "reference"
        prototype: "OpcUaOperandBase"
        exports: [
            "QtOpcUa/AttributeOperand 5.13",
            "QtOpcUa/AttributeOperand 6.0"
        ]
        exportMetaObjectRevisions: [1293, 1536]
        Property {
            name: "browsePath"
            type: "OpcUaRelativeNodePath"
            isList: true
            read: "browsePath"
            index: 0
            isReadonly: true
        }
        Property {
            name: "indexRange"
            type: "QString"
            read: "indexRange"
            write: "setIndexRange"
            index: 1
        }
        Property {
            name: "nodeAttribute"
            type: "QOpcUa::NodeAttribute"
            read: "nodeAttribute"
            write: "setNodeAttribute"
            index: 2
        }
        Property {
            name: "typeId"
            type: "OpcUaNodeId"
            isPointer: true
            read: "typeId"
            write: "setTypeId"
            index: 3
        }
        Property { name: "alias"; type: "QString"; read: "alias"; write: "setAlias"; index: 4 }
        Signal { name: "dataChanged" }
    }
    Component {
        file: "private/opcuaconnection_p.h"
        name: "OpcUaConnection"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtOpcUa/Connection 5.12", "QtOpcUa/Connection 6.0"]
        exportMetaObjectRevisions: [1292, 1536]
        Property {
            name: "availableBackends"
            type: "QStringList"
            read: "availableBackends"
            notify: "availableBackendsChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "connected"
            type: "bool"
            read: "connected"
            notify: "connectedChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "backend"
            type: "QString"
            read: "backend"
            write: "setBackend"
            notify: "backendChanged"
            index: 2
        }
        Property {
            name: "defaultConnection"
            type: "bool"
            read: "defaultConnection"
            write: "setDefaultConnection"
            notify: "defaultConnectionChanged"
            index: 3
        }
        Property {
            name: "namespaces"
            type: "QStringList"
            read: "namespaces"
            notify: "namespacesChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "authenticationInformation"
            type: "QOpcUaAuthenticationInformation"
            read: "authenticationInformation"
            write: "setAuthenticationInformation"
            index: 5
        }
        Property {
            name: "supportedSecurityPolicies"
            type: "QStringList"
            read: "supportedSecurityPolicies"
            index: 6
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "supportedUserTokenTypes"
            type: "QJSValue"
            read: "supportedUserTokenTypes"
            index: 7
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "currentEndpoint"
            type: "QOpcUaEndpointDescription"
            read: "currentEndpoint"
            index: 8
            isReadonly: true
        }
        Property {
            name: "connection"
            type: "QOpcUaClient"
            isPointer: true
            read: "connection"
            write: "setConnection"
            notify: "connectionChanged"
            index: 9
        }
        Signal { name: "availableBackendsChanged" }
        Signal { name: "connectedChanged" }
        Signal { name: "backendChanged" }
        Signal { name: "defaultConnectionChanged" }
        Signal { name: "namespacesChanged" }
        Signal {
            name: "readNodeAttributesFinished"
            Parameter { name: "value"; type: "QVariant" }
        }
        Signal {
            name: "writeNodeAttributesFinished"
            Parameter { name: "value"; type: "QVariant" }
        }
        Signal { name: "connectionChanged" }
        Method {
            name: "connectToEndpoint"
            Parameter { name: "endpointDescription"; type: "QOpcUaEndpointDescription" }
        }
        Method { name: "disconnectFromEndpoint" }
        Method {
            name: "setDefaultConnection"
            Parameter { name: "defaultConnection"; type: "bool" }
        }
        Method { name: "setDefaultConnection"; isCloned: true }
        Method {
            name: "setAuthenticationInformation"
            Parameter { name: "authenticationInformation"; type: "QOpcUaAuthenticationInformation" }
        }
        Method {
            name: "setConnection"
            Parameter { name: "client"; type: "QOpcUaClient"; isPointer: true }
        }
        Method {
            name: "clientStateHandler"
            Parameter { name: "state"; type: "QOpcUaClient::ClientState" }
        }
        Method {
            name: "handleReadNodeAttributesFinished"
            Parameter { name: "results"; type: "QOpcUaReadResult"; isList: true }
        }
        Method {
            name: "handleWriteNodeAttributesFinished"
            Parameter { name: "results"; type: "QOpcUaWriteResult"; isList: true }
        }
        Method {
            name: "readNodeAttributes"
            type: "bool"
            Parameter { name: "value"; type: "QJSValue" }
        }
        Method {
            name: "writeNodeAttributes"
            type: "bool"
            Parameter { name: "value"; type: "QJSValue" }
        }
    }
    Component {
        file: "private/opcuadatachangefilter_p.h"
        name: "OpcUaDataChangeFilter"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtOpcUa/DataChangeFilter 5.13",
            "QtOpcUa/DataChangeFilter 6.0"
        ]
        exportMetaObjectRevisions: [1293, 1536]
        Enum {
            name: "DataChangeTrigger"
            values: ["Status", "StatusOrValue", "StatusOrValueOrTimestamp"]
        }
        Enum {
            name: "DeadbandType"
            values: ["None", "Absolute", "Percent"]
        }
        Property {
            name: "trigger"
            type: "DataChangeTrigger"
            read: "trigger"
            write: "setTrigger"
            index: 0
        }
        Property {
            name: "deadbandType"
            type: "DeadbandType"
            read: "deadbandType"
            write: "setDeadbandType"
            index: 1
        }
        Property {
            name: "deadbandValue"
            type: "double"
            read: "deadbandValue"
            write: "setDeadbandValue"
            index: 2
        }
        Signal { name: "filterChanged" }
        Method {
            name: "setTrigger"
            Parameter { name: "trigger"; type: "DataChangeTrigger" }
        }
        Method {
            name: "setDeadbandType"
            Parameter { name: "deadbandType"; type: "DeadbandType" }
        }
        Method {
            name: "setDeadbandValue"
            Parameter { name: "deadbandValue"; type: "double" }
        }
    }
    Component {
        file: "private/opcuaelementoperand_p.h"
        name: "OpcUaElementOperand"
        accessSemantics: "reference"
        prototype: "OpcUaOperandBase"
        exports: ["QtOpcUa/ElementOperand 5.13", "QtOpcUa/ElementOperand 6.0"]
        exportMetaObjectRevisions: [1293, 1536]
        Property { name: "index"; type: "uint"; read: "index"; write: "setIndex"; index: 0 }
        Signal { name: "dataChanged" }
    }
    Component {
        file: "private/opcuaendpointdiscovery_p.h"
        name: "OpcUaEndpointDiscovery"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: [
            "QtOpcUa/EndpointDiscovery 5.13",
            "QtOpcUa/EndpointDiscovery 6.0"
        ]
        exportMetaObjectRevisions: [1293, 1536]
        Property {
            name: "serverUrl"
            type: "QString"
            read: "serverUrl"
            write: "setServerUrl"
            notify: "serverUrlChanged"
            index: 0
        }
        Property {
            name: "count"
            type: "int"
            read: "count"
            notify: "countChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "status"
            type: "OpcUaStatus"
            read: "status"
            notify: "statusChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "connection"
            type: "OpcUaConnection"
            isPointer: true
            read: "connection"
            write: "setConnection"
            notify: "connectionChanged"
            index: 3
        }
        Signal {
            name: "serverUrlChanged"
            Parameter { name: "serverUrl"; type: "QString" }
        }
        Signal { name: "endpointsChanged" }
        Signal { name: "countChanged" }
        Signal { name: "statusChanged" }
        Signal {
            name: "connectionChanged"
            Parameter { type: "OpcUaConnection"; isPointer: true }
        }
        Method { name: "connectSignals" }
        Method {
            name: "handleEndpoints"
            Parameter { name: "endpoints"; type: "QOpcUaEndpointDescription"; isList: true }
            Parameter { name: "statusCode"; type: "QOpcUa::UaStatusCode" }
            Parameter { name: "requestUrl"; type: "QUrl" }
        }
        Method { name: "startRequestEndpoints" }
        Method {
            name: "at"
            type: "QOpcUaEndpointDescription"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        file: "private/opcuaeventfilter_p.h"
        name: "OpcUaEventFilter"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtOpcUa/EventFilter 5.13", "QtOpcUa/EventFilter 6.0"]
        exportMetaObjectRevisions: [1293, 1536]
        Property {
            name: "where"
            type: "OpcUaFilterElement"
            isList: true
            read: "filterElements"
            index: 0
            isReadonly: true
        }
        Property {
            name: "select"
            type: "OpcUaSimpleAttributeOperand"
            isList: true
            read: "selectors"
            index: 1
            isReadonly: true
        }
        Signal { name: "dataChanged" }
    }
    Component {
        file: "private/opcuafilterelement_p.h"
        name: "OpcUaFilterElement"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtOpcUa/FilterElement 5.13", "QtOpcUa/FilterElement 6.0"]
        exportMetaObjectRevisions: [1293, 1536]
        Enum {
            name: "FilterOperator"
            type: "uint"
            values: [
                "Equals",
                "IsNull",
                "GreaterThan",
                "LessThan",
                "GreaterThanOrEqual",
                "LessThanOrEqual",
                "Like",
                "Not",
                "Between",
                "InList",
                "And",
                "Or",
                "Cast",
                "InView",
                "OfType",
                "RelatedTo",
                "BitwiseAnd",
                "BitwiseOr"
            ]
        }
        Property {
            name: "operator"
            type: "FilterOperator"
            read: "operatorType"
            write: "setOperatorType"
            index: 0
        }
        Property {
            name: "firstOperand"
            type: "OpcUaOperandBase"
            isPointer: true
            read: "firstOperand"
            write: "setFirstOperand"
            index: 1
        }
        Property {
            name: "secondOperand"
            type: "OpcUaOperandBase"
            isPointer: true
            read: "secondOperand"
            write: "setSecondOperand"
            index: 2
        }
        Signal { name: "dataChanged" }
    }
    Component {
        file: "private/opcualiteraloperand_p.h"
        name: "OpcUaLiteralOperand"
        accessSemantics: "reference"
        prototype: "OpcUaOperandBase"
        exports: ["QtOpcUa/LiteralOperand 5.13", "QtOpcUa/LiteralOperand 6.0"]
        exportMetaObjectRevisions: [1293, 1536]
        Property { name: "value"; type: "QVariant"; read: "value"; write: "setValue"; index: 0 }
        Property { name: "type"; type: "QOpcUa::Types"; read: "type"; write: "setType"; index: 1 }
        Signal { name: "dataChanged" }
    }
    Component {
        file: "private/opcuamethodargument_p.h"
        name: "OpcUaMethodArgument"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtOpcUa/MethodArgument 5.13", "QtOpcUa/MethodArgument 6.0"]
        exportMetaObjectRevisions: [1293, 1536]
        Property { name: "value"; type: "QVariant"; read: "value"; write: "setValue"; index: 0 }
        Property { name: "type"; type: "QOpcUa::Types"; read: "type"; write: "setType"; index: 1 }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "setType"
            Parameter { name: "type"; type: "QOpcUa::Types" }
        }
    }
    Component {
        file: "private/opcuamethodnode_p.h"
        name: "OpcUaMethodNode"
        accessSemantics: "reference"
        prototype: "OpcUaNode"
        exports: ["QtOpcUa/MethodNode 5.12", "QtOpcUa/MethodNode 6.0"]
        exportMetaObjectRevisions: [1292, 1536]
        Property {
            name: "objectNodeId"
            type: "OpcUaNodeIdType"
            isPointer: true
            read: "objectNodeId"
            write: "setObjectNodeId"
            notify: "objectNodeIdChanged"
            index: 0
        }
        Property {
            name: "inputArguments"
            type: "OpcUaMethodArgument"
            isList: true
            read: "inputArguments"
            notify: "inputArgumentsChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "outputArguments"
            type: "QVariantList"
            read: "outputArguments"
            notify: "outputArgumentsChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "resultStatus"
            type: "OpcUaStatus"
            read: "resultStatus"
            notify: "resultStatusChanged"
            index: 3
            isReadonly: true
        }
        Signal { name: "objectNodeIdChanged" }
        Signal { name: "inputArgumentsChanged" }
        Signal { name: "outputArgumentsChanged" }
        Signal {
            name: "resultStatusChanged"
            Parameter { name: "status"; type: "OpcUaStatus" }
        }
        Method {
            name: "setObjectNodeId"
            Parameter { name: "nodeId"; type: "OpcUaNodeIdType"; isPointer: true }
        }
        Method { name: "callMethod" }
        Method { name: "handleObjectNodeIdChanged" }
        Method {
            name: "handleMethodCallFinished"
            Parameter { name: "methodNodeId"; type: "QString" }
            Parameter { name: "result"; type: "QVariant" }
            Parameter { name: "statusCode"; type: "QOpcUa::UaStatusCode" }
        }
    }
    Component {
        file: "private/opcuanode_p.h"
        name: "OpcUaNode"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtOpcUa/Node 5.12", "QtOpcUa/Node 6.0"]
        exportMetaObjectRevisions: [1292, 1536]
        Enum {
            name: "Status"
            values: [
                "Valid",
                "InvalidNodeId",
                "NoConnection",
                "InvalidNodeType",
                "InvalidClient",
                "FailedToResolveNode",
                "InvalidObjectNode",
                "FailedToReadAttributes",
                "FailedToSetupMonitoring",
                "FailedToWriteAttribute",
                "FailedToModifyMonitoring",
                "FailedToDisableMonitoring"
            ]
        }
        Property {
            name: "nodeId"
            type: "OpcUaNodeIdType"
            isPointer: true
            read: "nodeId"
            write: "setNodeId"
            notify: "nodeIdChanged"
            index: 0
        }
        Property {
            name: "connection"
            type: "OpcUaConnection"
            isPointer: true
            read: "connection"
            write: "setConnection"
            notify: "connectionChanged"
            index: 1
        }
        Property {
            name: "readyToUse"
            type: "bool"
            read: "readyToUse"
            notify: "readyToUseChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "status"
            type: "OpcUaNode::Status"
            read: "status"
            notify: "statusChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "errorMessage"
            type: "QString"
            read: "errorMessage"
            notify: "errorMessageChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "eventFilter"
            type: "OpcUaEventFilter"
            isPointer: true
            read: "eventFilter"
            write: "setEventFilter"
            notify: "eventFilterChanged"
            index: 5
        }
        Property {
            name: "browseName"
            type: "QString"
            read: "browseName"
            write: "setBrowseName"
            notify: "browseNameChanged"
            index: 6
        }
        Property {
            name: "nodeClass"
            type: "QOpcUa::NodeClass"
            read: "nodeClass"
            notify: "nodeClassChanged"
            index: 7
            isReadonly: true
        }
        Property {
            name: "displayName"
            type: "QOpcUaLocalizedText"
            read: "displayName"
            write: "setDisplayName"
            notify: "displayNameChanged"
            index: 8
        }
        Property {
            name: "description"
            type: "QOpcUaLocalizedText"
            read: "description"
            write: "setDescription"
            notify: "descriptionChanged"
            index: 9
        }
        Signal {
            name: "nodeIdChanged"
            Parameter { name: "nodeId"; type: "OpcUaNodeIdType"; isPointer: true }
        }
        Signal {
            name: "connectionChanged"
            Parameter { type: "OpcUaConnection"; isPointer: true }
        }
        Signal { name: "nodeChanged" }
        Signal { name: "readyToUseChanged" }
        Signal { name: "browseNameChanged" }
        Signal { name: "nodeClassChanged" }
        Signal { name: "displayNameChanged" }
        Signal { name: "descriptionChanged" }
        Signal { name: "statusChanged" }
        Signal { name: "errorMessageChanged" }
        Signal { name: "eventFilterChanged" }
        Signal {
            name: "eventOccurred"
            Parameter { name: "values"; type: "QVariantList" }
        }
        Method {
            name: "setNodeId"
            Parameter { name: "nodeId"; type: "OpcUaNodeIdType"; isPointer: true }
        }
        Method {
            name: "setConnection"
            Parameter { type: "OpcUaConnection"; isPointer: true }
        }
        Method {
            name: "setupNode"
            Parameter { name: "absoluteNodePath"; type: "QString" }
        }
        Method { name: "updateNode" }
        Method { name: "updateEventFilter" }
        Method {
            name: "getSourceTimestamp"
            type: "QDateTime"
            Parameter { type: "QOpcUa::NodeAttribute" }
        }
        Method {
            name: "getServerTimestamp"
            type: "QDateTime"
            Parameter { type: "QOpcUa::NodeAttribute" }
        }
    }
    Component {
        file: "private/opcuanodeid_p.h"
        name: "OpcUaNodeId"
        accessSemantics: "reference"
        prototype: "OpcUaNodeIdType"
        exports: ["QtOpcUa/NodeId 5.12", "QtOpcUa/NodeId 6.0"]
        exportMetaObjectRevisions: [1292, 1536]
        Property {
            name: "ns"
            type: "QString"
            read: "nodeNamespace"
            write: "setNodeNamespace"
            notify: "nodeNamespaceChanged"
            index: 0
        }
        Property {
            name: "identifier"
            type: "QString"
            read: "identifier"
            write: "setIdentifier"
            notify: "identifierChanged"
            index: 1
        }
        Signal {
            name: "nodeNamespaceChanged"
            Parameter { type: "QString" }
        }
        Signal {
            name: "identifierChanged"
            Parameter { type: "QString" }
        }
        Signal { name: "nodeChanged" }
    }
    Component {
        file: "private/opcuanodeidtype_p.h"
        name: "OpcUaNodeIdType"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtOpcUa/NodeIdType 5.12", "QtOpcUa/NodeIdType 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1292, 1536]
        Signal {
            name: "nodeNamespaceChanged"
            Parameter { type: "QString" }
        }
        Signal {
            name: "identifierChanged"
            Parameter { type: "QString" }
        }
        Signal { name: "nodeChanged" }
    }
    Component {
        file: "private/opcuaoperandbase_p.h"
        name: "OpcUaOperandBase"
        accessSemantics: "reference"
        prototype: "QObject"
    }
    Component {
        file: "private/opcuareaditem_p.h"
        name: "OpcUaReadItemFactory"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtOpcUa/ReadItem 5.13", "QtOpcUa/ReadItem 6.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [1293, 1536]
        Method { name: "create"; type: "OpcUaReadItem" }
    }
    Component {
        file: "private/opcuarelativenodeid_p.h"
        name: "OpcUaRelativeNodeId"
        accessSemantics: "reference"
        prototype: "OpcUaNodeIdType"
        exports: ["QtOpcUa/RelativeNodeId 5.12", "QtOpcUa/RelativeNodeId 6.0"]
        exportMetaObjectRevisions: [1292, 1536]
        Property {
            name: "startNode"
            type: "OpcUaNodeIdType"
            isPointer: true
            read: "startNode"
            write: "setStartNode"
            notify: "startNodeChanged"
            index: 0
        }
        Property {
            name: "path"
            type: "OpcUaRelativeNodePath"
            isList: true
            read: "paths"
            index: 1
            isReadonly: true
        }
        Signal {
            name: "startNodeChanged"
            Parameter { name: "startNode"; type: "OpcUaNodeIdType"; isPointer: true }
        }
        Signal { name: "pathChanged" }
        Method {
            name: "setStartNode"
            Parameter { name: "startNode"; type: "OpcUaNodeIdType"; isPointer: true }
        }
    }
    Component {
        file: "private/opcuarelativenodepath_p.h"
        name: "OpcUaRelativeNodePath"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtOpcUa/RelativeNodePath 5.12",
            "QtOpcUa/RelativeNodePath 6.0"
        ]
        exportMetaObjectRevisions: [1292, 1536]
        Property {
            name: "ns"
            type: "QString"
            read: "nodeNamespace"
            write: "setNodeNamespace"
            notify: "nodeNamespaceChanged"
            index: 0
        }
        Property {
            name: "browseName"
            type: "QString"
            read: "browseName"
            write: "setBrowseName"
            notify: "browseNameChanged"
            index: 1
        }
        Property {
            name: "referenceType"
            type: "QVariant"
            read: "referenceType"
            write: "setReferenceType"
            notify: "referenceTypeChanged"
            index: 2
        }
        Property {
            name: "includeSubtypes"
            type: "bool"
            read: "includeSubtypes"
            write: "setIncludeSubtypes"
            notify: "includeSubtypesChanged"
            index: 3
        }
        Property {
            name: "isInverse"
            type: "bool"
            read: "isInverse"
            write: "setIsInverse"
            notify: "isInverseChanged"
            index: 4
        }
        Signal {
            name: "nodeNamespaceChanged"
            Parameter { name: "ns"; type: "QString" }
        }
        Signal {
            name: "browseNameChanged"
            Parameter { name: "browseName"; type: "QString" }
        }
        Signal { name: "referenceTypeChanged" }
        Signal {
            name: "includeSubtypesChanged"
            Parameter { name: "includeSubtypes"; type: "bool" }
        }
        Signal {
            name: "isInverseChanged"
            Parameter { name: "isInverse"; type: "bool" }
        }
        Method {
            name: "setNodeNamespace"
            Parameter { name: "ns"; type: "QString" }
        }
        Method {
            name: "setBrowseName"
            Parameter { name: "browseName"; type: "QString" }
        }
        Method {
            name: "setReferenceType"
            Parameter { name: "referenceType"; type: "QVariant" }
        }
        Method {
            name: "setIncludeSubtypes"
            Parameter { name: "includeSubtypes"; type: "bool" }
        }
        Method {
            name: "setIsInverse"
            Parameter { name: "isInverse"; type: "bool" }
        }
    }
    Component {
        file: "private/opcuaserverdiscovery_p.h"
        name: "OpcUaServerDiscovery"
        accessSemantics: "reference"
        prototype: "QStandardItemModel"
        exports: [
            "QtOpcUa/ServerDiscovery 5.13",
            "QtOpcUa/ServerDiscovery 6.0",
            "QtOpcUa/ServerDiscovery 6.4"
        ]
        exportMetaObjectRevisions: [1293, 1536, 1540]
        Property {
            name: "discoveryUrl"
            type: "QString"
            read: "discoveryUrl"
            write: "setDiscoveryUrl"
            notify: "discoveryUrlChanged"
            index: 0
        }
        Property {
            name: "count"
            type: "int"
            read: "count"
            notify: "countChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "status"
            type: "OpcUaStatus"
            read: "status"
            notify: "statusChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "connection"
            type: "OpcUaConnection"
            isPointer: true
            read: "connection"
            write: "setConnection"
            notify: "connectionChanged"
            index: 3
        }
        Signal { name: "discoveryUrlChanged" }
        Signal { name: "serversChanged" }
        Signal { name: "countChanged" }
        Signal { name: "statusChanged" }
        Signal {
            name: "connectionChanged"
            Parameter { type: "OpcUaConnection"; isPointer: true }
        }
        Method { name: "connectSignals" }
        Method {
            name: "handleServers"
            Parameter { name: "servers"; type: "QOpcUaApplicationDescription"; isList: true }
            Parameter { name: "statusCode"; type: "QOpcUa::UaStatusCode" }
            Parameter { name: "requestUrl"; type: "QUrl" }
        }
        Method { name: "startFindServers" }
        Method {
            name: "at"
            type: "QOpcUaApplicationDescription"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        file: "private/opcuasimpleattributeoperand_p.h"
        name: "OpcUaSimpleAttributeOperand"
        accessSemantics: "reference"
        prototype: "OpcUaOperandBase"
        exports: [
            "QtOpcUa/SimpleAttributeOperand 5.13",
            "QtOpcUa/SimpleAttributeOperand 6.0"
        ]
        exportMetaObjectRevisions: [1293, 1536]
        Property {
            name: "browsePath"
            type: "OpcUaNodeId"
            isList: true
            read: "browsePath"
            index: 0
            isReadonly: true
        }
        Property {
            name: "indexRange"
            type: "QString"
            read: "indexRange"
            write: "setIndexRange"
            index: 1
        }
        Property {
            name: "nodeAttribute"
            type: "QOpcUa::NodeAttribute"
            read: "nodeAttribute"
            write: "setNodeAttribute"
            index: 2
        }
        Property { name: "typeId"; type: "QString"; read: "typeId"; write: "setTypeId"; index: 3 }
        Signal { name: "dataChanged" }
    }
    Component {
        file: "private/opcuastatus_p.h"
        name: "OpcUaStatus"
        accessSemantics: "value"
        exports: ["QtOpcUa/status 5.13", "QtOpcUa/status 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1293, 1536]
        Enum {
            name: "Status"
            values: [
                "Good",
                "BadUnexpectedError",
                "BadInternalError",
                "BadOutOfMemory",
                "BadResourceUnavailable",
                "BadCommunicationError",
                "BadEncodingError",
                "BadDecodingError",
                "BadEncodingLimitsExceeded",
                "BadRequestTooLarge",
                "BadResponseTooLarge",
                "BadUnknownResponse",
                "BadTimeout",
                "BadServiceUnsupported",
                "BadShutdown",
                "BadServerNotConnected",
                "BadServerHalted",
                "BadNothingToDo",
                "BadTooManyOperations",
                "BadTooManyMonitoredItems",
                "BadDataTypeIdUnknown",
                "BadCertificateInvalid",
                "BadSecurityChecksFailed",
                "BadCertificateTimeInvalid",
                "BadCertificateIssuerTimeInvalid",
                "BadCertificateHostNameInvalid",
                "BadCertificateUriInvalid",
                "BadCertificateUseNotAllowed",
                "BadCertificateIssuerUseNotAllowed",
                "BadCertificateUntrusted",
                "BadCertificateRevocationUnknown",
                "BadCertificateIssuerRevocationUnknown",
                "BadCertificateRevoked",
                "BadCertificateIssuerRevoked",
                "BadCertificateChainIncomplete",
                "BadUserAccessDenied",
                "BadIdentityTokenInvalid",
                "BadIdentityTokenRejected",
                "BadSecureChannelIdInvalid",
                "BadInvalidTimestamp",
                "BadNonceInvalid",
                "BadSessionIdInvalid",
                "BadSessionClosed",
                "BadSessionNotActivated",
                "BadSubscriptionIdInvalid",
                "BadRequestHeaderInvalid",
                "BadTimestampsToReturnInvalid",
                "BadRequestCancelledByClient",
                "BadTooManyArguments",
                "GoodSubscriptionTransferred",
                "GoodCompletesAsynchronously",
                "GoodOverload",
                "GoodClamped",
                "BadNoCommunication",
                "BadWaitingForInitialData",
                "BadNodeIdInvalid",
                "BadNodeIdUnknown",
                "BadAttributeIdInvalid",
                "BadIndexRangeInvalid",
                "BadIndexRangeNoData",
                "BadDataEncodingInvalid",
                "BadDataEncodingUnsupported",
                "BadNotReadable",
                "BadNotWritable",
                "BadOutOfRange",
                "BadNotSupported",
                "BadNotFound",
                "BadObjectDeleted",
                "BadNotImplemented",
                "BadMonitoringModeInvalid",
                "BadMonitoredItemIdInvalid",
                "BadMonitoredItemFilterInvalid",
                "BadMonitoredItemFilterUnsupported",
                "BadFilterNotAllowed",
                "BadStructureMissing",
                "BadEventFilterInvalid",
                "BadContentFilterInvalid",
                "BadFilterOperatorInvalid",
                "BadFilterOperatorUnsupported",
                "BadFilterOperandCountMismatch",
                "BadFilterOperandInvalid",
                "BadFilterElementInvalid",
                "BadFilterLiteralInvalid",
                "BadContinuationPointInvalid",
                "BadNoContinuationPoints",
                "BadReferenceTypeIdInvalid",
                "BadBrowseDirectionInvalid",
                "BadNodeNotInView",
                "BadServerUriInvalid",
                "BadServerNameMissing",
                "BadDiscoveryUrlMissing",
                "BadSempahoreFileMissing",
                "BadRequestTypeInvalid",
                "BadSecurityModeRejected",
                "BadSecurityPolicyRejected",
                "BadTooManySessions",
                "BadUserSignatureInvalid",
                "BadApplicationSignatureInvalid",
                "BadNoValidCertificates",
                "BadIdentityChangeNotSupported",
                "BadRequestCancelledByRequest",
                "BadParentNodeIdInvalid",
                "BadReferenceNotAllowed",
                "BadNodeIdRejected",
                "BadNodeIdExists",
                "BadNodeClassInvalid",
                "BadBrowseNameInvalid",
                "BadBrowseNameDuplicated",
                "BadNodeAttributesInvalid",
                "BadTypeDefinitionInvalid",
                "BadSourceNodeIdInvalid",
                "BadTargetNodeIdInvalid",
                "BadDuplicateReferenceNotAllowed",
                "BadInvalidSelfReference",
                "BadReferenceLocalOnly",
                "BadNoDeleteRights",
                "UncertainReferenceNotDeleted",
                "BadServerIndexInvalid",
                "BadViewIdUnknown",
                "BadViewTimestampInvalid",
                "BadViewParameterMismatch",
                "BadViewVersionInvalid",
                "UncertainNotAllNodesAvailable",
                "GoodResultsMayBeIncomplete",
                "BadNotTypeDefinition",
                "UncertainReferenceOutOfServer",
                "BadTooManyMatches",
                "BadQueryTooComplex",
                "BadNoMatch",
                "BadMaxAgeInvalid",
                "BadSecurityModeInsufficient",
                "BadHistoryOperationInvalid",
                "BadHistoryOperationUnsupported",
                "BadInvalidTimestampArgument",
                "BadWriteNotSupported",
                "BadTypeMismatch",
                "BadMethodInvalid",
                "BadArgumentsMissing",
                "BadTooManySubscriptions",
                "BadTooManyPublishRequests",
                "BadNoSubscription",
                "BadSequenceNumberUnknown",
                "BadMessageNotAvailable",
                "BadInsufficientClientProfile",
                "BadStateNotActive",
                "BadTcpServerTooBusy",
                "BadTcpMessageTypeInvalid",
                "BadTcpSecureChannelUnknown",
                "BadTcpMessageTooLarge",
                "BadTcpNotEnoughResources",
                "BadTcpInternalError",
                "BadTcpEndpointUrlInvalid",
                "BadRequestInterrupted",
                "BadRequestTimeout",
                "BadSecureChannelClosed",
                "BadSecureChannelTokenUnknown",
                "BadSequenceNumberInvalid",
                "BadProtocolVersionUnsupported",
                "BadConfigurationError",
                "BadNotConnected",
                "BadDeviceFailure",
                "BadSensorFailure",
                "BadOutOfService",
                "BadDeadbandFilterInvalid",
                "UncertainNoCommunicationLastUsableValue",
                "UncertainLastUsableValue",
                "UncertainSubstituteValue",
                "UncertainInitialValue",
                "UncertainSensorNotAccurate",
                "UncertainEngineeringUnitsExceeded",
                "UncertainSubNormal",
                "GoodLocalOverride",
                "BadRefreshInProgress",
                "BadConditionAlreadyDisabled",
                "BadConditionAlreadyEnabled",
                "BadConditionDisabled",
                "BadEventIdUnknown",
                "BadEventNotAcknowledgeable",
                "BadDialogNotActive",
                "BadDialogResponseInvalid",
                "BadConditionBranchAlreadyAcked",
                "BadConditionBranchAlreadyConfirmed",
                "BadConditionAlreadyShelved",
                "BadConditionNotShelved",
                "BadShelvingTimeOutOfRange",
                "BadNoData",
                "BadBoundNotFound",
                "BadBoundNotSupported",
                "BadDataLost",
                "BadDataUnavailable",
                "BadEntryExists",
                "BadNoEntryExists",
                "BadTimestampNotSupported",
                "GoodEntryInserted",
                "GoodEntryReplaced",
                "UncertainDataSubNormal",
                "GoodNoData",
                "GoodMoreData",
                "BadAggregateListMismatch",
                "BadAggregateNotSupported",
                "BadAggregateInvalidInputs",
                "BadAggregateConfigurationRejected",
                "GoodDataIgnored",
                "BadRequestNotAllowed",
                "GoodEdited",
                "GoodPostActionFailed",
                "UncertainDominantValueChanged",
                "GoodDependentValueChanged",
                "BadDominantValueChanged",
                "UncertainDependentValueChanged",
                "BadDependentValueChanged",
                "GoodCommunicationEvent",
                "GoodShutdownEvent",
                "GoodCallAgain",
                "GoodNonCriticalTimeout",
                "BadInvalidArgument",
                "BadConnectionRejected",
                "BadDisconnect",
                "BadConnectionClosed",
                "BadInvalidState",
                "BadEndOfStream",
                "BadNoDataAvailable",
                "BadWaitingForResponse",
                "BadOperationAbandoned",
                "BadExpectedStreamToBlock",
                "BadWouldBlock",
                "BadSyntaxError",
                "BadMaxConnectionsReached"
            ]
        }
        Property { name: "isGood"; type: "bool"; read: "isGood"; index: 0; isReadonly: true }
        Property { name: "isBad"; type: "bool"; read: "isBad"; index: 1; isReadonly: true }
        Property { name: "status"; type: "Status"; read: "status"; index: 2; isReadonly: true }
    }
    Component {
        file: "private/opcuavaluenode_p.h"
        name: "OpcUaValueNode"
        accessSemantics: "reference"
        prototype: "OpcUaNode"
        exports: ["QtOpcUa/ValueNode 5.12", "QtOpcUa/ValueNode 6.0"]
        exportMetaObjectRevisions: [1292, 1536]
        Property {
            name: "value"
            type: "QVariant"
            read: "value"
            write: "setValue"
            notify: "valueChanged"
            index: 0
        }
        Property {
            name: "valueType"
            type: "QOpcUa::Types"
            read: "valueType"
            write: "setValueType"
            index: 1
        }
        Property {
            name: "serverTimestamp"
            type: "QDateTime"
            read: "serverTimestamp"
            index: 2
            isReadonly: true
        }
        Property {
            name: "sourceTimestamp"
            type: "QDateTime"
            read: "sourceTimestamp"
            index: 3
            isReadonly: true
        }
        Property {
            name: "monitored"
            type: "bool"
            read: "monitored"
            write: "setMonitored"
            notify: "monitoredChanged"
            index: 4
        }
        Property {
            name: "publishingInterval"
            type: "double"
            read: "publishingInterval"
            write: "setPublishingInterval"
            notify: "publishingIntervalChanged"
            index: 5
        }
        Property {
            name: "filter"
            type: "OpcUaDataChangeFilter"
            isPointer: true
            read: "filter"
            write: "setFilter"
            notify: "filterChanged"
            index: 6
        }
        Signal {
            name: "valueChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Signal {
            name: "monitoredChanged"
            Parameter { name: "monitored"; type: "bool" }
        }
        Signal {
            name: "publishingIntervalChanged"
            Parameter { name: "publishingInterval"; type: "double" }
        }
        Signal {
            name: "dataChangeOccurred"
            Parameter { name: "value"; type: "QVariant" }
        }
        Signal { name: "filterChanged" }
        Method {
            name: "setValue"
            Parameter { type: "QVariant" }
        }
        Method {
            name: "setMonitored"
            Parameter { name: "monitored"; type: "bool" }
        }
        Method {
            name: "setPublishingInterval"
            Parameter { name: "publishingInterval"; type: "double" }
        }
        Method {
            name: "setValueType"
            Parameter { name: "valueType"; type: "QOpcUa::Types" }
        }
        Method {
            name: "setupNode"
            Parameter { name: "absolutePath"; type: "QString" }
        }
        Method { name: "updateSubscription" }
        Method { name: "updateFilters" }
    }
    Component {
        file: "private/opcuawriteitem_p.h"
        name: "OpcUaWriteItemFactory"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtOpcUa/WriteItem 5.13", "QtOpcUa/WriteItem 6.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [1293, 1536]
        Method { name: "create"; type: "OpcUaWriteItem" }
    }
    Component {
        file: "private/opcuastatus_p.h"
        name: "OpcUaStatus"
        accessSemantics: "none"
        exports: ["QtOpcUa/Status 5.13", "QtOpcUa/Status 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1293, 1536]
        Enum {
            name: "Status"
            values: [
                "Good",
                "BadUnexpectedError",
                "BadInternalError",
                "BadOutOfMemory",
                "BadResourceUnavailable",
                "BadCommunicationError",
                "BadEncodingError",
                "BadDecodingError",
                "BadEncodingLimitsExceeded",
                "BadRequestTooLarge",
                "BadResponseTooLarge",
                "BadUnknownResponse",
                "BadTimeout",
                "BadServiceUnsupported",
                "BadShutdown",
                "BadServerNotConnected",
                "BadServerHalted",
                "BadNothingToDo",
                "BadTooManyOperations",
                "BadTooManyMonitoredItems",
                "BadDataTypeIdUnknown",
                "BadCertificateInvalid",
                "BadSecurityChecksFailed",
                "BadCertificateTimeInvalid",
                "BadCertificateIssuerTimeInvalid",
                "BadCertificateHostNameInvalid",
                "BadCertificateUriInvalid",
                "BadCertificateUseNotAllowed",
                "BadCertificateIssuerUseNotAllowed",
                "BadCertificateUntrusted",
                "BadCertificateRevocationUnknown",
                "BadCertificateIssuerRevocationUnknown",
                "BadCertificateRevoked",
                "BadCertificateIssuerRevoked",
                "BadCertificateChainIncomplete",
                "BadUserAccessDenied",
                "BadIdentityTokenInvalid",
                "BadIdentityTokenRejected",
                "BadSecureChannelIdInvalid",
                "BadInvalidTimestamp",
                "BadNonceInvalid",
                "BadSessionIdInvalid",
                "BadSessionClosed",
                "BadSessionNotActivated",
                "BadSubscriptionIdInvalid",
                "BadRequestHeaderInvalid",
                "BadTimestampsToReturnInvalid",
                "BadRequestCancelledByClient",
                "BadTooManyArguments",
                "GoodSubscriptionTransferred",
                "GoodCompletesAsynchronously",
                "GoodOverload",
                "GoodClamped",
                "BadNoCommunication",
                "BadWaitingForInitialData",
                "BadNodeIdInvalid",
                "BadNodeIdUnknown",
                "BadAttributeIdInvalid",
                "BadIndexRangeInvalid",
                "BadIndexRangeNoData",
                "BadDataEncodingInvalid",
                "BadDataEncodingUnsupported",
                "BadNotReadable",
                "BadNotWritable",
                "BadOutOfRange",
                "BadNotSupported",
                "BadNotFound",
                "BadObjectDeleted",
                "BadNotImplemented",
                "BadMonitoringModeInvalid",
                "BadMonitoredItemIdInvalid",
                "BadMonitoredItemFilterInvalid",
                "BadMonitoredItemFilterUnsupported",
                "BadFilterNotAllowed",
                "BadStructureMissing",
                "BadEventFilterInvalid",
                "BadContentFilterInvalid",
                "BadFilterOperatorInvalid",
                "BadFilterOperatorUnsupported",
                "BadFilterOperandCountMismatch",
                "BadFilterOperandInvalid",
                "BadFilterElementInvalid",
                "BadFilterLiteralInvalid",
                "BadContinuationPointInvalid",
                "BadNoContinuationPoints",
                "BadReferenceTypeIdInvalid",
                "BadBrowseDirectionInvalid",
                "BadNodeNotInView",
                "BadServerUriInvalid",
                "BadServerNameMissing",
                "BadDiscoveryUrlMissing",
                "BadSempahoreFileMissing",
                "BadRequestTypeInvalid",
                "BadSecurityModeRejected",
                "BadSecurityPolicyRejected",
                "BadTooManySessions",
                "BadUserSignatureInvalid",
                "BadApplicationSignatureInvalid",
                "BadNoValidCertificates",
                "BadIdentityChangeNotSupported",
                "BadRequestCancelledByRequest",
                "BadParentNodeIdInvalid",
                "BadReferenceNotAllowed",
                "BadNodeIdRejected",
                "BadNodeIdExists",
                "BadNodeClassInvalid",
                "BadBrowseNameInvalid",
                "BadBrowseNameDuplicated",
                "BadNodeAttributesInvalid",
                "BadTypeDefinitionInvalid",
                "BadSourceNodeIdInvalid",
                "BadTargetNodeIdInvalid",
                "BadDuplicateReferenceNotAllowed",
                "BadInvalidSelfReference",
                "BadReferenceLocalOnly",
                "BadNoDeleteRights",
                "UncertainReferenceNotDeleted",
                "BadServerIndexInvalid",
                "BadViewIdUnknown",
                "BadViewTimestampInvalid",
                "BadViewParameterMismatch",
                "BadViewVersionInvalid",
                "UncertainNotAllNodesAvailable",
                "GoodResultsMayBeIncomplete",
                "BadNotTypeDefinition",
                "UncertainReferenceOutOfServer",
                "BadTooManyMatches",
                "BadQueryTooComplex",
                "BadNoMatch",
                "BadMaxAgeInvalid",
                "BadSecurityModeInsufficient",
                "BadHistoryOperationInvalid",
                "BadHistoryOperationUnsupported",
                "BadInvalidTimestampArgument",
                "BadWriteNotSupported",
                "BadTypeMismatch",
                "BadMethodInvalid",
                "BadArgumentsMissing",
                "BadTooManySubscriptions",
                "BadTooManyPublishRequests",
                "BadNoSubscription",
                "BadSequenceNumberUnknown",
                "BadMessageNotAvailable",
                "BadInsufficientClientProfile",
                "BadStateNotActive",
                "BadTcpServerTooBusy",
                "BadTcpMessageTypeInvalid",
                "BadTcpSecureChannelUnknown",
                "BadTcpMessageTooLarge",
                "BadTcpNotEnoughResources",
                "BadTcpInternalError",
                "BadTcpEndpointUrlInvalid",
                "BadRequestInterrupted",
                "BadRequestTimeout",
                "BadSecureChannelClosed",
                "BadSecureChannelTokenUnknown",
                "BadSequenceNumberInvalid",
                "BadProtocolVersionUnsupported",
                "BadConfigurationError",
                "BadNotConnected",
                "BadDeviceFailure",
                "BadSensorFailure",
                "BadOutOfService",
                "BadDeadbandFilterInvalid",
                "UncertainNoCommunicationLastUsableValue",
                "UncertainLastUsableValue",
                "UncertainSubstituteValue",
                "UncertainInitialValue",
                "UncertainSensorNotAccurate",
                "UncertainEngineeringUnitsExceeded",
                "UncertainSubNormal",
                "GoodLocalOverride",
                "BadRefreshInProgress",
                "BadConditionAlreadyDisabled",
                "BadConditionAlreadyEnabled",
                "BadConditionDisabled",
                "BadEventIdUnknown",
                "BadEventNotAcknowledgeable",
                "BadDialogNotActive",
                "BadDialogResponseInvalid",
                "BadConditionBranchAlreadyAcked",
                "BadConditionBranchAlreadyConfirmed",
                "BadConditionAlreadyShelved",
                "BadConditionNotShelved",
                "BadShelvingTimeOutOfRange",
                "BadNoData",
                "BadBoundNotFound",
                "BadBoundNotSupported",
                "BadDataLost",
                "BadDataUnavailable",
                "BadEntryExists",
                "BadNoEntryExists",
                "BadTimestampNotSupported",
                "GoodEntryInserted",
                "GoodEntryReplaced",
                "UncertainDataSubNormal",
                "GoodNoData",
                "GoodMoreData",
                "BadAggregateListMismatch",
                "BadAggregateNotSupported",
                "BadAggregateInvalidInputs",
                "BadAggregateConfigurationRejected",
                "GoodDataIgnored",
                "BadRequestNotAllowed",
                "GoodEdited",
                "GoodPostActionFailed",
                "UncertainDominantValueChanged",
                "GoodDependentValueChanged",
                "BadDominantValueChanged",
                "UncertainDependentValueChanged",
                "BadDependentValueChanged",
                "GoodCommunicationEvent",
                "GoodShutdownEvent",
                "GoodCallAgain",
                "GoodNonCriticalTimeout",
                "BadInvalidArgument",
                "BadConnectionRejected",
                "BadDisconnect",
                "BadConnectionClosed",
                "BadInvalidState",
                "BadEndOfStream",
                "BadNoDataAvailable",
                "BadWaitingForResponse",
                "BadOperationAbandoned",
                "BadExpectedStreamToBlock",
                "BadWouldBlock",
                "BadSyntaxError",
                "BadMaxConnectionsReached"
            ]
        }
        Property { name: "isGood"; type: "bool"; read: "isGood"; index: 0; isReadonly: true }
        Property { name: "isBad"; type: "bool"; read: "isBad"; index: 1; isReadonly: true }
        Property { name: "status"; type: "Status"; read: "status"; index: 2; isReadonly: true }
    }
    Component {
        file: "private/opcuaforeign_p.h"
        name: "QOpcUaApplicationDescription"
        accessSemantics: "none"
        exports: [
            "QtOpcUa/ApplicationDescription 5.13",
            "QtOpcUa/ApplicationDescription 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [1293, 1536]
        Enum {
            name: "ApplicationType"
            values: ["Server", "Client", "ClientAndServer", "DiscoveryServer"]
        }
        Property {
            name: "applicationUri"
            type: "QString"
            read: "applicationUri"
            index: 0
            isReadonly: true
        }
        Property { name: "productUri"; type: "QString"; read: "productUri"; index: 1; isReadonly: true }
        Property {
            name: "applicationName"
            type: "QOpcUaLocalizedText"
            read: "applicationName"
            index: 2
            isReadonly: true
        }
        Property {
            name: "applicationType"
            type: "QOpcUaApplicationDescription::ApplicationType"
            read: "applicationType"
            index: 3
            isReadonly: true
        }
        Property {
            name: "gatewayServerUri"
            type: "QString"
            read: "gatewayServerUri"
            index: 4
            isReadonly: true
        }
        Property {
            name: "discoveryProfileUri"
            type: "QString"
            read: "discoveryProfileUri"
            index: 5
            isReadonly: true
        }
        Property {
            name: "discoveryUrls"
            type: "QString"
            isList: true
            read: "discoveryUrls"
            index: 6
            isReadonly: true
        }
    }
    Component {
        file: "private/opcuaforeign_p.h"
        name: "QOpcUaUserTokenPolicy"
        accessSemantics: "none"
        exports: [
            "QtOpcUa/UserTokenPolicy 5.13",
            "QtOpcUa/UserTokenPolicy 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [1293, 1536]
        Enum {
            name: "TokenType"
            values: ["Anonymous", "Username", "Certificate", "IssuedToken"]
        }
    }
    Component {
        file: "qstandarditemmodel.h"
        name: "QStandardItemModel"
        accessSemantics: "reference"
        prototype: "QAbstractItemModel"
        Property {
            name: "sortRole"
            type: "int"
            bindable: "bindableSortRole"
            read: "sortRole"
            write: "setSortRole"
            index: 0
        }
        Signal {
            name: "itemChanged"
            Parameter { name: "item"; type: "QStandardItem"; isPointer: true }
        }
        Method {
            name: "_q_emitItemChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
    }
}
